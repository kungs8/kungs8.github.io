<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yanpenggong 大数据实验室</title>
  
  <subtitle>一个专注于科研前线的大数据团队，致力于打造更好更牛的大数据平台</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-25T16:00:09.976Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>yanpenggong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis教程</title>
    <link href="http://example.com/2022/05/26/Redis%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2022/05/26/Redis%E6%95%99%E7%A8%8B/</id>
    <published>2022-05-25T16:00:00.000Z</published>
    <updated>2022-05-25T16:00:09.976Z</updated>
    
    <content type="html"><![CDATA[<div align="center">  <font size='60'>Redis教程</font><br>  <font size='3'>    <B>Author: </B><a href="https://kungs8.github.io">yanpenggong</a>&#x3000;&#x3000;&#x3000;&#x3000;&#x3000;&#x3000;    <B>Email: </B><a href="yanpenggong@163.com">yanpenggong@163.com</a><br>    <B>Github: </B><a href="https://github.com/kungs8">kungs8</a>    &#x3000;&#x3000;&#x3000;&#x3000;    <B>CSDN: </B><a href="https://blog.csdn.net/yanpenggong">https://blog.csdn.net/yanpenggong</a>  </font></div><p>[toc]</p><h1 id="1-Linux-安装-Redis-并配置"><a href="#1-Linux-安装-Redis-并配置" class="headerlink" title="1. Linux 安装 Redis 并配置"></a>1. Linux 安装 Redis 并配置</h1><h2 id="1-1-下载，执行编译并安装"><a href="#1-1-下载，执行编译并安装" class="headerlink" title="1.1 下载，执行编译并安装"></a>1.1 下载，执行编译并安装</h2><p>下载地址：<a href="http://redis.io/download，下载最新稳定版本。">http://redis.io/download，下载最新稳定版本。</a></p><p>本教程使用的最新文档版本为 6.2.6，下载并安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd /opt/software/</span><br><span class="line">[root@localhost software]# wget http://download.redis.io//releases/redis-6.2.6.tar.gz  # 下载redis安装包</span><br><span class="line">[root@localhost software]# tar -xzf redis-6.2.6.tar.gz # 下载redis安装包</span><br><span class="line">[root@localhost software]# cd redis-6.2.6</span><br><span class="line">[root@localhost redis-6.2.6]# make</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><ol><li><p>如果没有wget，则会报错，通过使用<code>yum install wget</code> 就行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Redis_dir]# wget http://download.redis.io//releases/redis-6.2.6.tar.gz</span><br><span class="line">-bash: wget: 未找到命令</span><br><span class="line">[root@localhost Redis_dir]# yum install wget</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirror.lzu.edu.cn</span><br><span class="line"> * extras: mirror.lzu.edu.cn</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">正在解决依赖关系</span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在检查事务</span></span><br><span class="line"><span class="meta prompt_">---&gt; </span><span class="language-bash">软件包 wget.x86_64.0.1.14-18.el7_6.1 将被 安装</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">解决依赖关系完成</span></span><br><span class="line"></span><br><span class="line">依赖关系解决</span><br><span class="line"></span><br><span class="line">=======================================================================================================================</span><br><span class="line"> Package                 架构                      版本                                  源                       大小</span><br><span class="line">============================================================================```=====================================</span><br><span class="line">正在安装:</span><br><span class="line"> wget                    x86_64                    1.14-18.el7_6.1                       base                    547 k</span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line">=======================================================================================================================</span><br><span class="line">安装  1 软件包</span><br><span class="line"></span><br><span class="line">总下载量：547 k</span><br><span class="line">安装大小：2.0 M</span><br><span class="line">Is this ok [y/d/N]: y</span><br><span class="line">Downloading packages:</span><br><span class="line">wget-1.14-18.el7_6.1.x86_64.rpm                                                                 | 547 kB  00:00:00     </span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  正在安装    : wget-1.14-18.el7_6.1.x86_64                                                                        1/1 </span><br><span class="line">  验证中      : wget-1.14-18.el7_6.1.x86_64                                                                        1/1 </span><br><span class="line"></span><br><span class="line">已安装:</span><br><span class="line">  wget.x86_64 0:1.14-18.el7_6.1                                                                                        </span><br><span class="line"></span><br><span class="line">完毕！</span><br><span class="line">[root@localhost Redis_dir]# </span><br></pre></td></tr></table></figure></li><li><p><strong>系统缺少gcc环境的报错(安装Redis执行make命令时遇到此错误)</strong></p><p><strong>问题：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">make[3]: cc：命令未找到</span><br><span class="line">make[3]: *** [alloc.o] 错误 127</span><br><span class="line">make[3]: 离开目录&quot;/opt/software/redis-6.2.6/deps/hiredis&quot;</span><br><span class="line">make[2]: *** [hiredis] 错误 2</span><br><span class="line">make[2]: 离开目录&quot;/opt/software/redis-6.2.6/deps&quot;</span><br><span class="line">make[1]: [persist-settings] 错误 2 (忽略)</span><br><span class="line">    CC adlist.o</span><br><span class="line">/bin/sh: cc: 未找到命令</span><br><span class="line">make[1]: *** [adlist.o] 错误 127</span><br><span class="line">make[1]: 离开目录&quot;/opt/software/redis-6.2.6/src&quot;</span><br><span class="line">make: *** [all] 错误 2</span><br></pre></td></tr></table></figure><p><strong>解决办法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-6.2.6]# yum install gcc c++</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirror.lzu.edu.cn</span><br><span class="line"> * extras: mirror.lzu.edu.cn</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">没有可用软件包 c++。</span><br><span class="line">正在解决依赖关系</span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在检查事务</span></span><br><span class="line"><span class="meta prompt_">---&gt; </span><span class="language-bash">软件包 gcc.x86_64.0.4.8.5-44.el7 将被 安装</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在处理依赖关系 cpp = 4.8.5-44.el7，它被软件包 gcc-4.8.5-44.el7.x86_64 需要</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在处理依赖关系 glibc-devel &gt;= 2.2.90-12，它被软件包 gcc-4.8.5-44.el7.x86_64 需要</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在处理依赖关系 libmpfr.so.4()(64bit)，它被软件包 gcc-4.8.5-44.el7.x86_64 需要</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在处理依赖关系 libmpc.so.3()(64bit)，它被软件包 gcc-4.8.5-44.el7.x86_64 需要</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在检查事务</span></span><br><span class="line"><span class="meta prompt_">---&gt; </span><span class="language-bash">软件包 cpp.x86_64.0.4.8.5-44.el7 将被 安装</span></span><br><span class="line"><span class="meta prompt_">---&gt; </span><span class="language-bash">软件包 glibc-devel.x86_64.0.2.17-325.el7_9 将被 安装</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在处理依赖关系 glibc-headers = 2.17-325.el7_9，它被软件包 glibc-devel-2.17-325.el7_9.x86_64 需要</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在处理依赖关系 glibc-headers，它被软件包 glibc-devel-2.17-325.el7_9.x86_64 需要</span></span><br><span class="line"><span class="meta prompt_">---&gt; </span><span class="language-bash">软件包 libmpc.x86_64.0.1.0.1-3.el7 将被 安装</span></span><br><span class="line"><span class="meta prompt_">---&gt; </span><span class="language-bash">软件包 mpfr.x86_64.0.3.1.1-4.el7 将被 安装</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在检查事务</span></span><br><span class="line"><span class="meta prompt_">---&gt; </span><span class="language-bash">软件包 glibc-headers.x86_64.0.2.17-325.el7_9 将被 安装</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在处理依赖关系 kernel-headers &gt;= 2.2.1，它被软件包 glibc-headers-2.17-325.el7_9.x86_64 需要</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在处理依赖关系 kernel-headers，它被软件包 glibc-headers-2.17-325.el7_9.x86_64 需要</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在检查事务</span></span><br><span class="line"><span class="meta prompt_">---&gt; </span><span class="language-bash">软件包 kernel-headers.x86_64.0.3.10.0-1160.62.1.el7 将被 安装</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">解决依赖关系完成</span></span><br><span class="line"></span><br><span class="line">依赖关系解决</span><br><span class="line"></span><br><span class="line">=======================================================================================================================</span><br><span class="line"> Package                       架构                  版本                                 源                      大小</span><br><span class="line">=======================================================================================================================</span><br><span class="line">正在安装:</span><br><span class="line"> gcc                           x86_64                4.8.5-44.el7                         base                    16 M</span><br><span class="line">为依赖而安装:</span><br><span class="line"> cpp                           x86_64                4.8.5-44.el7                         base                   5.9 M</span><br><span class="line"> glibc-devel                   x86_64                2.17-325.el7_9                       updates                1.1 M</span><br><span class="line"> glibc-headers                 x86_64                2.17-325.el7_9                       updates                691 k</span><br><span class="line"> kernel-headers                x86_64                3.10.0-1160.62.1.el7                 updates                9.1 M</span><br><span class="line"> libmpc                        x86_64                1.0.1-3.el7                          base                    51 k</span><br><span class="line"> mpfr                          x86_64                3.1.1-4.el7                          base                   203 k</span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line">=======================================================================================================================</span><br><span class="line">安装  1 软件包 (+6 依赖软件包)</span><br><span class="line"></span><br><span class="line">总下载量：33 M</span><br><span class="line">安装大小：60 M</span><br><span class="line">Is this ok [y/d/N]: r</span><br><span class="line">Is this ok [y/d/N]: y</span><br><span class="line">Downloading packages:</span><br><span class="line">(1/7): glibc-headers-2.17-325.el7_9.x86_64.rpm                                                  | 691 kB  00:00:00     </span><br><span class="line">(2/7): glibc-devel-2.17-325.el7_9.x86_64.rpm                                                    | 1.1 MB  00:00:00     </span><br><span class="line">(3/7): cpp-4.8.5-44.el7.x86_64.rpm                                                              | 5.9 MB  00:00:01     </span><br><span class="line">(4/7): libmpc-1.0.1-3.el7.x86_64.rpm                                                            |  51 kB  00:00:00     </span><br><span class="line">(5/7): mpfr-3.1.1-4.el7.x86_64.rpm                                                              | 203 kB  00:00:00     </span><br><span class="line">(6/7): kernel-headers-3.10.0-1160.62.1.el7.x86_64.rpm                                           | 9.1 MB  00:00:01     </span><br><span class="line">(7/7): gcc-4.8.5-44.el7.x86_64.rpm                                                              |  16 MB  00:00:02     </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------</span><br><span class="line">总计                                                                                    11 MB/s |  33 MB  00:00:02     </span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  正在安装    : mpfr-3.1.1-4.el7.x86_64                                                                            1/7 </span><br><span class="line">  正在安装    : libmpc-1.0.1-3.el7.x86_64                                                                          2/7 </span><br><span class="line">  正在安装    : cpp-4.8.5-44.el7.x86_64                                                                            3/7 </span><br><span class="line">  正在安装    : kernel-headers-3.10.0-1160.62.1.el7.x86_64                                                         4/7 </span><br><span class="line">  正在安装    : glibc-headers-2.17-325.el7_9.x86_64                                                                5/7 </span><br><span class="line">  正在安装    : glibc-devel-2.17-325.el7_9.x86_64                                                                  6/7 </span><br><span class="line">  正在安装    : gcc-4.8.5-44.el7.x86_64                                                                            7/7 </span><br><span class="line">  验证中      : kernel-headers-3.10.0-1160.62.1.el7.x86_64                                                         1/7 </span><br><span class="line">  验证中      : mpfr-3.1.1-4.el7.x86_64                                                                            2/7 </span><br><span class="line">  验证中      : glibc-devel-2.17-325.el7_9.x86_64                                                                  3/7 </span><br><span class="line">  验证中      : gcc-4.8.5-44.el7.x86_64                                                                            4/7 </span><br><span class="line">  验证中      : glibc-headers-2.17-325.el7_9.x86_64                                                                5/7 </span><br><span class="line">  验证中      : libmpc-1.0.1-3.el7.x86_64                                                                          6/7 </span><br><span class="line">  验证中      : cpp-4.8.5-44.el7.x86_64                                                                            7/7 </span><br><span class="line"></span><br><span class="line">已安装:</span><br><span class="line">  gcc.x86_64 0:4.8.5-44.el7                                                                                            </span><br><span class="line"></span><br><span class="line">作为依赖被安装:</span><br><span class="line">  cpp.x86_64 0:4.8.5-44.el7                              glibc-devel.x86_64 0:2.17-325.el7_9                          </span><br><span class="line">  glibc-headers.x86_64 0:2.17-325.el7_9                  kernel-headers.x86_64 0:3.10.0-1160.62.1.el7                 </span><br><span class="line">  libmpc.x86_64 0:1.0.1-3.el7                            mpfr.x86_64 0:3.1.1-4.el7                                    </span><br><span class="line"></span><br><span class="line">完毕！</span><br><span class="line">[root@localhost redis-6.2.6]# </span><br></pre></td></tr></table></figure></li><li><p><strong>安装好gcc 和c++ 后，必须清空后再编译，否则会报如下错误</strong></p><p><strong>问题：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-6.2.6]# make</span><br><span class="line">cd src &amp;&amp; make all</span><br><span class="line">make[1]: 进入目录&quot;/opt/software/redis-6.2.6/src&quot;</span><br><span class="line">    CC Makefile.dep</span><br><span class="line">make[1]: 离开目录&quot;/opt/software/redis-6.2.6/src&quot;</span><br><span class="line">make[1]: 进入目录&quot;/opt/software/redis-6.2.6/src&quot;</span><br><span class="line">    CC adlist.o</span><br><span class="line">In file included from adlist.c:34:0:</span><br><span class="line">zmalloc.h:50:31: 致命错误：jemalloc/jemalloc.h：没有那个文件或目录</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">include &lt;jemalloc/jemalloc.h&gt;</span></span><br><span class="line">                               ^</span><br><span class="line">编译中断。</span><br><span class="line">make[1]: *** [adlist.o] 错误 1</span><br><span class="line">make[1]: 离开目录&quot;/opt/software/redis-6.2.6/src&quot;</span><br><span class="line">make: *** [all] 错误 2</span><br><span class="line">[root@localhost redis-6.2.6]# </span><br></pre></td></tr></table></figure><p><strong>解决办法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-6.2.6]# make distclean  # 清空上次编译失败残留文件</span><br><span class="line">[root@localhost redis-6.2.6]# make &amp;&amp; make install  # 执行编译及安装</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>执行完 make 命令后，redis-6.2.6 目录下会出现编译后的 redis 服务程序 <code>redis-server</code>，还有用于测试的客户端程序 <code>redis-cli</code>，两个程序位于安装目录 src 目录下。</p><h2 id="1-2-启动Redis服务"><a href="#1-2-启动Redis服务" class="headerlink" title="1.2 启动Redis服务"></a>1.2 启动Redis服务</h2><p>下面启动 redis 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]# cd src/</span><br><span class="line">[root@localhost src]# ./redis-server  ../redis.conf </span><br><span class="line">7061:C 16 May 2022 12:09:22.469 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">7061:C 16 May 2022 12:09:22.469 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=7061, just started</span><br><span class="line">7061:C 16 May 2022 12:09:22.469 # Configuration loaded</span><br><span class="line">7061:M 16 May 2022 12:09:22.470 * Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br><span class="line">7061:M 16 May 2022 12:09:22.470 * monotonic clock: POSIX clock_gettime</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ &#x27;&#x27;-._                                             </span><br><span class="line">      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 6.2.6 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._                                  </span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-&#x27;    |     PID: 7061</span><br><span class="line">  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |           https://redis.io       </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |                                  </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line">      `-._    `-.__.-&#x27;    _.-&#x27;                                       </span><br><span class="line">          `-._        _.-&#x27;                                           </span><br><span class="line">              `-.__.-&#x27;                                               </span><br><span class="line"></span><br><span class="line">7061:M 16 May 2022 12:09:22.472 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">7061:M 16 May 2022 12:09:22.472 # Server initialized</span><br><span class="line">7061:M 16 May 2022 12:09:22.472 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span><br><span class="line">7061:M 16 May 2022 12:09:22.472 * Ready to accept connections</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>redis.conf</code> 是一个默认的配置文件。我们可以根据需要使用自己的配置文件。</p><p>启动 redis 服务进程后，就可以使用<strong>测试客户端程序</strong>( <code>redis-cli</code> )和 redis 服务交互了。 比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd /opt/software/redis-6.2.6/src</span><br><span class="line">[root@localhost src]# ./redis-cli -a yanpenggong</span><br><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h2 id="1-3-Redis-配置后台服务和访问密码"><a href="#1-3-Redis-配置后台服务和访问密码" class="headerlink" title="1.3 Redis 配置后台服务和访问密码"></a>1.3 Redis 配置后台服务和访问密码</h2><p><strong>配置 Redis 为后台服务</strong> 将配置文件中的 daemonize no 改成 daemonize yes，配置 redis 为后台启动。</p><p><strong>Redis 设置访问密码</strong> 在配置文件中找到 requirepass，去掉前面的注释，并修改后面的密码。</p><p>常用配置文件例子 redis.conf 如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认端口6379</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">绑定ip，如果是内网可以直接绑定 127.0.0.1, 或者忽略, 0.0.0.0是外网</span></span><br><span class="line">bind 0.0.0.0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">守护进程启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">超时</span></span><br><span class="line">timeout 300</span><br><span class="line">loglevel notice</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">分区</span></span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">存储文件</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">密码 abcd123</span></span><br><span class="line">requirepass yanpenggong</span><br></pre></td></tr></table></figure><p>修改<code>protected-mode</code> 参数，将其改为 <code>protected-mode no</code>。这样就可以解除redis的保护机制，可以被其他主机连接。</p><p>同时还要把对应的端口打开：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]# firewall-cmd --query-port=6379/tcp  # 检测端口是否打开</span><br><span class="line">no</span><br><span class="line">[root@localhost src]# firewall-cmd --add-port=6379/tcp --permanent  # 返回success说明开启成功，加permanent代表永久有效 不会因为重启防火墙失效</span><br><span class="line">success</span><br><span class="line">[root@localhost src]# firewall-cmd --reload  # 配置立即生效</span><br><span class="line">success</span><br><span class="line">[root@localhost src]# firewall-cmd --query-port=6379/tcp  # 查看防火墙开放的端口</span><br><span class="line">yes</span><br></pre></td></tr></table></figure><blockquote><ol><li><p><strong>查看防火墙所有开放的端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=6379/tcp --permanent</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭防火墙</strong></p><p>如果要开放的端口太多，嫌麻烦，可以关闭防火墙，安全性自行评估</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure></li><li><p><strong>查看防火墙状态</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]# firewall-cmd --state</span><br><span class="line">running</span><br></pre></td></tr></table></figure></li><li><p><strong>查看监听的端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]# netstat -lnpt</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      7293/./redis-server </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1062/sshd           </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1237/master         </span><br><span class="line">tcp6       0      0 ::1:6379                :::*                    LISTEN      7293/./redis-server </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1062/sshd           </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1237/master  </span><br></pre></td></tr></table></figure><p><strong>linux命令报错信息：-bash: netstat: 未找到命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]# netstat -lnpt</span><br><span class="line">-bash: netstat: 未找到命令</span><br><span class="line">[root@localhost src]# yum -y install net-tools</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirror.lzu.edu.cn</span><br><span class="line"> * extras: mirror.lzu.edu.cn</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">正在解决依赖关系</span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在检查事务</span></span><br><span class="line"><span class="meta prompt_">---&gt; </span><span class="language-bash">软件包 net-tools.x86_64.0.2.0-0.25.20131004git.el7 将被 安装</span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">解决依赖关系完成</span></span><br><span class="line"></span><br><span class="line">依赖关系解决</span><br><span class="line"></span><br><span class="line">=======================================================================================================================</span><br><span class="line"> Package                   架构                   版本                                      源                    大小</span><br><span class="line">=======================================================================================================================</span><br><span class="line">正在安装:</span><br><span class="line"> net-tools                 x86_64                 2.0-0.25.20131004git.el7                  base                 306 k</span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line">=======================================================================================================================</span><br><span class="line">安装  1 软件包</span><br><span class="line"></span><br><span class="line">总下载量：306 k</span><br><span class="line">安装大小：917 k</span><br><span class="line">Downloading packages:</span><br><span class="line">net-tools-2.0-0.25.20131004git.el7.x86_64.rpm                                                   | 306 kB  00:00:00     </span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  正在安装    : net-tools-2.0-0.25.20131004git.el7.x86_64                                                          1/1 </span><br><span class="line">  验证中      : net-tools-2.0-0.25.20131004git.el7.x86_64                                                          1/1 </span><br><span class="line"></span><br><span class="line">已安装:</span><br><span class="line">  net-tools.x86_64 0:2.0-0.25.20131004git.el7                                                                          </span><br><span class="line"></span><br><span class="line">完毕！</span><br><span class="line">[root@localhost src]# </span><br></pre></td></tr></table></figure></li><li><p><strong>检查端口被哪个进程占用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]# netstat -lnpt |grep 6379</span><br><span class="line">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      7293/./redis-server </span><br><span class="line">tcp6       0      0 ::1:6379                :::*                    LISTEN      7293/./redis-server </span><br><span class="line">[root@localhost src]# </span><br></pre></td></tr></table></figure></li><li><p><strong>查看进程的详细信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]# ps -ef | grep redis</span><br><span class="line">root       7293      1  0 14:23 ?        00:00:07 ./redis-server 127.0.0.1:6379</span><br><span class="line">root       7379   1390  0 14:41 pts/0    00:00:00 grep --color=auto redis</span><br><span class="line">[root@localhost src]# ps 7293</span><br><span class="line">   PID TTY      STAT   TIME COMMAND</span><br><span class="line">  7293 ?        Ssl    0:07 ./redis-server 127.0.0.1:6379</span><br><span class="line">[root@localhost src]# </span><br></pre></td></tr></table></figure></li><li><p><strong>终止进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 7293</span><br></pre></td></tr></table></figure></li></ol></blockquote><h1 id="2-Redis-配置"><a href="#2-Redis-配置" class="headerlink" title="2. Redis 配置"></a>2. Redis 配置</h1><h2 id="2-1-获取Redis-配置"><a href="#2-1-获取Redis-配置" class="headerlink" title="2.1 获取Redis 配置"></a>2.1 获取Redis 配置</h2><p>在 Redis 中，Redis 的根目录中有一个配置文件(redis.conf)。您可以通过 Redis <code>CONFIG</code> 命令获取和设置所有 Redis 配置。</p><ol><li><p><strong>语法</strong></p><p>以下是 Redis CONFIG 命令的基本语法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET CONFIG_SETTING_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>实例1: <code>CONFIG GET loglevel</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET &quot;loglevel&quot;</span><br><span class="line">1) &quot;loglevel&quot;</span><br><span class="line">2) &quot;notice&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li><li><p><strong>实例2：<code>CONFIG GET *</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET *</span><br><span class="line">  1) &quot;rdbchecksum&quot;</span><br><span class="line">  2) &quot;yes&quot;</span><br><span class="line">  3) &quot;daemonize&quot;</span><br><span class="line">  4) &quot;yes&quot;</span><br><span class="line">  5) &quot;io-threads-do-reads&quot;</span><br><span class="line">  6) &quot;no&quot;</span><br><span class="line">  7) &quot;lua-replicate-commands&quot;</span><br><span class="line">  8) &quot;yes&quot;</span><br><span class="line">  9) &quot;always-show-logo&quot;</span><br><span class="line"> 10) &quot;no&quot;</span><br><span class="line"> 11) &quot;protected-mode&quot;</span><br><span class="line"> 12) &quot;no&quot;</span><br><span class="line"> 13) &quot;rdbcompression&quot;</span><br><span class="line"> 14) &quot;yes&quot;</span><br><span class="line"> 15) &quot;rdb-del-sync-files&quot;</span><br><span class="line"> 16) &quot;no&quot;</span><br><span class="line"> 17) &quot;activerehashing&quot;</span><br><span class="line"> 18) &quot;yes&quot;</span><br><span class="line"> 19) &quot;stop-writes-on-bgsave-error&quot;</span><br><span class="line"> 20) &quot;yes&quot;</span><br><span class="line"> 21) &quot;set-proc-title&quot;</span><br><span class="line"> 22) &quot;yes&quot;</span><br><span class="line"> 23) &quot;dynamic-hz&quot;</span><br><span class="line"> 24) &quot;yes&quot;</span><br><span class="line"> 25) &quot;lazyfree-lazy-eviction&quot;</span><br><span class="line"> 26) &quot;no&quot;</span><br><span class="line"> 27) &quot;lazyfree-lazy-expire&quot;</span><br><span class="line"> 28) &quot;no&quot;</span><br><span class="line"> 29) &quot;lazyfree-lazy-server-del&quot;</span><br><span class="line"> 30) &quot;no&quot;</span><br><span class="line"> 31) &quot;lazyfree-lazy-user-del&quot;</span><br><span class="line"> 32) &quot;no&quot;</span><br><span class="line"> 33) &quot;lazyfree-lazy-user-flush&quot;</span><br><span class="line"> 34) &quot;no&quot;</span><br><span class="line"> 35) &quot;repl-disable-tcp-nodelay&quot;</span><br><span class="line"> 36) &quot;no&quot;</span><br><span class="line"> 37) &quot;repl-diskless-sync&quot;</span><br><span class="line"> 38) &quot;no&quot;</span><br><span class="line"> 39) &quot;gopher-enabled&quot;</span><br><span class="line"> 40) &quot;no&quot;</span><br><span class="line"> 41) &quot;aof-rewrite-incremental-fsync&quot;</span><br><span class="line"> 42) &quot;yes&quot;</span><br><span class="line"> 43) &quot;no-appendfsync-on-rewrite&quot;</span><br><span class="line"> 44) &quot;no&quot;</span><br><span class="line"> 45) &quot;cluster-require-full-coverage&quot;</span><br><span class="line"> 46) &quot;yes&quot;</span><br><span class="line"> 47) &quot;rdb-save-incremental-fsync&quot;</span><br><span class="line"> 48) &quot;yes&quot;</span><br><span class="line"> 49) &quot;aof-load-truncated&quot;</span><br><span class="line"> 50) &quot;yes&quot;</span><br><span class="line"> 51) &quot;aof-use-rdb-preamble&quot;</span><br><span class="line"> 52) &quot;yes&quot;</span><br><span class="line"> 53) &quot;cluster-replica-no-failover&quot;</span><br><span class="line"> 54) &quot;no&quot;</span><br><span class="line"> 55) &quot;cluster-slave-no-failover&quot;</span><br><span class="line"> 56) &quot;no&quot;</span><br><span class="line"> 57) &quot;replica-lazy-flush&quot;</span><br><span class="line"> 58) &quot;no&quot;</span><br><span class="line"> 59) &quot;slave-lazy-flush&quot;</span><br><span class="line"> 60) &quot;no&quot;</span><br><span class="line"> 61) &quot;replica-serve-stale-data&quot;</span><br><span class="line"> 62) &quot;yes&quot;</span><br><span class="line"> 63) &quot;slave-serve-stale-data&quot;</span><br><span class="line"> 64) &quot;yes&quot;</span><br><span class="line"> 65) &quot;replica-read-only&quot;</span><br><span class="line"> 66) &quot;yes&quot;</span><br><span class="line"> 67) &quot;slave-read-only&quot;</span><br><span class="line"> 68) &quot;yes&quot;</span><br><span class="line"> 69) &quot;replica-ignore-maxmemory&quot;</span><br><span class="line"> 70) &quot;yes&quot;</span><br><span class="line"> 71) &quot;slave-ignore-maxmemory&quot;</span><br><span class="line"> 72) &quot;yes&quot;</span><br><span class="line"> 73) &quot;jemalloc-bg-thread&quot;</span><br><span class="line"> 74) &quot;yes&quot;</span><br><span class="line"> 75) &quot;activedefrag&quot;</span><br><span class="line"> 76) &quot;no&quot;</span><br><span class="line"> 77) &quot;syslog-enabled&quot;</span><br><span class="line"> 78) &quot;no&quot;</span><br><span class="line"> 79) &quot;cluster-enabled&quot;</span><br><span class="line"> 80) &quot;no&quot;</span><br><span class="line"> 81) &quot;appendonly&quot;</span><br><span class="line"> 82) &quot;no&quot;</span><br><span class="line"> 83) &quot;cluster-allow-reads-when-down&quot;</span><br><span class="line"> 84) &quot;no&quot;</span><br><span class="line"> 85) &quot;crash-log-enabled&quot;</span><br><span class="line"> 86) &quot;yes&quot;</span><br><span class="line"> 87) &quot;crash-memcheck-enabled&quot;</span><br><span class="line"> 88) &quot;yes&quot;</span><br><span class="line"> 89) &quot;use-exit-on-panic&quot;</span><br><span class="line"> 90) &quot;no&quot;</span><br><span class="line"> 91) &quot;disable-thp&quot;</span><br><span class="line"> 92) &quot;yes&quot;</span><br><span class="line"> 93) &quot;cluster-allow-replica-migration&quot;</span><br><span class="line"> 94) &quot;yes&quot;</span><br><span class="line"> 95) &quot;replica-announced&quot;</span><br><span class="line"> 96) &quot;yes&quot;</span><br><span class="line"> 97) &quot;aclfile&quot;</span><br><span class="line"> 98) &quot;&quot;</span><br><span class="line"> 99) &quot;unixsocket&quot;</span><br><span class="line">100) &quot;&quot;</span><br><span class="line">101) &quot;pidfile&quot;</span><br><span class="line">102) &quot;/var/run/redis_6379.pid&quot;</span><br><span class="line">103) &quot;replica-announce-ip&quot;</span><br><span class="line">104) &quot;&quot;</span><br><span class="line">105) &quot;slave-announce-ip&quot;</span><br><span class="line">106) &quot;&quot;</span><br><span class="line">107) &quot;masteruser&quot;</span><br><span class="line">108) &quot;&quot;</span><br><span class="line">109) &quot;cluster-announce-ip&quot;</span><br><span class="line">110) &quot;&quot;</span><br><span class="line">111) &quot;syslog-ident&quot;</span><br><span class="line">112) &quot;redis&quot;</span><br><span class="line">113) &quot;dbfilename&quot;</span><br><span class="line">114) &quot;dump.rdb&quot;</span><br><span class="line">115) &quot;appendfilename&quot;</span><br><span class="line">116) &quot;appendonly.aof&quot;</span><br><span class="line">117) &quot;server_cpulist&quot;</span><br><span class="line">118) &quot;&quot;</span><br><span class="line">119) &quot;bio_cpulist&quot;</span><br><span class="line">120) &quot;&quot;</span><br><span class="line">121) &quot;aof_rewrite_cpulist&quot;</span><br><span class="line">122) &quot;&quot;</span><br><span class="line">123) &quot;bgsave_cpulist&quot;</span><br><span class="line">124) &quot;&quot;</span><br><span class="line">125) &quot;ignore-warnings&quot;</span><br><span class="line">126) &quot;&quot;</span><br><span class="line">127) &quot;proc-title-template&quot;</span><br><span class="line">128) &quot;&#123;title&#125; &#123;listen-addr&#125; &#123;server-mode&#125;&quot;</span><br><span class="line">129) &quot;masterauth&quot;</span><br><span class="line">130) &quot;&quot;</span><br><span class="line">131) &quot;requirepass&quot;</span><br><span class="line">132) &quot;yanpenggong&quot;</span><br><span class="line">133) &quot;supervised&quot;</span><br><span class="line">134) &quot;no&quot;</span><br><span class="line">135) &quot;syslog-facility&quot;</span><br><span class="line">136) &quot;local0&quot;</span><br><span class="line">137) &quot;repl-diskless-load&quot;</span><br><span class="line">138) &quot;disabled&quot;</span><br><span class="line">139) &quot;loglevel&quot;</span><br><span class="line">140) &quot;notice&quot;</span><br><span class="line">141) &quot;maxmemory-policy&quot;</span><br><span class="line">142) &quot;noeviction&quot;</span><br><span class="line">143) &quot;appendfsync&quot;</span><br><span class="line">144) &quot;everysec&quot;</span><br><span class="line">145) &quot;oom-score-adj&quot;</span><br><span class="line">146) &quot;no&quot;</span><br><span class="line">147) &quot;acl-pubsub-default&quot;</span><br><span class="line">148) &quot;allchannels&quot;</span><br><span class="line">149) &quot;sanitize-dump-payload&quot;</span><br><span class="line">150) &quot;no&quot;</span><br><span class="line">151) &quot;databases&quot;</span><br><span class="line">152) &quot;16&quot;</span><br><span class="line">153) &quot;port&quot;</span><br><span class="line">154) &quot;6379&quot;</span><br><span class="line">155) &quot;io-threads&quot;</span><br><span class="line">156) &quot;1&quot;</span><br><span class="line">157) &quot;auto-aof-rewrite-percentage&quot;</span><br><span class="line">158) &quot;100&quot;</span><br><span class="line">159) &quot;cluster-replica-validity-factor&quot;</span><br><span class="line">160) &quot;10&quot;</span><br><span class="line">161) &quot;cluster-slave-validity-factor&quot;</span><br><span class="line">162) &quot;10&quot;</span><br><span class="line">163) &quot;list-max-ziplist-size&quot;</span><br><span class="line">164) &quot;-2&quot;</span><br><span class="line">165) &quot;tcp-keepalive&quot;</span><br><span class="line">166) &quot;300&quot;</span><br><span class="line">167) &quot;cluster-migration-barrier&quot;</span><br><span class="line">168) &quot;1&quot;</span><br><span class="line">169) &quot;active-defrag-cycle-min&quot;</span><br><span class="line">170) &quot;1&quot;</span><br><span class="line">171) &quot;active-defrag-cycle-max&quot;</span><br><span class="line">172) &quot;25&quot;</span><br><span class="line">173) &quot;active-defrag-threshold-lower&quot;</span><br><span class="line">174) &quot;10&quot;</span><br><span class="line">175) &quot;active-defrag-threshold-upper&quot;</span><br><span class="line">176) &quot;100&quot;</span><br><span class="line">177) &quot;lfu-log-factor&quot;</span><br><span class="line">178) &quot;10&quot;</span><br><span class="line">179) &quot;lfu-decay-time&quot;</span><br><span class="line">180) &quot;1&quot;</span><br><span class="line">181) &quot;replica-priority&quot;</span><br><span class="line">182) &quot;100&quot;</span><br><span class="line">183) &quot;slave-priority&quot;</span><br><span class="line">184) &quot;100&quot;</span><br><span class="line">185) &quot;repl-diskless-sync-delay&quot;</span><br><span class="line">186) &quot;5&quot;</span><br><span class="line">187) &quot;maxmemory-samples&quot;</span><br><span class="line">188) &quot;5&quot;</span><br><span class="line">189) &quot;maxmemory-eviction-tenacity&quot;</span><br><span class="line">190) &quot;10&quot;</span><br><span class="line">191) &quot;timeout&quot;</span><br><span class="line">192) &quot;300&quot;</span><br><span class="line">193) &quot;replica-announce-port&quot;</span><br><span class="line">194) &quot;0&quot;</span><br><span class="line">195) &quot;slave-announce-port&quot;</span><br><span class="line">196) &quot;0&quot;</span><br><span class="line">197) &quot;tcp-backlog&quot;</span><br><span class="line">198) &quot;511&quot;</span><br><span class="line">199) &quot;cluster-announce-bus-port&quot;</span><br><span class="line">200) &quot;0&quot;</span><br><span class="line">201) &quot;cluster-announce-port&quot;</span><br><span class="line">202) &quot;0&quot;</span><br><span class="line">203) &quot;cluster-announce-tls-port&quot;</span><br><span class="line">204) &quot;0&quot;</span><br><span class="line">205) &quot;repl-timeout&quot;</span><br><span class="line">206) &quot;60&quot;</span><br><span class="line">207) &quot;repl-ping-replica-period&quot;</span><br><span class="line">208) &quot;10&quot;</span><br><span class="line">209) &quot;repl-ping-slave-period&quot;</span><br><span class="line">210) &quot;10&quot;</span><br><span class="line">211) &quot;list-compress-depth&quot;</span><br><span class="line">212) &quot;0&quot;</span><br><span class="line">213) &quot;rdb-key-save-delay&quot;</span><br><span class="line">214) &quot;0&quot;</span><br><span class="line">215) &quot;key-load-delay&quot;</span><br><span class="line">216) &quot;0&quot;</span><br><span class="line">217) &quot;active-expire-effort&quot;</span><br><span class="line">218) &quot;1&quot;</span><br><span class="line">219) &quot;hz&quot;</span><br><span class="line">220) &quot;10&quot;</span><br><span class="line">221) &quot;min-replicas-to-write&quot;</span><br><span class="line">222) &quot;0&quot;</span><br><span class="line">223) &quot;min-slaves-to-write&quot;</span><br><span class="line">224) &quot;0&quot;</span><br><span class="line">225) &quot;min-replicas-max-lag&quot;</span><br><span class="line">226) &quot;10&quot;</span><br><span class="line">227) &quot;min-slaves-max-lag&quot;</span><br><span class="line">228) &quot;10&quot;</span><br><span class="line">229) &quot;maxclients&quot;</span><br><span class="line">230) &quot;10000&quot;</span><br><span class="line">231) &quot;active-defrag-max-scan-fields&quot;</span><br><span class="line">232) &quot;1000&quot;</span><br><span class="line">233) &quot;slowlog-max-len&quot;</span><br><span class="line">234) &quot;128&quot;</span><br><span class="line">235) &quot;acllog-max-len&quot;</span><br><span class="line">236) &quot;128&quot;</span><br><span class="line">237) &quot;lua-time-limit&quot;</span><br><span class="line">238) &quot;5000&quot;</span><br><span class="line">239) &quot;cluster-node-timeout&quot;</span><br><span class="line">240) &quot;15000&quot;</span><br><span class="line">241) &quot;slowlog-log-slower-than&quot;</span><br><span class="line">242) &quot;10000&quot;</span><br><span class="line">243) &quot;latency-monitor-threshold&quot;</span><br><span class="line">244) &quot;0&quot;</span><br><span class="line">245) &quot;proto-max-bulk-len&quot;</span><br><span class="line">246) &quot;536870912&quot;</span><br><span class="line">247) &quot;stream-node-max-entries&quot;</span><br><span class="line">248) &quot;100&quot;</span><br><span class="line">249) &quot;repl-backlog-size&quot;</span><br><span class="line">250) &quot;1048576&quot;</span><br><span class="line">251) &quot;maxmemory&quot;</span><br><span class="line">252) &quot;0&quot;</span><br><span class="line">253) &quot;hash-max-ziplist-entries&quot;</span><br><span class="line">254) &quot;512&quot;</span><br><span class="line">255) &quot;set-max-intset-entries&quot;</span><br><span class="line">256) &quot;512&quot;</span><br><span class="line">257) &quot;zset-max-ziplist-entries&quot;</span><br><span class="line">258) &quot;128&quot;</span><br><span class="line">259) &quot;active-defrag-ignore-bytes&quot;</span><br><span class="line">260) &quot;104857600&quot;</span><br><span class="line">261) &quot;hash-max-ziplist-value&quot;</span><br><span class="line">262) &quot;64&quot;</span><br><span class="line">263) &quot;stream-node-max-bytes&quot;</span><br><span class="line">264) &quot;4096&quot;</span><br><span class="line">265) &quot;zset-max-ziplist-value&quot;</span><br><span class="line">266) &quot;64&quot;</span><br><span class="line">267) &quot;hll-sparse-max-bytes&quot;</span><br><span class="line">268) &quot;3000&quot;</span><br><span class="line">269) &quot;tracking-table-max-keys&quot;</span><br><span class="line">270) &quot;1000000&quot;</span><br><span class="line">271) &quot;client-query-buffer-limit&quot;</span><br><span class="line">272) &quot;1073741824&quot;</span><br><span class="line">273) &quot;repl-backlog-ttl&quot;</span><br><span class="line">274) &quot;3600&quot;</span><br><span class="line">275) &quot;auto-aof-rewrite-min-size&quot;</span><br><span class="line">276) &quot;67108864&quot;</span><br><span class="line">277) &quot;logfile&quot;</span><br><span class="line">278) &quot;&quot;</span><br><span class="line">279) &quot;watchdog-period&quot;</span><br><span class="line">280) &quot;0&quot;</span><br><span class="line">281) &quot;dir&quot;</span><br><span class="line">282) &quot;/opt/software/redis-6.2.6&quot;</span><br><span class="line">283) &quot;save&quot;</span><br><span class="line">284) &quot;900 1 300 10 60 10000&quot;</span><br><span class="line">285) &quot;client-output-buffer-limit&quot;</span><br><span class="line">286) &quot;normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60&quot;</span><br><span class="line">287) &quot;unixsocketperm&quot;</span><br><span class="line">288) &quot;0&quot;</span><br><span class="line">289) &quot;slaveof&quot;</span><br><span class="line">290) &quot;&quot;</span><br><span class="line">291) &quot;notify-keyspace-events&quot;</span><br><span class="line">292) &quot;&quot;</span><br><span class="line">293) &quot;bind&quot;</span><br><span class="line">294) &quot;0.0.0.0&quot;</span><br><span class="line">295) &quot;oom-score-adj-values&quot;</span><br><span class="line">296) &quot;0 200 800&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ol><h2 id="2-2-编辑配置"><a href="#2-2-编辑配置" class="headerlink" title="2.2 编辑配置"></a>2.2 编辑配置</h2><p>要更新配置，可以直接编辑 redis.conf 文件，也可以通过 CONFIG set 命令更新配置。</p><ol><li><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</span><br></pre></td></tr></table></figure></li><li><p><strong>实例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class="line">1) &quot;loglevel&quot;</span><br><span class="line">2) &quot;notice&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li><li><p><strong>常用配置参数说明</strong></p><p>redis.conf 配置项说明如下：</p><p>| 序号 | 配置项                                                       | 说明                                                         |<br>| —— | —————————————————————————————— | —————————————————————————————— |<br>| 1    | <code>daemonize no</code>                                               | Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程(Windows 不支持守护线程的配置为 no ) |<br>| 2    | <code>pidfile /var/run/redis.pid</code>                                 | 当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定 |<br>| 3    | <code>port 6379</code>                                                  | 指定 Redis 监听端口，默认端口为 6379，作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字 |<br>| 4    | <code>bind 127.0.0.1</code>                                             | 绑定的主机地址                                               |<br>| 5    | <code>timeout 300</code>                                                | 当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能  |<br>| 6    | <code>loglevel notice</code>                                            | 指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice |<br>| 7    | <code>logfile stdout</code>                                             | 日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null |<br>| 8    | <code>databases 16</code>                                               | 设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id |<br>| 9    | <code>save &lt;seconds&gt; &lt;changes&gt;</code><br>Redis 默认配置文件中提供了三个条件：<br>- <code>save 900 1</code>: 900 秒(15 分钟)内有 1 个更改<br>- <code>save 300 10</code>: 300 秒(5 分钟)内有 10 个更改<br>- <code>save 60 10000</code>: 60 秒内有 10000 个更改 | 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合 |<br>| 10   | <code>rdbcompression yes</code>                                         | 指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大 |<br>| 11   | <code>dbfilename dump.rdb</code>                                        | 指定本地数据库文件名，默认值为 dump.rdb                      |<br>| 12   | <code>dir ./</code>                                                     | 指定本地数据库存放目录                                       |<br>| 13   | <code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code>                            | 设置当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步 |<br>| 14   | <code>masterauth &lt;master-password&gt;</code>                               | 当 master 服务设置了密码保护时，slave 服务连接 master 的密码 |<br>| 15   | <code>requirepass foobared</code>                                       | 设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 <code>AUTH &lt;password&gt;</code> 命令提供密码，默认关闭 |<br>| 16   | <code>maxclients 128</code>                                             | 设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息 |<br>| 17   | <code>maxmemory &lt;bytes&gt;</code>                                          | 指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区 |<br>| 18   | <code>appendonly no</code>                                              | 指定是否在每次更新操作后进行日志记录，<br>Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。<br>因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no |<br>| 19   | <code>appendfilename appendonly.aof</code>                              | 指定更新日志文件名，默认为 appendonly.aof                    |<br>| 20   | <code>appendfsync everysec</code>                                       | 指定更新日志条件，共有 3 个可选值：<br>- <strong>no</strong>：表示等操作系统进行数据缓存同步到磁盘(快)<br>- <strong>always</strong>：表示每次更新操作后手动调用 fsync() 将数据写到磁盘(慢，安全)<br>- <strong>everysec</strong>：表示每秒同步一次(折中，默认值) |<br>| 21   | <code>vm-enabled no</code>                                              | 指定是否启用虚拟内存机制，默认值为 no，<br>简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中(在后面的内容会仔细分析 Redis 的 VM 机制) |<br>| 22   | <code>vm-swap-file /tmp/redis.swap</code>                               | 虚拟内存文件路径，默认值为 /tmp/redis.swap，不可多个 Redis 实例共享 |<br>| 23   | <code>vm-max-memory 0</code>                                            | 将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，<br>也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0 |<br>| 24   | <code>vm-page-size 32</code>                                            | Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，<br>vm-page-size 是要根据存储的 数据大小来设定的，<br>建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；<br>如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值 |<br>| 25   | <code>vm-pages 134217728</code>                                         | 设置 swap 文件中的 page 数量，由于页表(一种表示页面空闲或使用的 bitmap)是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。 |<br>| 26   | <code>vm-max-threads 4</code>                                           | 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4 |<br>| 27   | <code>glueoutputbuf yes</code>                                          | 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启 |<br>| 28   | <code>hash-max-zipmap-entries 64</code>  <br><code>hash-max-zipmap-value 512</code> | 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法 |<br>| 29   | <code>activerehashing yes</code>                                        | 指定是否激活重置哈希，默认为开启(后面在介绍 Redis 的哈希算法时具体介绍) |<br>| 30   | <code>include /path/to/local.conf</code>                                | 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件 |</p></li></ol><h1 id="3-Redis数据类型"><a href="#3-Redis数据类型" class="headerlink" title="3. Redis数据类型"></a>3. <a id="数据类型">Redis数据类型</a></h1><p>Redis支持五种数据类型：string(字符串)，hash(哈希)，list(列表)，set(集合)及zset(sorted set：有序集合)， 位图(Bitmaps)， 基数统计(HyperLogLogs)。</p><p><strong>各个数据类型应用场景：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">简介</th><th style="text-align:left">特性</th><th style="text-align:left">场景</th></tr></thead><tbody><tr><td style="text-align:left">String(字符串)</td><td style="text-align:left">二进制安全</td><td style="text-align:left">可以包含任何数据,比如jpg图片或者序列化的对象,一个键最大能存储512M</td><td style="text-align:left">—-</td></tr><tr><td style="text-align:left">Hash(字典)</td><td style="text-align:left">键值对集合,即编程语言中的Map类型</td><td style="text-align:left">适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td><td style="text-align:left">存储、读取、修改用户属性</td></tr><tr><td style="text-align:left">List(列表)</td><td style="text-align:left">链表(双向链表)</td><td style="text-align:left">增删快,提供了操作某一段元素的API</td><td style="text-align:left">1,最新消息排行等功能(比如朋友圈的时间线) 2,消息队列</td></tr><tr><td style="text-align:left">Set(集合)</td><td style="text-align:left">哈希表实现,元素不重复</td><td style="text-align:left">1、添加、删除,查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td><td style="text-align:left">1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td></tr><tr><td style="text-align:left">Sorted Set(有序集合)</td><td style="text-align:left">将Set中的元素增加一个权重参数score,元素按score有序排列</td><td style="text-align:left">数据插入集合时,已经进行天然排序</td><td style="text-align:left">1、排行榜 2、带权重的消息队列</td></tr></tbody></table></div><h2 id="3-1-string-字符串"><a href="#3-1-string-字符串" class="headerlink" title="3.1 string(字符串)"></a>3.1 string(字符串)</h2><p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p><p>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。</p><p>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p><p>可以在Redis中使用字符串做一些有趣的事情，例如，您可以：</p><ul><li>使用INCR系列中的命令将字符串用作原子计数器：<a href="#INCR">INCR</a>、<a href="#DECR">DECR</a>、<a href="#INCRBY">INCRBY</a>。</li><li>使用 <a href="#APPEND">APPEND</a> 命令附加到字符串。</li><li>使用字符串作为 &lt;a href=”#<a href="#GETRANGE">GETRANGE</a> 和 <a href="#SETRANGE">SETRANGE</a> 的随机访问向量。</li><li>在小空间中编码大量数据，或使用 <a href="#GETBIT">GETBIT</a> 和 <a href="#SETBIT">SETBIT</a> 创建Redis支持的Bloom过滤器。</li></ul><p>检查所有 <a href="#命令集合">可用的字符串命令</a> 以获取更多信息，或阅读==<em><a href="https://redis.com.cn/topics/data-types-intro">Redis数据类型的简介</a></em>==。</p><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET kungs &quot;yanpenggong&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get kungs</span><br><span class="line">&quot;yanpenggong&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>在以上实例中，使用了 Redis 的 <strong>SET</strong> 和 <strong>GET</strong> 命令。键为 <code>kungs</code>，对应的值为 <code>yanpenggong</code>。</p><p><strong>注意：</strong>一个键最大能存储 512MB。</p><h2 id="3-2-hash-哈希"><a href="#3-2-hash-哈希" class="headerlink" title="3.2 hash(哈希)"></a>3.2 hash(哈希)</h2><p>Redis hash 是一个键值(key=&gt;value)对集合。</p><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p><p><strong>实例：</strong></p><p><strong>DEL kungs</strong> 用于删除前面测试用过的 key，不然会报错：<strong><code>(error) WRONGTYPE Operation against a key holding the wrong kind of value</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET kungs &quot;yanpenggong&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET kungs</span><br><span class="line">&quot;yanpenggong&quot;</span><br><span class="line">127.0.0.1:6379&gt; HMSET kungs field1 &quot;Hello&quot; field2 &quot;World&quot;</span><br><span class="line">(error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br><span class="line">127.0.0.1:6379&gt; DEL kungs</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HMSET kungs field1 &quot;Hello&quot; field2 &quot;World&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HGET kungs field1</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; HGET kungs field2</span><br><span class="line">&quot;World&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>实例中我们使用了 Redis <strong>HMSET, HGET</strong> 命令，<strong>HMSET</strong> 设置了两个 <strong>field=&gt;value</strong> 对, HGET 获取对应 <strong>field</strong> 对应的 <strong>value</strong>。</p><p>每个 hash 可以存储 232 -1 键值对(40多亿)。</p><h2 id="3-3-list-列表"><a href="#3-3-list-列表" class="headerlink" title="3.3 list(列表)"></a>3.3 list(列表)</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部(左边)或者尾部(右边)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DEL kungs</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush kungs redis</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush kungs mongodb</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush kungs rabbitmq</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lpush kungs cassandra</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange kungs 0 10</span><br><span class="line">1) &quot;cassandra&quot;</span><br><span class="line">2) &quot;rabbitmq&quot;</span><br><span class="line">3) &quot;mongodb&quot;</span><br><span class="line">4) &quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>列表最多可存储 $2^{32} - 1$ 元素 (4294967295, 每个列表可存储40多亿)。</p><h2 id="3-4-set-集合"><a href="#3-4-set-集合" class="headerlink" title="3.4 set(集合)"></a>3.4 set(集合)</h2><p>Redis 的 Set 是 string 类型的无序集合。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><ol><li><p><strong>sadd 命令</strong></p><p>添加一个 string 元素到 key 对应的 set 集合中，成功返回 1，如果元素已经在集合中返回 0。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sadd key member</span><br></pre></td></tr></table></figure></li><li><p><strong>实例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DEL kungs</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd kungs redis</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd kungs mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd kungs rabbitmq</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd kungs rabbitmq</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; smembers kungs</span><br><span class="line">1) &quot;rabbitmq&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p><strong>注意：</strong>以上实例中 rabbitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。</p><p>集合中最大的成员数为  $2^{32} - 1$ (4294967295, 每个集合可存储40多亿个成员)。</p></li></ol><h2 id="3-5-zset-sorted-set：有序集合-。"><a href="#3-5-zset-sorted-set：有序集合-。" class="headerlink" title="3.5 zset(sorted set：有序集合)。"></a>3.5 zset(sorted set：有序集合)。</h2><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset的成员是唯一的,但分数(score)却可以重复。</p><ol><li><p><strong>zadd 命令</strong></p><p>添加元素到集合，元素在集合中存在则更新对应score</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd key score member </span><br></pre></td></tr></table></figure></li><li><p><strong>实例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DEL kungs</span><br><span class="line">Error: Server closed the connection</span><br><span class="line">127.0.0.1:6379&gt; DEL kungs</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd kungs 0 redis</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd kungs 0 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd kungs 0 rabbitmq</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd kungs 0 rabbitmq</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore kungs 0 1000</span><br><span class="line">1) &quot;mongodb&quot;</span><br><span class="line">2) &quot;rabbitmq&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ol><h2 id="3-6-位图-Bitmaps"><a href="#3-6-位图-Bitmaps" class="headerlink" title="3.6 位图(Bitmaps)"></a>3.6 位图(Bitmaps)</h2><p>Redis Bitmap 通过类似 map 结构存放 0 或 1 ( bit 位 ) 作为值。</p><p>Redis Bitmap 可以用来统计状态，如<code>日活</code>是否浏览过某个东西。</p><ol><li><p><strong>Redis setbit 命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETBIT key offset value</span><br></pre></td></tr></table></figure></li><li><p><strong>实例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DEL kungs</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; setbit kungs:001 10001 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit kungs:001 10002 2</span><br><span class="line">(error) ERR bit is not an integer or out of range</span><br><span class="line">127.0.0.1:6379&gt; setbit kungs:001 10002 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit kungs:001 10003 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit kungs:001 10001</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit kungs:001 10002</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit kungs:001 10003</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ol><h2 id="3-7-基数统计-HyperLogLogs"><a href="#3-7-基数统计-HyperLogLogs" class="headerlink" title="3.7 基数统计(HyperLogLogs)"></a>3.7 基数统计(HyperLogLogs)</h2><p>Redis HyperLogLog 可以接受多个元素作为输入，并给出输入元素的基数估算值</p><ul><li>基数</li></ul><p>集合中不同元素的数量，比如 {‘apple’, ‘banana’, ‘cherry’, ‘banana’, ‘apple’} 的基数就是 3</p><ul><li>估算值</li></ul><p>算法给出的基数并不是精确的，可能会比实际稍微多一些或者稍微少一些，但会控制在合 理的范围之内</p><p>HyperLogLog 的优点是：<strong>即使输入元素的数量或者体积非常非常大，计算基数所需的空间总是固定的、并且是很小的</strong>。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 264个不同元素的基数。</p><p>这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><ol><li><p><strong>Redis PFADD命令</strong></p><p>Redis PFADD 命令将元素添加至 HyperLogLog</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFADD key element [element ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>实例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD unique::ip::counter &quot;192.168.0.1&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD unique::ip::counter &quot;127.0.0.1&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD unique::ip::counter &quot;255.255.255.255&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT unique::ip::counter</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ol><h2 id="3-8-数据库的数据注意事项"><a href="#3-8-数据库的数据注意事项" class="headerlink" title="3.8 数据库的数据注意事项"></a>3.8 数据库的数据注意事项</h2><p><strong>注意</strong>：Redis支持多个数据库，并且每个数据库的数据是隔离的不能共享，并且基于单机才有，如果是集群就没有数据库的概念。</p><p>Redis是一个字典结构的存储服务器，而实际上一个Redis实例提供了多个用来存储数据的字典，客户端可以指定将数据存储在哪个字典中。这与我们熟知的在一个关系数据库实例中可以创建多个数据库类似，所以可以将其中的每个字典都理解成一个独立的数据库。</p><p>每个数据库对外都是一个从0开始的递增数字命名，Redis默认支持16个数据库（可以通过配置文件支持更多，无上限），可以通过配置databases来修改这一数字。客户端与Redis建立连接后会自动选择0号数据库，不过可以随时使用SELECT命令更换数据库，如要选择1号数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set kungs1 &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get kungs1</span><br><span class="line">Hello</span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get kungs1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[1]&gt; </span><br></pre></td></tr></table></figure><p>然而这些以数字命名的数据库又与我们理解的数据库有所区别。</p><ul><li>首先Redis不支持自定义数据库的名字，每个数据库都以编号命名，开发者必须自己记录哪些数据库存储了哪些数据。</li><li>另外Redis也不支持为每个数据库设置不同的访问密码，所以一个客户端要么可以访问全部数据库，要么连一个数据库也没有权限访问。</li><li>最重要的一点是多个数据库之间并不是完全隔离的，比如<code>FLUSHALL</code>命令可以清空一个Redis实例中所有数据库中的数据。</li></ul><p>综上所述，这些数据库更像是一种命名空间，而不适宜存储不同应用程序的数据。</p><p>比如可以使用0号数据库存储某个应用生产环境中的数据，使用1号数据库存储测试环境中的数据，但不适宜使用0号数据库存储A应用的数据而使用1号数据库B应用的数据，不同的应用应该使用不同的Redis实例存储数据。</p><p>由于Redis非常轻量级，一个空Redis实例占用的内存只有1M左右，所以不用担心多个Redis实例会额外占用很多内存。</p><h1 id="4-Redis-命令"><a href="#4-Redis-命令" class="headerlink" title="4. Redis 命令"></a>4. Redis 命令</h1><h2 id="4-0-Redis-命令"><a href="#4-0-Redis-命令" class="headerlink" title="4.0 Redis 命令"></a>4.0 Redis 命令</h2><h3 id="4-0-1-本地执行命令"><a href="#4-0-1-本地执行命令" class="headerlink" title="4.0.1 本地执行命令"></a>4.0.1 本地执行命令</h3><p>Redis 命令用于在 redis 服务上执行操作。</p><p>要在 redis 服务上执行命令需要一个 redis 客户端。Redis 客户端在我们之前下载的的 redis 的安装包中。</p><ol><li><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@00-0C-29-38-42-90 redis-6.2.6]# ./src/redis-cli -a yanpenggong</span><br></pre></td></tr></table></figure></li><li><p><strong>实例</strong></p><p>以下实例讲解了如何启动 redis 客户端：</p><p>启动 redis 服务器，打开终端并输入命令 <strong>redis-cli</strong>，该命令会连接本地的 redis 服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@00-0C-29-38-42-90 redis-6.2.6]# ./src/redis-cli -a yanpenggong</span><br><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>在以上实例中我们连接到本地的 redis 服务并执行 <strong>PING</strong> 命令，该命令用于检测 redis 服务是否启动。</p></li></ol><h3 id="4-0-2-在远程服务上执行命令"><a href="#4-0-2-在远程服务上执行命令" class="headerlink" title="4.0.2 在远程服务上执行命令"></a>4.0.2 在远程服务上执行命令</h3><p>如果需要在远程 redis 服务上执行命令，同样我们使用的也是 <strong>redis-cli</strong> 命令。</p><ol><li><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@00-0C-29-38-42-90 redis-6.2.6]# ./src/redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure></li><li><p><strong>实例</strong></p><p>以下实例演示了如何连接到主机为 <code>127.0.0.1</code>，端口为 <code>6379</code> ，密码为 <code>yanpengong</code> 的 redis 服务上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@00-0C-29-38-42-90 redis-6.2.6]# ./src/redis-cli -h 127.0.0.1 -p 6379 -a &quot;yanpenggong&quot;</span><br><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ol><h3 id="4-0-3-中文乱码解决办法"><a href="#4-0-3-中文乱码解决办法" class="headerlink" title="4.0.3 中文乱码解决办法"></a>4.0.3 中文乱码解决办法</h3><p>有时候会有中文乱码。要在 <code>redis-cli</code> 后面加上 <code>--raw</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@00-0C-29-38-42-90 redis-6.2.6]# ./src/redis-cli -a yanpenggong --raw</span><br><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h2 id="4-1-Redis-键-Keys"><a href="#4-1-Redis-键-Keys" class="headerlink" title="4.1 Redis 键(Keys)"></a>4.1 Redis 键(Keys)</h2><p>Redis 键命令用于管理 redis 的键。</p><h3 id="4-1-1-基本操作"><a href="#4-1-1-基本操作" class="headerlink" title="4.1.1 基本操作"></a>4.1.1 基本操作</h3><ol><li><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; COMMAND KEY_NAME</span><br></pre></td></tr></table></figure></li></ol><ol><li><p><strong>实例</strong></p><p>实例中 <strong>DEL</strong> 是一个命令， <strong>kungs</strong> 是一个键。 如果键被删除成功，命令执行后输出 <strong>1</strong>，否则将输出 <strong>0</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET kungs redis</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get kungs</span><br><span class="line">redis</span><br><span class="line">127.0.0.1:6379&gt; DEL kungs</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; DEL kungs</span><br><span class="line">0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ol><h3 id="4-1-2-keys-基本命令汇总"><a href="#4-1-2-keys-基本命令汇总" class="headerlink" title="4.1.2 keys 基本命令汇总"></a>4.1.2 keys 基本命令汇总</h3><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><a href="#DEL"><code>DEL key</code></a></td><td>用于在 key 存在时删除 key</td></tr><tr><td>2</td><td><a href="#DUMP"><code>DUMP key</code></a></td><td>序列化给定 key ，并返回被序列化的值</td></tr><tr><td>3</td><td><a href="#EXISTS"><code>EXISTS key</code></a></td><td>检查给定 key 是否存在</td></tr><tr><td>4</td><td><a href="#EXPIRE"><code>EXPIRE key seconds</code></a></td><td>为给定 key 设置过期时间，以秒计</td></tr><tr><td>5</td><td><a href="#EXPIREAT"><code>EXPIREAT key timestamp</code></a></td><td>EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 <br>不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)</td></tr><tr><td>6</td><td><a href="#PEXPIRE"><code>PEXPIRE key milliseconds</code></a></td><td>设置 key 的过期时间以毫秒计</td></tr><tr><td>7</td><td><a href="#PEXPIREAT"><code>PEXPIREAT key milliseconds-timestamp</code></a></td><td>设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td></tr><tr><td>8</td><td><a href="#KEYS"><code>KEYS pattern</code></a></td><td>查找所有符合给定模式( pattern)的 key</td></tr><tr><td>9</td><td><a href="#MOVE"><code>MOVE key db</code></a></td><td>将当前数据库的 key 移动到给定的数据库 db 当中</td></tr><tr><td>10</td><td><a href="#PERSIST"><code>PERSIST key</code></a></td><td>移除 key 的过期时间，key 将持久保持</td></tr><tr><td>11</td><td><a href="#PTTL"><code>PTTL key</code></a></td><td>以毫秒为单位返回 key 的剩余的过期时间</td></tr><tr><td>12</td><td><a href="#TTL"><code>TTL key</code></a></td><td>以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)</td></tr><tr><td>13</td><td><a href="#RANDOMKEY"><code>RANDOMKEY</code></a></td><td>从当前数据库中随机返回一个 key</td></tr><tr><td>14</td><td><a href="#RENAME"><code>RENAME key newkey</code></a></td><td>修改 key 的名称</td></tr><tr><td>15</td><td><a href="#RENAMENX"><code>RENAMENX key newkey</code></a></td><td>仅当 newkey 不存在时，将 key 改名为 newkey</td></tr><tr><td>16</td><td><a href="#SCAN"><code>SCAN cursor [MATCH pattern] [COUNT count]</code></a></td><td>迭代数据库中的数据库键</td></tr><tr><td>17</td><td><a href="#TYPE"><code>TYPE key</code></a></td><td>返回 key 所储存的值的类型</td></tr></tbody></table></div><h2 id="4-2-String-字符串"><a href="#4-2-String-字符串" class="headerlink" title="4.2 String(字符串)"></a>4.2 String(字符串)</h2><p>Redis 字符串命令用于管理 Redis 中的字符串值。</p><h3 id="4-2-1-基本操作"><a href="#4-2-1-基本操作" class="headerlink" title="4.2.1 基本操作"></a>4.2.1 基本操作</h3><ol><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; COMMAND KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET kungs yanpenggong</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET kungs</span><br><span class="line">&quot;yanpenggong&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>这里，SET 和 GET 是命令，”kungs” 是键。</p></li></ol><h3 id="4-2-2-String-基本命令汇总"><a href="#4-2-2-String-基本命令汇总" class="headerlink" title="4.2.2 String 基本命令汇总"></a>4.2.2 String 基本命令汇总</h3><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><a href="#SET"><code>SET</code></a></td><td>设置指定 key 的值</td></tr><tr><td>2</td><td><a href="#GET"><code>GET</code></a></td><td>获取指定 key 的值</td></tr><tr><td>3</td><td><a href="#GETRANGE"><code>GETRANGE</code></a></td><td>返回 key 中字符串值的子字符</td></tr><tr><td>4</td><td><a href="#GETSET"><code>GETSET</code></a></td><td>将给定 key 的值设为 value ，并返回 key 的旧值 ( old value )</td></tr><tr><td>5</td><td><a href="#GETBIT"><code>GETBIT</code></a></td><td>对 key 所储存的字符串值，获取指定偏移量上的位 ( bit )</td></tr><tr><td>6</td><td><a href="#MGET"><code>MGET</code></a></td><td>获取所有(一个或多个)给定 key 的值</td></tr><tr><td>7</td><td><a href="#SETBIT"><code>SETBIT</code></a></td><td>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)</td></tr><tr><td>8</td><td><a href="#SETEX"><code>SETEX</code></a></td><td>设置 key 的值为 value 同时将过期时间设为 seconds</td></tr><tr><td>9</td><td><a href="#SETNX"><code>SETNX</code></a></td><td>只有在 key 不存在时设置 key 的值</td></tr><tr><td>10</td><td><a href="#SETRANGE"><code>SETRANGE</code></a></td><td>从偏移量 offset 开始用 value 覆写给定 key 所储存的字符串值</td></tr><tr><td>11</td><td><a href="#STRLEN"><code>STRLEN</code></a></td><td>返回 key 所储存的字符串值的长度</td></tr><tr><td>12</td><td><a href="#MSET"><code>MSET</code></a></td><td>同时设置一个或多个 key-value 对</td></tr><tr><td>13</td><td><a href="#MSETNX"><code>MSETNX</code></a></td><td>同时设置一个或多个 key-value 对</td></tr><tr><td>14</td><td><a href="#PSETEX"><code>PSETEX</code></a></td><td>以毫秒为单位设置 key 的生存时间</td></tr><tr><td>15</td><td><a href="#INCR"><code>INCR</code></a></td><td>将 key 中储存的数字值增一</td></tr><tr><td>16</td><td><a href="#INCRBY"><code>INCRBY</code></a></td><td>将 key 所储存的值加上给定的增量值 ( increment )</td></tr><tr><td>17</td><td><a href="#INCRBYFLOAT"><code>INCRBYFLOAT</code></a></td><td>将 key 所储存的值加上给定的浮点增量值 ( increment )</td></tr><tr><td>18</td><td><a href="#DECR"><code>DECR</code></a></td><td>将 key 中储存的数字值减一</td></tr><tr><td>19</td><td><a href="#DECRBY"><code>DECRBY</code></a></td><td>将 key 所储存的值减去给定的减量值 ( decrement )</td></tr><tr><td>20</td><td><a href="#APPEND"><code>APPEND</code></a></td><td>将 value 追加到 key 原来的值的末尾</td></tr></tbody></table></div><h2 id="4-3-Hashes-哈希"><a href="#4-3-Hashes-哈希" class="headerlink" title="4.3 Hashes(哈希)"></a>4.3 Hashes(哈希)</h2><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p><p>Redis 中每个 hash 可以存储 $2^{32} - 1$ 键值对（40多亿）。</p><h3 id="4-3-1-基本操作"><a href="#4-3-1-基本操作" class="headerlink" title="4.3.1 基本操作"></a>4.3.1 基本操作</h3><p><strong>实例：</strong></p><p>在例子中，<code>rediscomcn</code> 是 Redis 哈希，它包含详细信息（name，url，rank，visitors）属性。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET rediscomcn name &quot;yanpenggong&quot; url &quot;https://blog.csdn.net/yanpenggong&quot; rank 1 visitors 2888</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HGETALL redisconmcn</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; HGETALL rediscomcn</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;yanpenggong&quot;</span><br><span class="line">3) &quot;url&quot;</span><br><span class="line">4) &quot;https://blog.csdn.net/yanpenggong&quot;</span><br><span class="line">5) &quot;rank&quot;</span><br><span class="line">6) &quot;1&quot;</span><br><span class="line">7) &quot;visitors&quot;</span><br><span class="line">8) &quot;2888&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-3-2-Hashes-基本命令汇总"><a href="#4-3-2-Hashes-基本命令汇总" class="headerlink" title="4.3.2 Hashes 基本命令汇总"></a>4.3.2 Hashes 基本命令汇总</h3><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><a href="#HDEL"><code>HDEL</code></a></td><td>删除一个或多个哈希表字段</td></tr><tr><td>2</td><td><a href="#HEXISTS"><code>HEXISTS</code></a></td><td>查看哈希表 key 中，指定的字段是否存在</td></tr><tr><td>3</td><td><a href="#HGET"><code>HGET</code></a></td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td>4</td><td><a href="#HGETALL"><code>HGETALL</code></a></td><td>获取在哈希表中指定 key 的所有字段和值</td></tr><tr><td>5</td><td><a href="#HINCRBY"><code>HINCRBY</code></a></td><td>为哈希表 key 中的指定字段的整数值加上增量 increment</td></tr><tr><td>6</td><td><a href="#HINCRBYFLOAT"><code>HINCRBYFLOAT</code></a></td><td>为哈希表 key 中的指定字段的浮点数值加上增量 increment</td></tr><tr><td>7</td><td><a href="#HKEYS"><code>HKEYS</code></a></td><td>获取所有哈希表中的字段</td></tr><tr><td>8</td><td><a href="#HLEN"><code>HLEN</code></a></td><td>获取哈希表中字段的数量</td></tr><tr><td>9</td><td><a href="#HMGET"><code>HMGET</code></a></td><td>获取所有给定字段的值</td></tr><tr><td>10</td><td><a href="#HMSET"><code>HMSET</code></a></td><td>同时将多个 field-value (域-值)对设置到哈希表 key 中</td></tr><tr><td>11</td><td><a href="#HSET"><code>HSET</code></a></td><td>将哈希表 key 中的字段 field 的值设为 value</td></tr><tr><td>12</td><td><a href="#HSETNX"><code>HSETNX</code></a></td><td>只有在字段 field 不存在时，设置哈希表字段的值</td></tr><tr><td>13</td><td><a href="#HVALS"><code>HVALS</code></a></td><td>获取哈希表中所有值</td></tr><tr><td>14</td><td><a href="#HSCAN"><code>HSCAN</code></a></td><td>迭代哈希表中的键值对</td></tr><tr><td>15</td><td><a href="#HSTRLEN"><code>HSTRLEN</code></a></td><td>返回哈希表 key 中， 与给定域 field 相关联的值的字符串长度</td></tr></tbody></table></div><h2 id="4-4-List-列表"><a href="#4-4-List-列表" class="headerlink" title="4.4 List(列表)"></a>4.4 List(列表)</h2><p>Redis 列表是按插入顺序排序的字符串列表。可以在列表的头部（左边）或尾部（右边）添加元素。</p><p>列表可以包含超过 40 亿 个元素 ( $2^{32} - 1$ )。</p><h3 id="4-4-1-基本操作"><a href="#4-4-1-基本操作" class="headerlink" title="4.4.1 基本操作"></a>4.4.1 基本操作</h3><p>用 LPUSH 命令将三个值插入了名为 language 的列表当中:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH dbs sql</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH dbs mysql</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH dbs mongodb</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE dbs 0 10</span><br><span class="line">1) &quot;mongodb&quot;</span><br><span class="line">2) &quot;mysql&quot;</span><br><span class="line">3) &quot;sql&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-4-2-List-基本命令汇总"><a href="#4-4-2-List-基本命令汇总" class="headerlink" title="4.4.2 List 基本命令汇总"></a>4.4.2 List 基本命令汇总</h3><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><a href="#BLPOP"><code>BLPOP</code></a></td><td>移出并获取列表的第一个元素</td></tr><tr><td>2</td><td><a href="#BRPOP"><code>BRPOP</code></a></td><td>移出并获取列表的最后一个元素</td></tr><tr><td>3</td><td><a href="#BRPOPLPUSH"><code>BRPOPLPUSH</code></a></td><td>从列表中弹出一个值，并将该值插入到另外一个列表中并返回它</td></tr><tr><td>4</td><td><a href="#LINDEX"><code>LINDEX</code></a></td><td>通过索引获取列表中的元素</td></tr><tr><td>5</td><td><a href="#LINSERT"><code>LINSERT</code></a></td><td>在列表的元素前或者后插入元素</td></tr><tr><td>6</td><td><a href="#LLEN"><code>LLEN</code></a></td><td>获取列表长度</td></tr><tr><td>7</td><td><a href="#LPOP"><code>LPOP</code></a></td><td>移出并获取列表的第一个元素</td></tr><tr><td>8</td><td><a href="#LPUSH"><code>LPUSH</code></a></td><td>将一个或多个值插入到列表头部</td></tr><tr><td>9</td><td><a href="#LPUSHX"><code>LPUSHX</code></a></td><td>将一个值插入到已存在的列表头部</td></tr><tr><td>10</td><td><a href="#LRANGE"><code>LRANGE</code></a></td><td>获取列表指定范围内的元素</td></tr><tr><td>11</td><td><a href="#LREM"><code>LREM</code></a></td><td>移除列表元素</td></tr><tr><td>12</td><td><a href="#LSET"><code>LSET</code></a></td><td>通过索引设置列表元素的值</td></tr><tr><td>13</td><td><a href="#LTRIM"><code>LTRIM</code></a></td><td>对一个列表进行修剪(trim)</td></tr><tr><td>14</td><td><a href="#RPOP"><code>RPOP</code></a></td><td>移除并获取列表最后一个元素</td></tr><tr><td>15</td><td><a href="#RPOPLPUSH"><code>RPOPLPUSH</code></a></td><td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td>16</td><td><a href="#RPUSH"><code>RPUSH</code></a></td><td>在列表中添加一个或多个值</td></tr><tr><td>17</td><td><a href="#RPUSHX"><code>RPUSHX</code></a></td><td>为已存在的列表添加值</td></tr></tbody></table></div><h2 id="4-5-Set-集合"><a href="#4-5-Set-集合" class="headerlink" title="4.5 Set(集合)"></a>4.5 Set(集合)</h2><p>Redis 的 Set 是 string 类型的无序集合。</p><p>集合成员是唯一的，这就意味着集合中没有重复的数据。</p><p>在 Redis 中，添加、删除和查找的时间复杂都是 O(1)（不管 Set 中包含多少元素）。</p><p>集合中最大的成员数为 $2^{32} – 1$ (4294967295), 每个集合可存储 40 多亿个成员。</p><h3 id="4-5-1-基本操作"><a href="#4-5-1-基本操作" class="headerlink" title="4.5.1 基本操作"></a>4.5.1 基本操作</h3><p>通过 SADD 命令向名为 rediscomcn 的集合插入的三个元素:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD rediscomcn db2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD rediscomcn mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD rediscomcn db2</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; SADD rediscomcn cassandra</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS rediscomcn</span><br><span class="line">1) &quot;cassandra&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;db2&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>在上面的示例中，我们使用 SADD 命令在集合中添加了 4 个元素。但是，使用 SMEMBERS 命令只检索了 3 个元素，因为有一个元素是重复的，Redis 只集合只含唯一元素。</p><h3 id="4-5-2-基本命令汇总"><a href="#4-5-2-基本命令汇总" class="headerlink" title="4.5.2 基本命令汇总"></a>4.5.2 基本命令汇总</h3><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><a href="#SADD"><code>SADD</code></a></td><td>向集合添加一个或多个成员</td></tr><tr><td>2</td><td><a href="#SCARD"><code>SCARD</code></a></td><td>获取集合的成员数</td></tr><tr><td>3</td><td><a href="#SDIFF"><code>SDIFF</code></a></td><td>返回给定所有集合的差集</td></tr><tr><td>4</td><td><a href="#SDIFFSTORE"><code>SDIFFSTORE</code></a></td><td>返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td>5</td><td><a href="#SINTER"><code>SINTER</code></a></td><td>返回给定所有集合的交集</td></tr><tr><td>6</td><td><a href="#SINTERSTORE"><code>SINTERSTORE</code></a></td><td>返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td>7</td><td><a href="#SISMEMBER"><code>SISMEMBER</code></a></td><td>判断 member 元素是否是集合 key 的成员</td></tr><tr><td>8</td><td><a href="#SMEMBERS"><code>SMEMBERS</code></a></td><td>返回集合中的所有成员</td></tr><tr><td>9</td><td><a href="#SMOVE"><code>SMOVE</code></a></td><td>将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td>10</td><td><a href="#SPOP"><code>SPOP</code></a></td><td>移除并返回集合中的一个随机元素</td></tr><tr><td>11</td><td><a href="#SRANDMEMBER"><code>SRANDMEMBER</code></a></td><td>返回集合中一个或多个随机数</td></tr><tr><td>12</td><td><a href="#SREM"><code>SREM</code></a></td><td>移除集合中一个或多个成员</td></tr><tr><td>13</td><td><a href="#SUNION"><code>SUNION</code></a></td><td>返回所有给定集合的并集</td></tr><tr><td>14</td><td><a href="#SUNIONSTORE"><code>SUNIONSTORE</code></a></td><td>所有给定集合的并集存储在 destination 集合中</td></tr><tr><td>15</td><td><a href="#SSCAN"><code>SSCAN</code></a></td><td>迭代集合中的元素</td></tr></tbody></table></div><h2 id="4-6-Sorted-Sets-有序集合"><a href="#4-6-Sorted-Sets-有序集合" class="headerlink" title="4.6 Sorted Sets(有序集合)"></a>4.6 Sorted Sets(有序集合)</h2><p>Redis 有序集合和集合一样也是 string 类型元素的集合，且不允许重复的成员。</p><p>不同的是每个元素都会关联一个 double 类型的分数。Redis 正是通过分数来为集合中的成员进行从小到大的排序。</p><p>有序集合的成员是唯一的,但分数 ( score ) 却可以重复。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><p>集合中最大的成员数为 $2^{32} – 1$ ( 4294967295 ) , 每个集合可存储 40 多亿个成员。</p><h3 id="4-6-1-基本操作"><a href="#4-6-1-基本操作" class="headerlink" title="4.6.1 基本操作"></a>4.6.1 基本操作</h3><p>通过 ZADD 命令向 Redis 的有序集合中添加了三个值并关联分数:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD rediscomcn 1 redis</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD rediscomcn 2 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD rediscomcn 3 mongodb</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; ZADD rediscomcn 3 mysql</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD rediscomcn 4 mysql</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE rediscomcn 0 10 WITHSCORES</span><br><span class="line">1) &quot;redis&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;mongodb&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">5) &quot;mysql&quot;</span><br><span class="line">6) &quot;4&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-6-2-基本命令汇总"><a href="#4-6-2-基本命令汇总" class="headerlink" title="4.6.2 基本命令汇总"></a>4.6.2 基本命令汇总</h3><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><a href="#ZADD"><code>ZADD</code></a></td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td>2</td><td><a href="#ZCARD"><code>ZCARD</code></a></td><td>获取有序集合的成员数</td></tr><tr><td>3</td><td><a href="#ZCOUNT"><code>ZCOUNT</code></a></td><td>计算在有序集合中指定区间分数的成员数</td></tr><tr><td>4</td><td><a href="#ZINCRBY"><code>ZINCRBY</code></a></td><td>有序集合中对指定成员的分数加上增量 increment</td></tr><tr><td>5</td><td><a href="#ZINTERSTORE"><code>ZINTERSTORE</code></a></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td>6</td><td><a href="#ZLEXCOUNT"><code>ZLEXCOUNT</code></a></td><td>在有序集合中计算指定字典区间内成员数量</td></tr><tr><td>7</td><td><a href="#ZRANGE"><code>ZRANGE</code></a></td><td>通过索引区间返回有序集合成指定区间内的成员</td></tr><tr><td>8</td><td><a href="#ZRANGEBYLEX"><code>ZRANGEBYLEX</code></a></td><td>通过字典区间返回有序集合的成员</td></tr><tr><td>9</td><td><a href="#ZRANGEBYSCORE"><code>ZRANGEBYSCORE</code></a></td><td>通过分数返回有序集合指定区间内的成员</td></tr><tr><td>10</td><td><a href="#ZRANK"><code>ZRANK</code></a></td><td>返回有序集合中指定成员的索引</td></tr><tr><td>11</td><td><a href="#ZREM"><code>ZREM</code></a></td><td>移除有序集合中的一个或多个成员</td></tr><tr><td>12</td><td><a href="#ZREMRANGEBYLEX"><code>ZREMRANGEBYLEX</code></a></td><td>移除有序集合中给定的字典区间的所有成员</td></tr><tr><td>13</td><td><a href="#ZREMRANGEBYRANK"><code>ZREMRANGEBYRANK</code></a></td><td>移除有序集合中给定的排名区间的所有成员</td></tr><tr><td>14</td><td><a href="#ZREMRANGEBYSCORE"><code>ZREMRANGEBYSCORE</code></a></td><td>移除有序集合中给定的分数区间的所有成员</td></tr><tr><td>15</td><td><a href="#ZREVRANGE"><code>ZREVRANGE</code></a></td><td>返回有序集中指定区间内的成员，通过索引，分数从高到底</td></tr><tr><td>16</td><td><a href="#ZREVRANGEBYSCORE"><code>ZREVRANGEBYSCORE</code></a></td><td>返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td>17</td><td><a href="#ZREVRANK"><code>ZREVRANK</code></a></td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td>18</td><td><a href="#ZSCORE"><code>ZSCORE</code></a></td><td>返回有序集中，成员的分数值</td></tr><tr><td>19</td><td><a href="#ZUNIONSTORE"><code>ZUNIONSTORE</code></a></td><td>计算一个或多个有序集的并集，并存储在新的 key 中</td></tr><tr><td>20</td><td><a href="#ZSCAN"><code>ZSCAN</code></a></td><td>迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table></div><h2 id="4-7-Pub-Sub-发布订阅"><a href="#4-7-Pub-Sub-发布订阅" class="headerlink" title="4.7 Pub/Sub(发布订阅)"></a>4.7 Pub/Sub(发布订阅)</h2><p>Redis 发布/订阅是一种消息传模式，其中发送者（在Redis术语中称为发布者）发送消息，而接收者（订阅者）接收消息。传递消息的通道称为<strong>channel</strong>。</p><p>在Redis中，客户端可以订阅任意数量的频道。</p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph BT;</span><br><span class="line">client1--&gt;|subscribe|channel1;</span><br><span class="line">client2--&gt;|subscribe|channel1;</span><br><span class="line">client5--&gt;|subscribe|channel1;</span><br></pre></td></tr></table></figure><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line">start(PUBLISH channel1 message)--&gt;channel1(channel1);</span><br><span class="line">channel1--&gt;|message|client1(client1);</span><br><span class="line">channel1--&gt;|message|client2(client2);</span><br><span class="line">channel1--&gt;|message|client5(client5);</span><br><span class="line">style start fill:#aaf</span><br><span class="line">style channel1 fill:#90EE90</span><br><span class="line">style client1 fill:#87CEFA</span><br><span class="line">style client2 fill:#87CEFA</span><br><span class="line">style client5 fill:#87CEFA</span><br></pre></td></tr></table></figure><h3 id="4-7-1-基本操作"><a href="#4-7-1-基本操作" class="headerlink" title="4.7.1 基本操作"></a>4.7.1 基本操作</h3><p>以下实例演示了发布订阅是如何工作的，需要开启两个 redis-cli 客户端。</p><p>在我们实例中我们创建了订阅频道名为 <strong>rediscomcnChat</strong>:</p><ol><li><p><strong>第一个 redis-cli 客户端</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE rediscomcnChat</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;rediscomcnChat&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在，我们先重新开启个 redis 客户端(<strong>第二个redis-cli 客户端</strong>)，然后在同一个频道 rediscomcnChat 发布两次消息，订阅者就能接收到消息。</p></li><li><p><strong>第二个 redis-cli 客户端</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH rediscomcnChat &quot;Redis PUBLISH test&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH rediscomcnChat &quot;Learn redis with python&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ol><ol><li><p><strong>第一个redis-cli 客户端的最新接受信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE rediscomcnChat</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;rediscomcnChat&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;rediscomcnChat&quot;</span><br><span class="line">3) &quot;Redis PUBLISH test&quot;</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;rediscomcnChat&quot;</span><br><span class="line">3) &quot;Learn redis with python&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="4-7-2-基本命令汇总"><a href="#4-7-2-基本命令汇总" class="headerlink" title="4.7.2  基本命令汇总"></a>4.7.2  基本命令汇总</h3><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><a href="#PSUBSCRIBE"><code>PSUBSCRIBE</code></a></td><td>订阅一个或多个符合给定模式的频道。</td></tr><tr><td>2</td><td><a href="#PUBSUB"><code>PUBSUB</code></a></td><td>查看订阅与发布系统状态。</td></tr><tr><td>3</td><td><a href="#PUBLISH"><code>PUBLISH</code></a></td><td>将信息发送到指定的频道。</td></tr><tr><td>4</td><td><a href="#PUNSUBSCRIBE"><code>PUNSUBSCRIBE</code></a></td><td>退订所有给定模式的频道。</td></tr><tr><td>5</td><td><a href="#SUBSCRIBE"><code>SUBSCRIBE</code></a></td><td>订阅给定的一个或多个频道的信息。</td></tr><tr><td>6</td><td><a href="#UNSUBSCRIBE"><code>UNSUBSCRIBE</code></a></td><td>指退订给定的频道。</td></tr></tbody></table></div><h2 id="4-8-Transaction-事务"><a href="#4-8-Transaction-事务" class="headerlink" title="4.8 Transaction(事务)"></a>4.8 Transaction(事务)</h2><p>事务是指<strong>一个完整的动作，要么全部执行，要么什么也没有做</strong>。</p><p>Redis 事务不是严格意义上的事务，只是用于帮助用户在一个步骤中执行多个命令。单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。</p><p>Redis 事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。</p><p>Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：</p><ul><li>批量操作在发送 EXEC 命令前被放入队列缓存。</li><li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ul><p>一个事务从开始到执行会经历以下三个阶段：</p><ul><li>开始事务。</li><li>命令入队。</li><li>执行事务。</li></ul><p>MULTI、EXEC、DISCARD、WATCH 这四个指令构成了 redis 事务处理的基础。</p><ol><li>MULTI 用来组装一个事务；</li><li>EXEC 用来执行一个事务；</li><li>DISCARD 用来取消一个事务；</li><li>WATCH 用来监视一些 key，一旦这些 key 在事务执行之前被改变，则取消事务的执行。</li></ol><p>在 Redis 中，通过使用<strong>MULTI</strong>命令启动事务，然后需要传递应在事务中执行的命令列表，之后整个事务由<strong>EXEC</strong>命令执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; EXEC</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-8-1-基本操作"><a href="#4-8-1-基本操作" class="headerlink" title="4.8.1 基本操作"></a>4.8.1 基本操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; SET myset redis</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; GET myset</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR kungs</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; EXEC</span><br><span class="line">1) OK</span><br><span class="line">2) &quot;redis&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>在上面的例子中，我们看到了 QUEUED 的字样，这表示我们在用 MULTI 组装事务时，每一个命令都会进入到内存队列中缓存起来，如果出现 QUEUED 则表示我们这个命令成功插入了缓存队列，在将来执行 EXEC 时，这些被 QUEUED 的命令都会被组装成一个事务来执行。</p><p>对于事务的执行来说，如果 redis 开启了 AOF 持久化的话，那么一旦事务被成功执行，事务中的命令就会通过 write 命令一次性写到磁盘中去，如果在向磁盘中写的过程中恰好出现断电、硬件故障等问题，那么就可能出现只有部分命令进行了 AOF 持久化，这时 AOF 文件就会出现不完整的情况，这时，我们可以使用 redis-check-aof 工具来修复这一问题，这个工具会将 AOF 文件中不完整的信息移除，确保 AOF 文件完整可用。</p><blockquote><p><strong>Redis 事务错误</strong></p><p>有关事务，大家经常会遇到的是两类错误：</p><ul><li>调用 EXEC 之前的错误</li><li>调用 EXEC 之后的错误</li></ul><p><strong>调用 EXEC 之前的错误</strong>，有可能是由于语法有误导致的，也可能时由于内存不足导致的。只要出现某个命令无法成功写入缓冲队列的情况，redis 都会进行记录，在客户端调用 EXEC 时，redis 会拒绝执行这一事务。（这是 2.6.5 版本之后的策略。在 2.6.5 之前的版本中，redis 会忽略那些入队失败的命令，只执行那些入队成功的命令）。我们来看一个这样的例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; haha //一个明显错误的指令</span><br><span class="line">(error) ERR unknown command &#x27;haha&#x27;</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">//redis无情的拒绝了事务的执行，原因是“之前出现了错误”</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br></pre></td></tr></table></figure><p>而对于<strong>调用 EXEC 之后的错误</strong>，redis 则采取了完全不同的策略，即 redis 不会理睬这些错误，而是继续向下执行事务中的其他命令。这是因为，对于应用层面的错误，并不是 redis 自身需要考虑和处理的问题，所以一个事务中如果某一条命令执行失败，并不会影响接下来的其他命令的执行。我们也来看一个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set age 23</span><br><span class="line">QUEUED</span><br><span class="line">//age不是集合，所以如下是一条明显错误的指令</span><br><span class="line">127.0.0.1:6379&gt; sadd age 15 </span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set age 29</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec //执行事务时，redis不会理睬第2条指令执行错误</span><br><span class="line">1) OK</span><br><span class="line">2) (error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br><span class="line">3) OK</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">&quot;29&quot; //可以看出第3条指令被成功执行了</span><br></pre></td></tr></table></figure><p>最后，我们来说说最后一个指令<strong>WATCH</strong>，这是一个很好用的指令，它可以帮我们实现类似于“乐观锁”的效果，即<code>CAS（check and set）</code>。</p><p>WATCH 本身的作用是<strong>监视 key 是否被改动过</strong>，而且支持同时监视多个 key，只要还没真正触发事务，WATCH 都会尽职尽责的监视，一旦发现某个 key 被修改了，在执行 EXEC 时就会返回 nil，表示事务无法触发。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set age 23</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch age //开始监视age</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set age 24 //在EXEC之前，age的值被修改了</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set age 25</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec //触发EXEC</span><br><span class="line">(nil) //事务无法被执行</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-8-2-基本命令汇总"><a href="#4-8-2-基本命令汇总" class="headerlink" title="4.8.2 基本命令汇总"></a>4.8.2 基本命令汇总</h3><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><a href="#DISCARD"><code>DISCARD</code></a></td><td>取消事务，放弃执行事务块内的所有命令</td></tr><tr><td>2</td><td><a href="#EXEC"><code>EXEC</code></a></td><td>执行所有事务块内的命令</td></tr><tr><td>3</td><td><a href="#MULTI"><code>MULTI</code></a></td><td>标记一个事务块的开始</td></tr><tr><td>4</td><td><a href="#UNWATCH"><code>UNWATCH</code></a></td><td>取消 WATCH 命令对所有 key 的监视</td></tr><tr><td>5</td><td><a href="#WATCH"><code>WATCH</code></a></td><td>监视一个(或多个) key</td></tr></tbody></table></div><h2 id="4-9-Script-脚本"><a href="#4-9-Script-脚本" class="headerlink" title="4.9 Script(脚本)"></a>4.9 Script(脚本)</h2><p>Redis 脚本使用 Lua 解释器来执行脚本。</p><p>自版本 2.6.0 开始内嵌于 Redis 中。</p><p>用于编写脚本的命令是 EVAL。</p><h3 id="4-9-1-基本操作"><a href="#4-9-1-基本操作" class="headerlink" title="4.9.1 基本操作"></a>4.9.1 基本操作</h3><ul><li><p><strong>语法</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL script numkeys key [key ...] arg [arg ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>实例</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL &quot;return &#123;KEYS[1],KEYS[2],ARGV[1],ARGV[2]&#125;&quot; 2 key1 key2 first second</span><br><span class="line">1) &quot;key1&quot;</span><br><span class="line">2) &quot;key2&quot;</span><br><span class="line">3) &quot;first&quot;</span><br><span class="line">4) &quot;second&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><h3 id="4-9-2-基本命令汇总"><a href="#4-9-2-基本命令汇总" class="headerlink" title="4.9.2  基本命令汇总"></a>4.9.2  基本命令汇总</h3><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><a href="#EVAL script numkeys key [key ...] arg [arg ...]"><code>EVAL script numkeys key [key ...] arg [arg ...]</code></a></td><td>执行 Lua 脚本。</td></tr><tr><td>2</td><td><a href="#EVALSHA sha1 numkeys key [key ...] arg [arg ...]"><code>EVALSHA sha1 numkeys key [key ...] arg [arg ...]</code></a></td><td>执行 Lua 脚本。</td></tr><tr><td>3</td><td><a href="#SCRIPT EXISTS sha1 [sha1 ...]"><code>SCRIPT EXISTS sha1 [sha1 ...]</code></a></td><td>查看指定的脚本是否已经被保存在缓存当中。</td></tr><tr><td>4</td><td><a href="#SCRIPT FLUSH"><code>SCRIPT FLUSH</code></a></td><td>从脚本缓存中移除所有脚本。</td></tr><tr><td>5</td><td><a href="#SCRIPT KILL"><code>SCRIPT KILL</code></a></td><td>杀死当前正在运行的 Lua 脚本。</td></tr><tr><td>6</td><td><a href="#SCRIPT LOAD script"><code>SCRIPT LOAD script</code></a></td><td>将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。</td></tr></tbody></table></div><h2 id="4-10-Connection-连接"><a href="#4-10-Connection-连接" class="headerlink" title="4.10 Connection(连接)"></a>4.10 Connection(连接)</h2><p>Redis 连接命令用于控制和管理到 Redis Server 的客户端连接。</p><h3 id="4-10-1-基本操作"><a href="#4-10-1-基本操作" class="headerlink" title="4.10.1 基本操作"></a>4.10.1 基本操作</h3><p>示例说明客户端如何向 Redis 服务器验证自身并检查服务器是否正在运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-6.2.6]# src/redis-cli</span><br><span class="line">127.0.0.1:6379&gt; PING</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; AUTH &quot;yanpenggong&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PING</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：在这里您可以看到未设置“密码”，因此您可以直接访问任何命令。</p></blockquote><h3 id="4-10-2-基本命令汇总"><a href="#4-10-2-基本命令汇总" class="headerlink" title="4.10.2 基本命令汇总"></a>4.10.2 基本命令汇总</h3><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><a href="#AUTH password"><code>AUTH password</code></a></td><td>验证密码是否正确</td></tr><tr><td>2</td><td><a href="#ECHO message"><code>ECHO message</code></a></td><td>打印字符串</td></tr><tr><td>3</td><td><a href="#PING"><code>PING</code></a></td><td>查看服务是否运行</td></tr><tr><td>4</td><td><a href="#QUIT"><code>QUIT</code></a></td><td>关闭当前连接</td></tr><tr><td>5</td><td><a href="#SELECT index"><code>SELECT index</code></a></td><td>切换到指定的数据库</td></tr></tbody></table></div><h2 id="4-11-Server-服务器"><a href="#4-11-Server-服务器" class="headerlink" title="4.11 Server(服务器)"></a>4.11 Server(服务器)</h2><p>Redis Server 命令用于管理 Redis 服务器。</p><p>有不同的服务器命令可用于获取服务器信息，统计信息和其他特征。</p><h3 id="4-11-1-基本操作"><a href="#4-11-1-基本操作" class="headerlink" title="4.11.1 基本操作"></a>4.11.1 基本操作</h3><p>如何获取有关服务器的所有统计信息和信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PING</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; AUTH &quot;password&quot;</span><br><span class="line">(error) WRONGPASS invalid username-password pair or user is disabled.</span><br><span class="line">127.0.0.1:6379&gt; AUTH &quot;yanpenggong&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PING</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; ECHO &quot;Welcome to use redis!&quot;</span><br><span class="line">&quot;Welcome to use redis!&quot;</span><br><span class="line">127.0.0.1:6379&gt; INFO</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Server</span></span><br><span class="line">redis_version:6.2.6</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:eac5b3c736e2a107</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 3.10.0-1160.el7.x86_64 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:4.8.5</span><br><span class="line">process_id:17277</span><br><span class="line">process_supervised:no</span><br><span class="line">run_id:4884ead059e4a0ad9cb88e2231856af69ff9ac7e</span><br><span class="line">tcp_port:6379</span><br><span class="line">server_time_usec:1653053635898059</span><br><span class="line">uptime_in_seconds:112803</span><br><span class="line">uptime_in_days:1</span><br><span class="line">hz:10</span><br><span class="line">configured_hz:10</span><br><span class="line">lru_clock:8886467</span><br><span class="line">executable:/opt/software/redis-6.2.6/./src/redis-server</span><br><span class="line">config_file:/opt/software/redis-6.2.6/./redis.conf</span><br><span class="line">io_threads_active:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Clients</span></span><br><span class="line">connected_clients:1</span><br><span class="line">cluster_connections:0</span><br><span class="line">maxclients:10000</span><br><span class="line">client_recent_max_input_buffer:24</span><br><span class="line">client_recent_max_output_buffer:0</span><br><span class="line">blocked_clients:0</span><br><span class="line">tracking_clients:0</span><br><span class="line">clients_in_timeout_table:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Memory</span></span><br><span class="line">used_memory:879392</span><br><span class="line">used_memory_human:858.78K</span><br><span class="line">used_memory_rss:3112960</span><br><span class="line">used_memory_rss_human:2.97M</span><br><span class="line">used_memory_peak:977792</span><br><span class="line">used_memory_peak_human:954.88K</span><br><span class="line">used_memory_peak_perc:89.94%</span><br><span class="line">used_memory_overhead:832376</span><br><span class="line">used_memory_startup:810112</span><br><span class="line">used_memory_dataset:47016</span><br><span class="line">used_memory_dataset_perc:67.86%</span><br><span class="line">allocator_allocated:924912</span><br><span class="line">allocator_active:1191936</span><br><span class="line">allocator_resident:3473408</span><br><span class="line">total_system_memory:1019572224</span><br><span class="line">total_system_memory_human:972.34M</span><br><span class="line">used_memory_lua:43008</span><br><span class="line">used_memory_lua_human:42.00K</span><br><span class="line">used_memory_scripts:248</span><br><span class="line">used_memory_scripts_human:248B</span><br><span class="line">number_of_cached_scripts:2</span><br><span class="line">maxmemory:0</span><br><span class="line">maxmemory_human:0B</span><br><span class="line">maxmemory_policy:noeviction</span><br><span class="line">allocator_frag_ratio:1.29</span><br><span class="line">allocator_frag_bytes:267024</span><br><span class="line">allocator_rss_ratio:2.91</span><br><span class="line">allocator_rss_bytes:2281472</span><br><span class="line">rss_overhead_ratio:0.90</span><br><span class="line">rss_overhead_bytes:-360448</span><br><span class="line">mem_fragmentation_ratio:3.72</span><br><span class="line">mem_fragmentation_bytes:2276328</span><br><span class="line">mem_not_counted_for_evict:0</span><br><span class="line">mem_replication_backlog:0</span><br><span class="line">mem_clients_slaves:0</span><br><span class="line">mem_clients_normal:20504</span><br><span class="line">mem_aof_buffer:0</span><br><span class="line">mem_allocator:jemalloc-5.1.0</span><br><span class="line">active_defrag_running:0</span><br><span class="line">lazyfree_pending_objects:0</span><br><span class="line">lazyfreed_objects:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Persistence</span></span><br><span class="line">loading:0</span><br><span class="line">current_cow_size:0</span><br><span class="line">current_cow_size_age:0</span><br><span class="line">current_fork_perc:0.00</span><br><span class="line">current_save_keys_processed:0</span><br><span class="line">current_save_keys_total:0</span><br><span class="line">rdb_changes_since_last_save:1</span><br><span class="line">rdb_bgsave_in_progress:0</span><br><span class="line">rdb_last_save_time:1653053235</span><br><span class="line">rdb_last_bgsave_status:ok</span><br><span class="line">rdb_last_bgsave_time_sec:0</span><br><span class="line">rdb_current_bgsave_time_sec:-1</span><br><span class="line">rdb_last_cow_size:462848</span><br><span class="line">aof_enabled:0</span><br><span class="line">aof_rewrite_in_progress:0</span><br><span class="line">aof_rewrite_scheduled:0</span><br><span class="line">aof_last_rewrite_time_sec:-1</span><br><span class="line">aof_current_rewrite_time_sec:-1</span><br><span class="line">aof_last_bgrewrite_status:ok</span><br><span class="line">aof_last_write_status:ok</span><br><span class="line">aof_last_cow_size:0</span><br><span class="line">module_fork_in_progress:0</span><br><span class="line">module_fork_last_cow_size:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Stats</span></span><br><span class="line">total_connections_received:86</span><br><span class="line">total_commands_processed:874</span><br><span class="line">instantaneous_ops_per_sec:0</span><br><span class="line">total_net_input_bytes:34468</span><br><span class="line">total_net_output_bytes:400133</span><br><span class="line">instantaneous_input_kbps:0.00</span><br><span class="line">instantaneous_output_kbps:0.00</span><br><span class="line">rejected_connections:0</span><br><span class="line">sync_full:0</span><br><span class="line">sync_partial_ok:0</span><br><span class="line">sync_partial_err:0</span><br><span class="line">expired_keys:0</span><br><span class="line">expired_stale_perc:0.00</span><br><span class="line">expired_time_cap_reached_count:0</span><br><span class="line">expire_cycle_cpu_milliseconds:6178</span><br><span class="line">evicted_keys:0</span><br><span class="line">keyspace_hits:194</span><br><span class="line">keyspace_misses:13</span><br><span class="line">pubsub_channels:0</span><br><span class="line">pubsub_patterns:0</span><br><span class="line">latest_fork_usec:955</span><br><span class="line">total_forks:72</span><br><span class="line">migrate_cached_sockets:0</span><br><span class="line">slave_expires_tracked_keys:0</span><br><span class="line">active_defrag_hits:0</span><br><span class="line">active_defrag_misses:0</span><br><span class="line">active_defrag_key_hits:0</span><br><span class="line">active_defrag_key_misses:0</span><br><span class="line">tracking_total_keys:0</span><br><span class="line">tracking_total_items:0</span><br><span class="line">tracking_total_prefixes:0</span><br><span class="line">unexpected_error_replies:0</span><br><span class="line">total_error_replies:78</span><br><span class="line">dump_payload_sanitizations:0</span><br><span class="line">total_reads_processed:885</span><br><span class="line">total_writes_processed:872</span><br><span class="line">io_threaded_reads_processed:0</span><br><span class="line">io_threaded_writes_processed:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:5747e010248e99df63f6fc7132cd4f5e778e4c23</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CPU</span></span><br><span class="line">used_cpu_sys:207.781743</span><br><span class="line">used_cpu_user:235.973647</span><br><span class="line">used_cpu_sys_children:0.431789</span><br><span class="line">used_cpu_user_children:0.070083</span><br><span class="line">used_cpu_sys_main_thread:207.720070</span><br><span class="line">used_cpu_user_main_thread:235.938962</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Modules</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Errorstats</span></span><br><span class="line">errorstat_ERR:count=45</span><br><span class="line">errorstat_NOAUTH:count=13</span><br><span class="line">errorstat_NOTBUSY:count=3</span><br><span class="line">errorstat_WRONGPASS:count=4</span><br><span class="line">errorstat_WRONGTYPE:count=13</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cluster</span></span><br><span class="line">cluster_enabled:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Keyspace</span></span><br><span class="line">db0:keys=21,expires=0,avg_ttl=0</span><br><span class="line">db1:keys=5,expires=0,avg_ttl=0</span><br><span class="line">db2:keys=3,expires=0,avg_ttl=0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-11-2-基本命令汇总"><a href="#4-11-2-基本命令汇总" class="headerlink" title="4.11.2 基本命令汇总"></a>4.11.2 基本命令汇总</h3><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><a href="#BGREWRITEAOF"><code>BGREWRITEAOF</code></a></td><td>异步执行一个 AOF（AppendOnly File） 文件重写操作</td></tr><tr><td>2</td><td><a href="#BGSAVE"><code>BGSAVE</code></a></td><td>在后台异步保存当前数据库的数据到磁盘</td></tr><tr><td>3</td><td><a href="#CLIENT KILL"><code>CLIENT KILL</code></a></td><td>关闭客户端连接</td></tr><tr><td>4</td><td><a href="#CLIENT LIST"><code>CLIENT LIST</code></a></td><td>获取连接到服务器的客户端连接列表</td></tr><tr><td>5</td><td><a href="#CLIENT GETNAME"><code>CLIENT GETNAME</code></a></td><td>获取连接的名称</td></tr><tr><td>6</td><td><a href="#CLIENT PAUSE"><code>CLIENT PAUSE</code></a></td><td>在指定时间内终止运行来自客户端的命令</td></tr><tr><td>7</td><td><a href="#CLIENT SRTNAME"><code>CLIENT STNAME</code></a></td><td>设置当前连接的名称</td></tr><tr><td>8</td><td><a href="#CLUSTER SLOTS"><code>CLUSTER SLOTS</code></a></td><td>获取集群节点的映射数组</td></tr><tr><td>9</td><td><a href="#COMMAND"><code>COMMAND</code></a></td><td>获取 Redis 命令总数</td></tr><tr><td>10</td><td><a href="#COMMAND COUNT"><code>COMMAND COUNT</code></a></td><td>获取 Redis 命令总数</td></tr><tr><td>11</td><td><a href="#COMMAND GETKEYS"><code>COMMAND GETKEYS</code></a></td><td>获取给定命令的所有键</td></tr><tr><td>12</td><td><a href="#TIME"><code>TIME</code></a></td><td>返回当前服务器时间</td></tr><tr><td>13</td><td><a href="#COMMAND INFO"><code>COMMAND INFO</code></a></td><td>获取指定 Redis 命令描述的数组</td></tr><tr><td>14</td><td><a href="#CONFIG GET"><code>CONFIG GET</code></a></td><td>获取指定配置参数的值</td></tr><tr><td>15</td><td><a href="#CONFIG REWRITE"><code>CONFIG REWRITE</code></a></td><td>修改 redis.conf 配置文件</td></tr><tr><td>16</td><td><a href="#CONFIG SET"><code>CONFIG SET</code></a></td><td>修改 redis 配置参数，无需重启</td></tr><tr><td>17</td><td><a href="#CONFIG RESETSTAT"><code>CONFIG RESETSTAT</code></a></td><td>重置 INFO 命令中的某些统计数据</td></tr><tr><td>18</td><td><a href="#DBSIZE"><code>DBSIZE</code></a></td><td>返回当前数据库的 key 的数量</td></tr><tr><td>19</td><td><a href="#DEBUG OBJECT"><code>DEBUG OBJECT</code></a></td><td>获取 key 的调试信息</td></tr><tr><td>20</td><td><a href="#DEBUG SEGFAULT"><code>DEBUG SEGFAULT</code></a></td><td>让 Redis 服务崩溃</td></tr><tr><td>21</td><td><a href="#FLUSHALL"><code>FLUSHALL</code></a></td><td>删除所有数据库的所有 key</td></tr><tr><td>22</td><td><a href="#FLUSHDB"><code>FLUSHDB</code></a></td><td>删除当前数据库的所有 key</td></tr><tr><td>23</td><td><a href="#INFO"><code>INFO</code></a></td><td>获取 Redis 服务器的各种信息和统计数值</td></tr><tr><td>24</td><td><a href="#LASTSAVE"><code>LASTSAVE</code></a></td><td>返回最近一次 Redis 成功将数据保存到磁盘上的时间</td></tr><tr><td>25</td><td><a href="#MONITOR"><code>MONITOR</code></a></td><td>实时打印出 Redis 服务器接收到的命令，调试用</td></tr><tr><td>26</td><td><a href="#ROLE"><code>ROLE</code></a></td><td>返回主从实例所属的角色</td></tr><tr><td>27</td><td><a href="#SAVE"><code>SAVE</code></a></td><td>异步保存数据到硬盘</td></tr><tr><td>28</td><td><a href="#SHUTDOWN"><code>SHUTDOWN</code></a></td><td>异步保存数据到硬盘，并关闭服务器</td></tr><tr><td>29</td><td><a href="#SLAVEOF"><code>SLAVEOF</code></a></td><td>将当前服务器转变从属服务器(slave server)</td></tr><tr><td>30</td><td><a href="#SLOWLOG"><code>SLOWLOG</code></a></td><td>管理 redis 的慢日志</td></tr><tr><td>31</td><td><a href="#SYNC"><code>SYNC</code></a></td><td>用于复制功能 ( replication ) 的内部命令</td></tr></tbody></table></div><h2 id="4-12-HyperLogLog"><a href="#4-12-HyperLogLog" class="headerlink" title="4.12 HyperLogLog"></a>4.12 HyperLogLog</h2><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 264个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><h4 id="4-12-1-基本操作"><a href="#4-12-1-基本操作" class="headerlink" title="4.12.1 基本操作"></a>4.12.1 基本操作</h4><ul><li><p><strong>什么是基数?</strong></p><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p></li><li><p><strong>实例</strong></p><p>以下实例演示了 HyperLogLog 的工作过程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD rediscomcn &quot;redis&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD rediscomcn &quot;mongodb&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD rediscomcn &quot;mysql&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT rediscomcn</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><h4 id="4-12-2-基本命令汇总"><a href="#4-12-2-基本命令汇总" class="headerlink" title="4.12.2 基本命令汇总"></a>4.12.2 基本命令汇总</h4><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><a href="#PFADD"><code>PFADD</code></a></td><td>添加指定元素到 HyperLogLog 中。</td></tr><tr><td>2</td><td><a href="#PFCOUNT"><code>PFCOUNT</code></a></td><td>返回给定 HyperLogLog 的基数估算值。</td></tr><tr><td>3</td><td><a href="#PFMERGE"><code>PFMERGE</code></a></td><td>将多个 HyperLogLog 合并为一个 HyperLogLog</td></tr></tbody></table></div><h2 id="4-13-地理信息"><a href="#4-13-地理信息" class="headerlink" title="4.13 地理信息"></a>4.13 地理信息</h2><p>Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，该功能在 Redis 3.2 版本新增。</p><p>Redis GEO 操作方法有：</p><ul><li>geoadd：添加地理位置的坐标。</li><li>geopos：获取地理位置的坐标。</li><li>geodist：计算两个位置之间的距离。</li><li>georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。</li><li>georadiusbymember：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。</li><li>geohash：返回一个或多个位置对象的 geohash 值。</li></ul><h3 id="4-13-1-geoadd"><a href="#4-13-1-geoadd" class="headerlink" title="4.13.1 geoadd"></a>4.13.1 geoadd</h3><p>geoadd 用于存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中。</p><p>geoadd 语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOADD key longitude latitude member [longitude latitude member ...]</span><br></pre></td></tr></table></figure><p>以下实例中 key 为 Sicily、Catania 为位置名称 ：</p><p><strong>实例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; GEODIST Sicily Palermo Catania</span><br><span class="line">&quot;166274.1516&quot;</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS Sicily 15 37 100 km</span><br><span class="line">1) &quot;Catania&quot;</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS Sicily 15 37 200 km</span><br><span class="line">1) &quot;Palermo&quot;</span><br><span class="line">2) &quot;Catania&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-13-2-geopos"><a href="#4-13-2-geopos" class="headerlink" title="4.13.2 geopos"></a>4.13.2 geopos</h3><p>geopos 用于从给定的 key 里返回所有指定名称(member)的位置（经度和纬度），不存在的返回 nil。</p><p>geopos 语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOPOS key member [member ...]</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; GEOPOS Sicily Palermo Catania NonExisting</span><br><span class="line">1) 1) &quot;13.36138933897018433&quot;</span><br><span class="line">   2) &quot;38.11555639549629859&quot;</span><br><span class="line">2) 1) &quot;15.08726745843887329&quot;</span><br><span class="line">   2) &quot;37.50266842333162032&quot;</span><br><span class="line">3) (nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-13-3-geodist"><a href="#4-13-3-geodist" class="headerlink" title="4.13.3 geodist"></a>4.13.3 geodist</h3><p>geodist 用于返回两个给定位置之间的距离。</p><p>geodist 语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEODIST key member1 member2 [m|km|ft|mi]</span><br></pre></td></tr></table></figure><p>member1 member2 为两个地理位置。</p><p>最后一个距离单位参数说明：</p><ul><li>m ：米，默认单位。</li><li>km ：千米。</li><li>mi ：英里。</li><li>ft ：英尺。</li></ul><p><strong>实例</strong>: 计算 Palermo 与 Catania 之间的距离实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; GEODIST Sicily Palermo Catania</span><br><span class="line">&quot;166274.1516&quot;</span><br><span class="line">127.0.0.1:6379&gt; GEODIST Sicily Palermo Catania km</span><br><span class="line">&quot;166.2742&quot;</span><br><span class="line">127.0.0.1:6379&gt; GEODIST Sicily Palermo Catania mi</span><br><span class="line">&quot;103.3182&quot;</span><br><span class="line">127.0.0.1:6379&gt; GEODIST Sicily Foo Bar</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-13-4-georadius、georadiusbymember"><a href="#4-13-4-georadius、georadiusbymember" class="headerlink" title="4.13.4 georadius、georadiusbymember"></a>4.13.4 georadius、georadiusbymember</h3><p>georadius 以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</p><p>georadiusbymember 和 GEORADIUS 命令一样， 都可以找出位于指定范围内的元素， 但是 georadiusbymember 的中心点是由给定的位置元素决定的， 而不是使用经度和纬度来决定中心点。</p><p>georadius 与 georadiusbymember 语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]</span><br><span class="line">GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>m ：米，默认单位。</li><li>km ：千米。</li><li>mi ：英里。</li><li>ft ：英尺。</li><li>WITHDIST: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。</li><li>WITHCOORD: 将位置元素的经度和维度也一并返回。</li><li>WITHHASH: 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。</li><li>COUNT 限定返回的记录数。</li><li>ASC: 查找结果根据距离从近到远排序。</li><li><p>DESC: 查找结果根据从远到近排序。</p><p><strong>georadius实例</strong>:</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS Sicily 15 37 200 km WITHDIST</span><br><span class="line">1) 1) &quot;Palermo&quot;</span><br><span class="line">   2) &quot;190.4424&quot;</span><br><span class="line">2) 1) &quot;Catania&quot;</span><br><span class="line">   2) &quot;56.4413&quot;</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS Sicily 15 37 200 km WITHCOORD</span><br><span class="line">1) 1) &quot;Palermo&quot;</span><br><span class="line">   2) 1) &quot;13.36138933897018433&quot;</span><br><span class="line">      2) &quot;38.11555639549629859&quot;</span><br><span class="line">2) 1) &quot;Catania&quot;</span><br><span class="line">   2) 1) &quot;15.08726745843887329&quot;</span><br><span class="line">      2) &quot;37.50266842333162032&quot;</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS Sicily 15 37 200 km WITHDIST WITHCOORD</span><br><span class="line">1) 1) &quot;Palermo&quot;</span><br><span class="line">   2) &quot;190.4424&quot;</span><br><span class="line">   3) 1) &quot;13.36138933897018433&quot;</span><br><span class="line">      2) &quot;38.11555639549629859&quot;</span><br><span class="line">2) 1) &quot;Catania&quot;</span><br><span class="line">   2) &quot;56.4413&quot;</span><br><span class="line">   3) 1) &quot;15.08726745843887329&quot;</span><br><span class="line">      2) &quot;37.50266842333162032&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p><strong>georadiusbymember实例</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOADD Sicily 13.583333 37.316667 &quot;Agrigento&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER Sicily Agrigento 100 km</span><br><span class="line">1) &quot;Agrigento&quot;</span><br><span class="line">2) &quot;Palermo&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-13-5-geohash"><a href="#4-13-5-geohash" class="headerlink" title="4.13.5 geohash"></a>4.13.5 geohash</h3><p>Redis GEO 使用 geohash 来保存地理位置的坐标。</p><p>geohash 用于获取一个或多个位置元素的 geohash 值。</p><p>geohash 语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOHASH key member [member ...]</span><br></pre></td></tr></table></figure><p><strong>geohash实例</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; GEOHASH Sicily Palermo Catania</span><br><span class="line">1) &quot;sqc8b49rny0&quot;</span><br><span class="line">2) &quot;sqdtr74hyu0&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h2 id="4-14-Stream"><a href="#4-14-Stream" class="headerlink" title="4.14 Stream"></a>4.14 Stream</h2><p>Redis Stream 是 Redis 5.0 版本新增加的数据结构。</p><p>Redis Stream 主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能，但它有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。</p><p>简单来说发布订阅 (pub/sub) 可以分发消息，但无法记录历史消息。</p><p>而 Redis Stream 提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。</p><p>Redis Stream 的结构如下所示，它有一个消息链表，将所有加入的消息都串起来，每个消息都有一个唯一的 ID 和对应的内容：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/RedisLearning_imgs/RedisLearning_imgs_RedisStream.png" style="zoom:50%;" /></p><p>每个 Stream 都有唯一的名称，它就是 Redis 的 key，在我们首次使用 xadd 指令追加消息时自动创建。</p><p>上图解析：</p><ul><li>Consumer Group ：消费组，使用 XGROUP CREATE 命令创建，一个消费组有多个消费者(Consumer)。</li><li>last<em>delivered</em>id ：游标，每个消费组会有个游标 last<em>delivered</em>id，任意一个消费者读取了消息都会使游标 last<em>delivered</em>id 往前移动。</li><li>pending<em>ids ：消费者(Consumer)的状态变量，作用是维护消费者的未确认的 id。 pending</em>ids 记录了当前已经被客户端读取的消息，但是还没有 ack (Acknowledge character：确认字符）。</li></ul><p>消息队列相关命令：</p><ul><li>XADD - 添加消息到末尾</li><li>XTRIM - 对流进行修剪，限制长度</li><li>XDEL - 删除消息</li><li>XLEN - 获取流包含的元素数量，即消息长度</li><li>XRANGE - 获取消息列表，会自动过滤已经删除的消息</li><li>XREVRANGE - 反向获取消息列表，ID 从大到小</li><li>XREAD - 以阻塞或非阻塞方式获取消息列表</li></ul><p>消费者组相关命令：</p><ul><li>XGROUP CREATE - 创建消费者组</li><li>XREADGROUP GROUP - 读取消费者组中的消息</li><li>XACK - 将消息标记为”已处理”</li><li>XGROUP SETID - 为消费者组设置新的最后递送消息ID</li><li>XGROUP DELCONSUMER - 删除消费者</li><li>XGROUP DESTROY - 删除消费者组</li><li>XPENDING - 显示待处理消息的相关信息</li><li>XCLAIM - 转移消息的归属权</li><li>XINFO - 查看流和消费者组的相关信息；</li><li>XINFO GROUPS - 打印消费者组的信息；</li><li>XINFO STREAM - 打印流信息</li></ul><h3 id="4-14-1-XADD"><a href="#4-14-1-XADD" class="headerlink" title="4.14.1 XADD"></a>4.14.1 XADD</h3><p>使用 <code>XADD</code> 向队列添加消息，如果指定的队列不存在，则创建一个队列，XADD 语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XADD key ID field value [field value ...]</span><br></pre></td></tr></table></figure><ul><li>key ：队列名称，如果不存在就创建</li><li>ID ：消息 id，我们使用 * 表示由 redis 生成，可以自定义，但是要自己保证递增性。</li><li>field value ： 记录。</li></ul><p><strong>XADD实例</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XADD mystream * name Sara surname OConnor</span><br><span class="line">&quot;1653077968353-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD mystream * field1 value1 field2 value2 field3 value3</span><br><span class="line">&quot;1653077976530-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XLEN mystream</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; XRANGE mystream - +</span><br><span class="line">1) 1) &quot;1653077968353-0&quot;</span><br><span class="line">   2) 1) &quot;name&quot;</span><br><span class="line">      2) &quot;Sara&quot;</span><br><span class="line">      3) &quot;surname&quot;</span><br><span class="line">      4) &quot;OConnor&quot;</span><br><span class="line">2) 1) &quot;1653077976530-0&quot;</span><br><span class="line">   2) 1) &quot;field1&quot;</span><br><span class="line">      2) &quot;value1&quot;</span><br><span class="line">      3) &quot;field2&quot;</span><br><span class="line">      4) &quot;value2&quot;</span><br><span class="line">      5) &quot;field3&quot;</span><br><span class="line">      6) &quot;value3&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-14-2-XTRIM"><a href="#4-14-2-XTRIM" class="headerlink" title="4.14.2 XTRIM"></a>4.14.2 XTRIM</h3><p>使用 <code>XTRIM</code>对流进行修剪，限制长度， 语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XTRIM key MAXLEN [~] count</span><br></pre></td></tr></table></figure><ul><li>key ：队列名称</li><li>MAXLEN ：长度</li><li>count ：数量</li></ul><p><strong>XTRIM实例</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XADD mystream * field1 A field2 B field3 C field4 D</span><br><span class="line">&quot;1653078272108-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XTRIM mystream MAXLEN 2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; XRANGE mystream - +</span><br><span class="line">1) 1) &quot;1653078272108-0&quot;</span><br><span class="line">   2) 1) &quot;field1&quot;</span><br><span class="line">      2) &quot;A&quot;</span><br><span class="line">      3) &quot;field2&quot;</span><br><span class="line">      4) &quot;B&quot;</span><br><span class="line">      5) &quot;field3&quot;</span><br><span class="line">      6) &quot;C&quot;</span><br><span class="line">      7) &quot;field4&quot;</span><br><span class="line">      8) &quot;D&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-14-3-XDEL"><a href="#4-14-3-XDEL" class="headerlink" title="4.14.3 XDEL"></a>4.14.3 XDEL</h3><p>使用 <code>XDEL</code> 删除消息，语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XDEL key ID [ID ...]</span><br></pre></td></tr></table></figure><ul><li>key：队列名称</li><li>ID ：消息 ID</li></ul><p><strong>XDEL实例</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XADD mystream * a 1</span><br><span class="line">1538561698944-0</span><br><span class="line">127.0.0.1:6379&gt; XADD mystream * b 2</span><br><span class="line">1538561700640-0</span><br><span class="line">127.0.0.1:6379&gt; XADD mystream * c 3</span><br><span class="line">1538561701744-0</span><br><span class="line">127.0.0.1:6379&gt; XDEL mystream 1538561700640-0</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; XRANGE mystream - +</span><br><span class="line">1) 1) 1538561698944-0</span><br><span class="line">   2) 1) &quot;a&quot;</span><br><span class="line">      2) &quot;1&quot;</span><br><span class="line">2) 1) 1538561701744-0</span><br><span class="line">   2) 1) &quot;c&quot;</span><br><span class="line">      2) &quot;3&quot;</span><br></pre></td></tr></table></figure><h3 id="4-14-4-XLEN"><a href="#4-14-4-XLEN" class="headerlink" title="4.14.4 XLEN"></a>4.14.4 XLEN</h3><p>使用 <code>XLEN</code> 获取流包含的元素数量，即消息长度，语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XLEN key</span><br></pre></td></tr></table></figure><ul><li>key：队列名称</li></ul><p><strong>XLEN实例</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XADD mystream * item 1</span><br><span class="line">&quot;1601372563177-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD mystream * item 2</span><br><span class="line">&quot;1601372563178-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD mystream * item 3</span><br><span class="line">&quot;1601372563178-1&quot;</span><br><span class="line">127.0.0.1:6379&gt; XLEN mystream</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-14-5-XRANGE"><a href="#4-14-5-XRANGE" class="headerlink" title="4.14.5 XRANGE"></a>4.14.5 XRANGE</h3><p>使用 XRANGE 获取消息列表，会自动过滤已经删除的消息 ，语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XRANGE key start end [COUNT count]</span><br></pre></td></tr></table></figure><ul><li>key ：队列名</li><li>start ：开始值， - 表示最小值</li><li>end ：结束值， + 表示最大值</li><li>count ：数量</li></ul><p><strong>实例</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XADD writers * name Virginia surname Woolf</span><br><span class="line">&quot;1601372577811-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD writers * name Jane surname Austen</span><br><span class="line">&quot;1601372577811-1&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD writers * name Toni surname Morrison</span><br><span class="line">&quot;1601372577811-2&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD writers * name Agatha surname Christie</span><br><span class="line">&quot;1601372577812-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD writers * name Ngozi surname Adichie</span><br><span class="line">&quot;1601372577812-1&quot;</span><br><span class="line">127.0.0.1:6379&gt; XLEN writers</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; XRANGE writers - + COUNT 2</span><br><span class="line">1) 1) &quot;1601372577811-0&quot;</span><br><span class="line">   2) 1) &quot;name&quot;</span><br><span class="line">   2) &quot;Virginia&quot;</span><br><span class="line">   3) &quot;surname&quot;</span><br><span class="line">   4) &quot;Woolf&quot;</span><br><span class="line">2) 1) &quot;1601372577811-1&quot;</span><br><span class="line">   2) 1) &quot;name&quot;</span><br><span class="line">   2) &quot;Jane&quot;</span><br><span class="line">   3) &quot;surname&quot;</span><br><span class="line">   4) &quot;Austen&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-14-6-XREVRANGE"><a href="#4-14-6-XREVRANGE" class="headerlink" title="4.14.6 XREVRANGE"></a>4.14.6 XREVRANGE</h3><p>使用 <code>XREVRANGE</code> 获取消息列表，会自动过滤已经删除的消息 ，语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XREVRANGE key end start [COUNT count]</span><br></pre></td></tr></table></figure><ul><li>key ：队列名</li><li>end ：结束值， + 表示最大值</li><li>start ：开始值， - 表示最小值</li><li>count ：数量</li></ul><p><strong>XREVRANGE实例</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XADD writers * name Virginia surname Woolf</span><br><span class="line">&quot;1601372731458-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD writers * name Jane surname Austen</span><br><span class="line">&quot;1601372731459-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD writers * name Toni surname Morrison</span><br><span class="line">&quot;1601372731459-1&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD writers * name Agatha surname Christie</span><br><span class="line">&quot;1601372731459-2&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD writers * name Ngozi surname Adichie</span><br><span class="line">&quot;1601372731459-3&quot;</span><br><span class="line">127.0.0.1:6379&gt; XLEN writers</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; XREVRANGE writers + - COUNT 1</span><br><span class="line">1) 1) &quot;1601372731459-3&quot;</span><br><span class="line">   2) 1) &quot;name&quot;</span><br><span class="line">   2) &quot;Ngozi&quot;</span><br><span class="line">   3) &quot;surname&quot;</span><br><span class="line">   4) &quot;Adichie&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-14-7-XREAD"><a href="#4-14-7-XREAD" class="headerlink" title="4.14.7 XREAD"></a>4.14.7 XREAD</h3><p>使用 XREAD 以阻塞或非阻塞方式获取消息列表 ，语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id [id ...]</span><br></pre></td></tr></table></figure><ul><li>count ：数量</li><li>milliseconds ：可选，阻塞毫秒数，没有设置就是非阻塞模式</li><li>key ：队列名</li><li>id ：消息 ID</li></ul><p><strong>实例</strong>: 从 Stream 头部读取两条消息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XREAD COUNT 2 STREAMS mystream writers 0-0 0-0</span><br><span class="line">1) 1) &quot;mystream&quot;</span><br><span class="line">  2) 1) 1) 1526984818136-0</span><br><span class="line">     2) 1) &quot;duration&quot;</span><br><span class="line">      2) &quot;1532&quot;</span><br><span class="line">      3) &quot;event-id&quot;</span><br><span class="line">      4) &quot;5&quot;</span><br><span class="line">      5) &quot;user-id&quot;</span><br><span class="line">      6) &quot;7782813&quot;</span><br><span class="line">   2) 1) 1526999352406-0</span><br><span class="line">     2) 1) &quot;duration&quot;</span><br><span class="line">      2) &quot;812&quot;</span><br><span class="line">      3) &quot;event-id&quot;</span><br><span class="line">      4) &quot;9&quot;</span><br><span class="line">      5) &quot;user-id&quot;</span><br><span class="line">      6) &quot;388234&quot;</span><br><span class="line">2) 1) &quot;writers&quot;</span><br><span class="line">  2) 1) 1) 1526985676425-0</span><br><span class="line">     2) 1) &quot;name&quot;</span><br><span class="line">      2) &quot;Virginia&quot;</span><br><span class="line">      3) &quot;surname&quot;</span><br><span class="line">      4) &quot;Woolf&quot;</span><br><span class="line">   2) 1) 1526985685298-0</span><br><span class="line">     2) 1) &quot;name&quot;</span><br><span class="line">      2) &quot;Jane&quot;</span><br><span class="line">      3) &quot;surname&quot;</span><br><span class="line">      4) &quot;Austen&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="4-14-8-XGROUP-CREATE"><a href="#4-14-8-XGROUP-CREATE" class="headerlink" title="4.14.8 XGROUP CREATE"></a>4.14.8 XGROUP CREATE</h3><p>使用 XGROUP CREATE 创建消费者组，语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XGROUP [CREATE key groupname id-or-$] [SETID key groupname id-or-$] [DESTROY key groupname] [DELCONSUMER key groupname consumername]</span><br></pre></td></tr></table></figure><ul><li>key ：队列名称，如果不存在就创建</li><li>groupname ：组名。</li><li>$ ： 表示从尾部开始消费，只接受新消息，当前 Stream 消息会全部忽略。</li></ul><p>从头开始消费:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XGROUP CREATE mystream consumer-group-name 0-0  </span><br></pre></td></tr></table></figure><p>从尾部开始消费:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XGROUP CREATE mystream consumer-group-name $</span><br></pre></td></tr></table></figure><h3 id="4-14-9-XREADGROUP-GROUP"><a href="#4-14-9-XREADGROUP-GROUP" class="headerlink" title="4.14.9 XREADGROUP GROUP"></a>4.14.9 XREADGROUP GROUP</h3><p>使用 XREADGROUP GROUP 读取消费组中的消息，语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]</span><br></pre></td></tr></table></figure><ul><li>group ：消费组名</li><li>consumer ：消费者名。</li><li>count ： 读取数量。</li><li>milliseconds ： 阻塞毫秒数。</li><li>key ： 队列名。</li><li>ID ： 消息 ID。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XREADGROUP GROUP consumer-group-name consumer-name COUNT 1 STREAMS mystream &gt;</span><br></pre></td></tr></table></figure><h1 id="5-Redis-高级功能"><a href="#5-Redis-高级功能" class="headerlink" title="5. Redis 高级功能"></a>5. Redis 高级功能</h1><h2 id="5-1-redis备份和恢复"><a href="#5-1-redis备份和恢复" class="headerlink" title="5.1 redis备份和恢复"></a>5.1 redis备份和恢复</h2><p>SAVE 命令用于创建当前 Redis 数据库的备份。此命令将通过执行同步 SAVE 在 Redis 目录中创建 dump.rdb 文件。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SAVE</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值</strong>:</p><p>执行成功后，SAVE 命令返回 OK。</p></li></ul><h3 id="5-1-1-Redis备份示例"><a href="#5-1-1-Redis备份示例" class="headerlink" title="5.1.1 Redis备份示例"></a>5.1.1 Redis备份示例</h3><p>使用 SAVE 命令创建当前数据库的备份。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SAVE</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>它将在 Redis 目录中创建 dump.rdb 文件。</p><p>可以看到 dump.rdb 文件已创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@192 redis-6.2.6]# ls</span><br><span class="line">00-RELEASENOTES  COPYING   MANIFESTO        runtest-moduleapi  TLS.md</span><br><span class="line">appendonly.aof   deps      README.md        runtest-sentinel   utils</span><br><span class="line">BUGS             dump.rdb  redis.conf       sentinel.conf</span><br><span class="line">CONDUCT          INSTALL   runtest          src</span><br><span class="line">CONTRIBUTING     Makefile  runtest-cluster  tests</span><br><span class="line">[root@192 redis-6.2.6]# </span><br></pre></td></tr></table></figure><h3 id="5-1-2-还原Redis数据"><a href="#5-1-2-还原Redis数据" class="headerlink" title="5.1.2 还原Redis数据"></a>5.1.2 还原Redis数据</h3><p>将 Redis 备份文件（dump.rdb）移动到 Redis 目录中并启动服务器以恢复 Redis 数据。</p><p>查找 Redis 的安装目录，使用 Redis 的 CONFIG 命令，如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG get dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/opt/software/redis-6.2.6&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>Redis 服务器安装在<code>/opt/software/redis-6.2.6</code>目录中。</p><h3 id="5-1-3-BGSAVE命令"><a href="#5-1-3-BGSAVE命令" class="headerlink" title="5.1.3 BGSAVE命令"></a>5.1.3 BGSAVE命令</h3><p>BGSAVE 是创建 Redis 备份的备用命令。</p><p>此命令将启动备份过程并在后台运行。</p><ul><li><p><strong>语法</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BGSAVE</span><br></pre></td></tr></table></figure></li><li><p><strong>实例</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@192 redis-6.2.6]# src/redis-cli -a yanpenggong</span><br><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; CONFIG get dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/opt/software/redis-6.2.6&quot;</span><br><span class="line">127.0.0.1:6379&gt; BGSAVE</span><br><span class="line">Background saving started</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><h2 id="5-2-Redis-持久化"><a href="#5-2-Redis-持久化" class="headerlink" title="5.2  Redis 持久化"></a>5.2  Redis 持久化</h2><p>redis 提供了两种持久化的方式，分别是<strong>RDB</strong>（Redis DataBase）和<strong>AOF</strong>（Append Only File）。</p><p>RDB，简而言之，就是在不同的时间点，将 redis 存储的数据生成快照并存储到磁盘等介质上；</p><p>AOF，则是换了一个角度来实现持久化，那就是将 redis 执行过的所有写指令记录下来，在下次 redis 重新启动时，只要把这些写指令从前到后再重复执行一遍，就可以实现数据恢复了。</p><p>其实 RDB 和 AOF 两种方式也可以同时使用，在这种情况下，如果 redis 重启的话，则会优先采用 AOF 方式来进行数据恢复，这是因为 AOF 方式的数据恢复完整度更高。</p><p>如果你没有数据持久化的需求，也完全可以关闭 RDB 和 AOF 方式，这样的话，redis 将变成一个纯内存数据库，就像 memcache 一样。</p><h3 id="5-2-1-redis持久化RDB"><a href="#5-2-1-redis持久化RDB" class="headerlink" title="5.2.1 redis持久化RDB"></a>5.2.1 redis持久化RDB</h3><p>RDB 方式，是将 redis 某一时刻的数据持久化到磁盘中，是一种快照式的持久化方法。</p><p>redis 在进行数据持久化的过程中，会先将数据写入到一个临时文件中，待持久化过程都结束了，才会用这个临时文件替换上次持久化好的文件。正是这种特性，让我们可以随时来进行备份，因为快照文件总是完整可用的。</p><p>对于 RDB 方式，redis 会单独创建（fork）一个子进程来进行持久化，而主进程是不会进行任何 IO 操作的，这样就确保了 redis 极高的性能。</p><p>如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。</p><p>虽然 RDB 有不少优点，但它的缺点也是不容忽视的。如果你对数据的完整性非常敏感，那么 RDB 方式就不太适合你，因为即使你每 5 分钟都持久化一次，当 redis 故障时，仍然会有近 5 分钟的数据丢失。所以，redis 还提供了另一种持久化方式，那就是 AOF。</p><h3 id="5-2-2-redis持久化-AOF"><a href="#5-2-2-redis持久化-AOF" class="headerlink" title="5.2.2 redis持久化 AOF"></a>5.2.2 redis持久化 AOF</h3><p>AOF，英文是 Append Only File，即只允许追加不允许改写的文件。</p><p>如前面介绍的，AOF 方式是将执行过的写指令记录下来，在数据恢复时按照从前到后的顺序再将指令都执行一遍，就这么简单。</p><p>我们通过配置 redis.conf 中的 appendonly yes 就可以打开 AOF 功能。如果有写操作（如 SET 等），redis 就会被追加到 AOF 文件的末尾。</p><p>默认的 AOF 持久化策略是每秒钟 fsync 一次（fsync 是指把缓存中的写指令记录到磁盘中），因为在这种情况下，redis 仍然可以保持很好的处理性能，即使 redis 故障，也只会丢失最近 1 秒钟的数据。</p><p>如果在追加日志时，恰好遇到磁盘空间满、inode 满或断电等情况导致日志写入不完整，也没有关系，redis 提供了 redis-check-aof 工具，可以用来进行日志修复。</p><p>因为采用了追加方式，如果不做任何处理的话，AOF 文件会变得越来越大，为此，redis 提供了 AOF 文件重写（rewrite）机制，即当 AOF 文件的大小超过所设定的阈值时，redis 就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集。举个例子或许更形象，假如我们调用了 100 次 INCR 指令，在 AOF 文件中就要存储 100 条指令，但这明显是很低效的，完全可以把这 100 条指令合并成一条 SET 指令，这就是重写机制的原理。</p><p>在进行 AOF 重写时，仍然是采用先写临时文件，全部完成后再替换的流程，所以断电、磁盘满等问题都不会影响 AOF 文件的可用性，这点大家可以放心。</p><p>AOF 方式的另一个好处，我们通过一个“场景再现”来说明。某同学在操作 redis 时，不小心执行了 FLUSHALL，导致 redis 内存中的数据全部被清空了，这是很悲剧的事情。不过这也不是世界末日，只要 redis 配置了 AOF 持久化方式，且 AOF 文件还没有被重写（rewrite），我们就可以用最快的速度暂停 redis 并编辑 AOF 文件，将最后一行的 FLUSHALL 命令删除，然后重启 redis，就可以恢复 redis 的所有数据到 FLUSHALL 之前的状态了。是不是很神奇，这就是 AOF 持久化方式的好处之一。但是如果 AOF 文件已经被重写了，那就无法通过这种方法来恢复数据了。</p><p>虽然优点多多，但 AOF 方式也同样存在缺陷，比如在同样数据规模的情况下，AOF 文件要比 RDB 文件的体积大。而且，AOF 方式的恢复速度也要慢于 RDB 方式。</p><p>如果你直接执行 BGREWRITEAOF 命令，那么 redis 会生成一个全新的 AOF 文件，其中便包括了可以恢复现有数据的最少的命令集。</p><p>如果运气比较差，AOF 文件出现了被写坏的情况，也不必过分担忧，redis 并不会贸然加载这个有问题的 AOF 文件，而是报错退出。这时可以通过以下步骤来修复出错的文件：</p><ol><li>备份被写坏的 AOF 文件</li><li>运行 redis-check-aof –fix 进行修复</li><li>用 diff -u 来看下两个文件的差异，确认问题点</li><li>重启 redis，加载修复后的 AOF 文件</li></ol><h3 id="5-2-3-redis持久化-–-AOF重写"><a href="#5-2-3-redis持久化-–-AOF重写" class="headerlink" title="5.2.3 redis持久化 – AOF重写"></a>5.2.3 redis持久化 – AOF重写</h3><p>AOF 重写的内部运行原理，我们有必要了解一下。</p><p>在重写即将开始之际，redis 会创建（fork）一个“重写子进程”，这个子进程会首先读取现有的 AOF 文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。</p><p>与此同时，主工作进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的 AOF 文件中，这样做是保证原有的 AOF 文件的可用性，避免在重写过程中出现意外。</p><p>当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新 AOF 文件中。</p><p>当追加结束后，redis 就会用新 AOF 文件来代替旧 AOF 文件，之后再有新的写指令，就都会追加到新的 AOF 文件中了。</p><h3 id="5-2-4-redis持久化-–-如何选择RDB和AOF"><a href="#5-2-4-redis持久化-–-如何选择RDB和AOF" class="headerlink" title="5.2.4 redis持久化 – 如何选择RDB和AOF"></a>5.2.4 redis持久化 – 如何选择RDB和AOF</h3><p>对于我们应该选择 RDB 还是 AOF，官方的建议是两个同时使用。这样可以提供更可靠的持久化方案。</p><h2 id="5-3-redis安全"><a href="#5-3-redis安全" class="headerlink" title="5.3 redis安全"></a>5.3 redis安全</h2><p>对于数据库来说，安全性是非常必要的，以确保数据的安全性。它提供身份验证，因此如果客户端想要建立连接，则需要在执行命令之前进行身份验证。</p><p>需要在配置文件中设置密码以保护 Redis 数据库。</p><p><strong>实例</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class="line">1) &quot;requirepass&quot;</span><br><span class="line">2) &quot;&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>可以看到上面的属性为空，表示没有此实例的任何密码。</p><p>可以通过执行以下命令来更改此属性并为此实例设置密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG set requirepass &quot;yanpenggong&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; quit</span><br><span class="line">[root@192 redis-6.2.6]# src/redis-cli</span><br><span class="line">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>设置此密码时，如果客户端在未经身份验证的情况下运行该命令，则会收到错误“NOAUTH Authentication required。”。因此，客户端需要使用 AUTH 命令来验证自己。</p><h3 id="5-3-1-AUTH命令的用法"><a href="#5-3-1-AUTH命令的用法" class="headerlink" title="5.3.1  AUTH命令的用法"></a>5.3.1  AUTH命令的用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; AUTH &quot;yanpenggong&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET myset &quot;Hello World&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET myset</span><br><span class="line">&quot;Hello World&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h2 id="5-4-Redis-基准"><a href="#5-4-Redis-基准" class="headerlink" title="5.4 Redis 基准"></a>5.4 Redis 基准</h2><p>Redis 基准测试 redis-benchmark 是一种实用工具，用于通过同时使用 multiple(n) 命令来检查 Redis 的性能。</p><ul><li><p><strong>语法</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark [option] [option value]</span><br></pre></td></tr></table></figure></li><li><p><strong>实例</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">[root@192 redis-6.2.6]# src/redis-benchmark -n 100000 -a yanpenggong</span><br><span class="line">====== PING_INLINE ======                                                 </span><br><span class="line">  100000 requests completed in 15.49 seconds</span><br><span class="line">  50 parallel clients</span><br><span class="line">  3 bytes payload</span><br><span class="line">  keep alive: 1</span><br><span class="line">  host configuration &quot;save&quot;: 900 1 300 10 60 10000</span><br><span class="line">  host configuration &quot;appendonly&quot;: no</span><br><span class="line">  multi-thread: no</span><br><span class="line"></span><br><span class="line">Latency by percentile distribution:</span><br><span class="line">0.000% &lt;= 2.807 milliseconds (cumulative count 1)</span><br><span class="line">50.000% &lt;= 5.791 milliseconds (cumulative count 50175)</span><br><span class="line">75.000% &lt;= 6.711 milliseconds (cumulative count 75143)</span><br><span class="line">87.500% &lt;= 7.351 milliseconds (cumulative count 87511)</span><br><span class="line">93.750% &lt;= 8.007 milliseconds (cumulative count 93796)</span><br><span class="line">96.875% &lt;= 8.671 milliseconds (cumulative count 96890)</span><br><span class="line">98.438% &lt;= 9.351 milliseconds (cumulative count 98442)</span><br><span class="line">99.219% &lt;= 10.039 milliseconds (cumulative count 99219)</span><br><span class="line">99.609% &lt;= 10.783 milliseconds (cumulative count 99613)</span><br><span class="line">99.805% &lt;= 11.319 milliseconds (cumulative count 99807)</span><br><span class="line">99.902% &lt;= 11.999 milliseconds (cumulative count 99903)</span><br><span class="line">99.951% &lt;= 13.351 milliseconds (cumulative count 99952)</span><br><span class="line">99.976% &lt;= 16.463 milliseconds (cumulative count 99976)</span><br><span class="line">99.988% &lt;= 29.823 milliseconds (cumulative count 99988)</span><br><span class="line">99.994% &lt;= 30.511 milliseconds (cumulative count 99994)</span><br><span class="line">99.997% &lt;= 30.735 milliseconds (cumulative count 99997)</span><br><span class="line">99.998% &lt;= 30.911 milliseconds (cumulative count 99999)</span><br><span class="line">99.999% &lt;= 31.023 milliseconds (cumulative count 100000)</span><br><span class="line">100.000% &lt;= 31.023 milliseconds (cumulative count 100000)</span><br><span class="line"></span><br><span class="line">Cumulative distribution of latencies:</span><br><span class="line">0.000% &lt;= 0.103 milliseconds (cumulative count 0)</span><br><span class="line">0.007% &lt;= 3.103 milliseconds (cumulative count 7)</span><br><span class="line">8.508% &lt;= 4.103 milliseconds (cumulative count 8508)</span><br><span class="line">32.111% &lt;= 5.103 milliseconds (cumulative count 32111)</span><br><span class="line">58.966% &lt;= 6.103 milliseconds (cumulative count 58966)</span><br><span class="line">83.729% &lt;= 7.103 milliseconds (cumulative count 83729)</span><br><span class="line">94.418% &lt;= 8.103 milliseconds (cumulative count 94418)</span><br><span class="line">98.012% &lt;= 9.103 milliseconds (cumulative count 98012)</span><br><span class="line">99.266% &lt;= 10.103 milliseconds (cumulative count 99266)</span><br><span class="line">99.737% &lt;= 11.103 milliseconds (cumulative count 99737)</span><br><span class="line">99.915% &lt;= 12.103 milliseconds (cumulative count 99915)</span><br><span class="line">99.948% &lt;= 13.103 milliseconds (cumulative count 99948)</span><br><span class="line">99.956% &lt;= 14.103 milliseconds (cumulative count 99956)</span><br><span class="line">99.962% &lt;= 15.103 milliseconds (cumulative count 99962)</span><br><span class="line">99.970% &lt;= 16.103 milliseconds (cumulative count 99970)</span><br><span class="line">99.979% &lt;= 17.103 milliseconds (cumulative count 99979)</span><br><span class="line">99.980% &lt;= 29.103 milliseconds (cumulative count 99980)</span><br><span class="line">99.991% &lt;= 30.111 milliseconds (cumulative count 99991)</span><br><span class="line">100.000% &lt;= 31.103 milliseconds (cumulative count 100000)</span><br><span class="line"></span><br><span class="line">Summary:</span><br><span class="line">  throughput summary: 6454.53 requests per second</span><br><span class="line">  latency summary (msec):</span><br><span class="line">          avg       min       p50       p95       p99       max</span><br><span class="line">        5.870     2.800     5.791     8.207     9.807    31.023</span><br><span class="line">====== PING_MBULK ======                                                 </span><br><span class="line">  100000 requests completed in 15.45 seconds</span><br><span class="line">  50 parallel clients</span><br><span class="line">  3 bytes payload</span><br><span class="line">  keep alive: 1</span><br><span class="line">  host configuration &quot;save&quot;: 900 1 300 10 60 10000</span><br><span class="line">  host configuration &quot;appendonly&quot;: no</span><br><span class="line">  multi-thread: no</span><br><span class="line"></span><br><span class="line">Latency by percentile distribution:</span><br><span class="line">0.000% &lt;= 2.351 milliseconds (cumulative count 1)</span><br><span class="line">50.000% &lt;= 5.727 milliseconds (cumulative count 50067)</span><br><span class="line">75.000% &lt;= 6.671 milliseconds (cumulative count 75131)</span><br><span class="line">87.500% &lt;= 7.415 milliseconds (cumulative count 87505)</span><br><span class="line">93.750% &lt;= 8.263 milliseconds (cumulative count 93781)</span><br><span class="line">96.875% &lt;= 9.119 milliseconds (cumulative count 96886)</span><br><span class="line">98.438% &lt;= 9.871 milliseconds (cumulative count 98438)</span><br><span class="line">99.219% &lt;= 10.567 milliseconds (cumulative count 99221)</span><br><span class="line">99.609% &lt;= 11.207 milliseconds (cumulative count 99611)</span><br><span class="line">99.805% &lt;= 11.863 milliseconds (cumulative count 99805)</span><br><span class="line">99.902% &lt;= 12.575 milliseconds (cumulative count 99904)</span><br><span class="line">99.951% &lt;= 13.471 milliseconds (cumulative count 99952)</span><br><span class="line">99.976% &lt;= 14.479 milliseconds (cumulative count 99976)</span><br><span class="line">99.988% &lt;= 15.255 milliseconds (cumulative count 99988)</span><br><span class="line">99.994% &lt;= 15.703 milliseconds (cumulative count 99994)</span><br><span class="line">99.997% &lt;= 16.303 milliseconds (cumulative count 99997)</span><br><span class="line">99.998% &lt;= 16.479 milliseconds (cumulative count 99999)</span><br><span class="line">99.999% &lt;= 16.607 milliseconds (cumulative count 100000)</span><br><span class="line">100.000% &lt;= 16.607 milliseconds (cumulative count 100000)</span><br><span class="line"></span><br><span class="line">Cumulative distribution of latencies:</span><br><span class="line">0.000% &lt;= 0.103 milliseconds (cumulative count 0)</span><br><span class="line">0.014% &lt;= 3.103 milliseconds (cumulative count 14)</span><br><span class="line">9.664% &lt;= 4.103 milliseconds (cumulative count 9664)</span><br><span class="line">33.922% &lt;= 5.103 milliseconds (cumulative count 33922)</span><br><span class="line">60.409% &lt;= 6.103 milliseconds (cumulative count 60409)</span><br><span class="line">83.670% &lt;= 7.103 milliseconds (cumulative count 83670)</span><br><span class="line">92.958% &lt;= 8.103 milliseconds (cumulative count 92958)</span><br><span class="line">96.842% &lt;= 9.103 milliseconds (cumulative count 96842)</span><br><span class="line">98.776% &lt;= 10.103 milliseconds (cumulative count 98776)</span><br><span class="line">99.566% &lt;= 11.103 milliseconds (cumulative count 99566)</span><br><span class="line">99.843% &lt;= 12.103 milliseconds (cumulative count 99843)</span><br><span class="line">99.937% &lt;= 13.103 milliseconds (cumulative count 99937)</span><br><span class="line">99.968% &lt;= 14.103 milliseconds (cumulative count 99968)</span><br><span class="line">99.985% &lt;= 15.103 milliseconds (cumulative count 99985)</span><br><span class="line">99.996% &lt;= 16.103 milliseconds (cumulative count 99996)</span><br><span class="line">100.000% &lt;= 17.103 milliseconds (cumulative count 100000)</span><br><span class="line"></span><br><span class="line">Summary:</span><br><span class="line">  throughput summary: 6472.91 requests per second</span><br><span class="line">  latency summary (msec):</span><br><span class="line">          avg       min       p50       p95       p99       max</span><br><span class="line">        5.858     2.344     5.727     8.551    10.319    16.607</span><br><span class="line">SET: rps=7171.3 (overall: 5609.2) avg_msec=5.378 (overall: 6.777)</span><br></pre></td></tr></table></figure></li><li><p><strong>redis 性能测试工具可选参数</strong></p><p>| 序号 | 选项  | 描述                                       | 默认值    |<br>| —— | ——- | ————————————————————— | ————- |<br>| 1    | -h    | 指定服务器主机名                           | 127.0.0.1 |<br>| 2    | -p    | 指定服务器端口                             | 6379      |<br>| 3    | -s    | 指定服务器 socket                          |           |<br>| 4    | -c    | 指定并发连接数                             | 50        |<br>| 5    | -n    | 指定请求数                                 | 10000     |<br>| 6    | -d    | 以字节的形式指定 SET/GET 值的数据大小      | 2         |<br>| 7    | -k    | 1=keep alive 0=reconnect                   | 1         |<br>| 8    | -r    | SET/GET/INCR 使用随机 key, SADD 使用随机值 |           |<br>| 9    | -P    | 通过管道传输 <numreq> 请求                 | 1         |<br>| 10   | -q    | 强制退出 redis。仅显示 query/sec 值        |           |<br>| 11   | —csv | 以 CSV 格式输出                            |           |<br>| 12   | -l    | 生成循环，永久执行测试                     |           |<br>| 13   | -t    | 仅运行以逗号分隔的测试命令列表             |           |<br>| 14   | -I    | Idle 模式。仅打开 N 个 idle 连接并等待     |           |</p><p><strong>实例</strong>:</p><p>以下实例使用了多个参数来测试 redis 性能：主机为 127.0.0.1，端口号为 6379，执行的命令为 set,lpush，请求数为 10000，通过 -q 参数让结果只显示每秒执行的请求数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@192 redis-6.2.6]# src/redis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 100000 -q -a yanpenggong</span><br><span class="line">SET: 6676.46 requests per second, p50=5.639 msec                  </span><br><span class="line">LPUSH: 6538.51 requests per second, p50=5.775 msec                  </span><br><span class="line"></span><br><span class="line">[root@192 redis-6.2.6]# </span><br></pre></td></tr></table></figure></li></ul><h2 id="5-5-Redis客户端连接"><a href="#5-5-Redis客户端连接" class="headerlink" title="5.5 Redis客户端连接"></a>5.5 Redis客户端连接</h2><p>Redis 可以在配置的监听 TCP 端口和 Unix 套接字上接受不同类型的客户端连接。</p><p>接受新客户端连接时，它将执行以下操作：</p><ul><li>由于 Redis 使用多路复用和非阻塞 I/O，因此客户端套接字处于非阻塞状态。</li><li>设置 TCP_NODELAY 选项是为了确保我们的连接没有延迟。</li><li>创建可读文件事件，以便一旦可以在套接字上读取新数据，Redis 就能够收集客户端查询。</li></ul><h3 id="5-5-1-最大客户端数"><a href="#5-5-1-最大客户端数" class="headerlink" title="5.5.1 最大客户端数"></a>5.5.1 最大客户端数</h3><p>在 Redis config（redis.conf）中，有一个名为 <code>maxclients</code> 的属性，它指定可以连接到 Redis 的客户端数量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@192 redis-6.2.6]# src/redis-cli -a yanpenggong</span><br><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; CONFIG get maxclients</span><br><span class="line">1) &quot;maxclients&quot;</span><br><span class="line">2) &quot;10000&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>最大客户端数取决于 OS 的最大文件描述符数限制。它的默认值为 10000，但您可以更改此属性。</p><p><strong>实例</strong>: 在启动服务器时将最大客户端数设置为 100000。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 redis-6.2.6]# src/redis-server --maxclients 100000</span><br></pre></td></tr></table></figure><h3 id="5-5-2-Redis-客户端命令"><a href="#5-5-2-Redis-客户端命令" class="headerlink" title="5.5.2  Redis 客户端命令"></a>5.5.2  Redis 客户端命令</h3><div class="table-container"><table><thead><tr><th>序号</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><a href="#CLIENT LIST"><code>CLIENT LIST</code></a></td><td>返回连接到 redis 服务的客户端列表</td></tr><tr><td>2</td><td><a href="#CLIENT SETNAME"><code>CLIENT SETNAME</code></a></td><td>设置当前连接的名称</td></tr><tr><td>3</td><td><a href="#CLIENT GETNAME"><code>CLIENT GETNAME</code></a></td><td>获取通过 CLIENT SETNAME 命令设置的服务名称</td></tr><tr><td>4</td><td><a href="#CLIENT PAUSE"><code>CLIENT PAUSE</code></a></td><td>挂起客户端连接，指定挂起的时间以毫秒计</td></tr><tr><td>5</td><td><a href="#CLIENT KILL"><code>CLIENT KILL</code></a></td><td>关闭客户端连接</td></tr></tbody></table></div><h2 id="5-6-Redis-Pipelining-流水线"><a href="#5-6-Redis-Pipelining-流水线" class="headerlink" title="5.6 Redis Pipelining 流水线"></a>5.6 Redis Pipelining 流水线</h2><p>在了解流水线之前，首先要了解 Redis 的概念：</p><p>Redis 是一个支持请求/响应协议的 TCP 服务器。在 Redis 中，请求分两步完成：</p><ul><li>客户端通常以阻塞方式向服务器发送命令。</li><li>服务器处理该命令并将响应发送回客户端。</li></ul><h3 id="5-6-1-什么是流水线"><a href="#5-6-1-什么是流水线" class="headerlink" title="5.6.1 什么是流水线"></a>5.6.1 什么是流水线</h3><p>流水线操作有助于客户端向服务器发送多个请求，而无需等待回复，最后只需一步即可读取回复。</p><p><strong>例</strong>: 向 Redis 提交一次命令，Redis 将在一个步骤中提供所有命令的输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 redis-6.2.6]# (echo -en  “PING\r\n SET sssit javatraining\r\n GET sssit\r\n INCR visitor\r\n INCR visitor\r\n INCR visitor\r\n” ; sleep  10 ) | nc localhost 6379 </span><br></pre></td></tr></table></figure><p>这里：</p><ul><li>PING 命令用于检查 Redis 连接。</li><li>设置名为“sssit”的字符串，其值为“javatraining”。</li><li>获得了 key 值并将访问者数量增加了三倍。</li></ul><p>每次增加值时都可以看到。</p><h3 id="5-6-2-流水线的优势"><a href="#5-6-2-流水线的优势" class="headerlink" title="5.6.2 流水线的优势"></a>5.6.2 流水线的优势</h3><p>Redis 流水线操作的主要优点是提高了 Redis 的性能。由于多个命令同时执行，它极大地提高了协议性能。</p><h3 id="5-6-3-Pipelining-vs-Scripting"><a href="#5-6-3-Pipelining-vs-Scripting" class="headerlink" title="5.6.3 Pipelining vs Scripting"></a>5.6.3 Pipelining vs Scripting</h3><p>Redis Scripting 可在 Redis 2.6 或更高版本中使用。</p><p>脚本的主要优点是它可以以最小的延迟同时读取和写入数据。它使读取，计算，写入等操作变得非常快。</p><p>在流水线操作中，客户端在调用 write 命令之前需要 read 命令的回复。</p><h2 id="5-7-redis分区"><a href="#5-7-redis分区" class="headerlink" title="5.7 redis分区"></a>5.7 redis分区</h2><p>分区用于将 Redis 数据拆分为多个 Redis 实例，以便每个实例仅包含一部分 key。</p><p>它通常用于大型数据库。</p><h3 id="5-7-1-分区类型"><a href="#5-7-1-分区类型" class="headerlink" title="5.7.1 分区类型"></a>5.7.1 分区类型</h3><p>redis 中有两种类型的分区：</p><ul><li>范围分区</li><li>哈希分区</li></ul><h3 id="5-7-2-范围分区"><a href="#5-7-2-范围分区" class="headerlink" title="5.7.2 范围分区"></a>5.7.2 范围分区</h3><p>范围分区是执行分区的最简单方法之一。它通过将对象的范围映射到特定的 Redis 实例来完成。</p><p><strong>例如：</strong></p><p>假设您有 3000 个用户。因此，您可以说从 ID 0 到 ID 1000 的用户将进入实例 R0，而用户表单 ID 1001 到 ID 2000 将进入实例 R1，用户表单 ID 2001 到 ID 3000 将进入实例 R2，依此类推。</p><h3 id="5-7-3-哈希分区"><a href="#5-7-3-哈希分区" class="headerlink" title="5.7.3 哈希分区"></a>5.7.3 哈希分区</h3><p>散列分区是 Range 分区的替代方法。在散列分区中，散列函数用于将 key 转换为数字，然后将数据存储在不同的 Redis 实例中。</p><h3 id="5-7-4-Redis分区的优点"><a href="#5-7-4-Redis分区的优点" class="headerlink" title="5.7.4 Redis分区的优点"></a>5.7.4 Redis分区的优点</h3><ul><li>分区有助于您使用多台计算机的集体内存。例如：对于较大的数据库，您需要大量内存，因此分区可以提供来自不同计算机的内存总和。如果不进行分区，则只能使用单台计算机可以支持的有限内存量。</li><li>分区还用于将计算能力扩展到多个核心和多个计算机，以及网络带宽扩展到多个计算机和网络适配器。</li></ul><h3 id="5-7-5-Redis分区的缺点"><a href="#5-7-5-Redis分区的缺点" class="headerlink" title="5.7.5 Redis分区的缺点"></a>5.7.5 Redis分区的缺点</h3><p>分区存在一些缺点，因为 Redis 的某些功能受到分区的阻碍。</p><ul><li>分区通常不支持具有多个键的操作。例如，如果两个集合存储在映射到不同 Redis 实例的键中，则无法执行它们之间的交集。</li><li>分区不支持具有多个 key 的事务。</li><li>分区粒度是关键，因此不可能使用单个巨大的 key（如非常大的有序集）对数据集进行分片。</li><li>使用分区时，数据处理更复杂，例如，您必须处理多个 RDB / AOF 文件，并且需要从多个实例和主机聚合持久性文件来备份数据。</li><li>添加和删除容量可能很复杂。例如，Redis Cluster 支持大多数透明的数据重新平衡，能够在运行时添加和删除节点，但客户端分区和代理等其他系统不支持此功能。然而，一种称为预分片的技术在这方面有所帮助。</li></ul><h1 id="Redis命令手册"><a href="#Redis命令手册" class="headerlink" title="Redis命令手册"></a>Redis命令手册</h1><h2 id="1-命令集合"><a href="#1-命令集合" class="headerlink" title="1. 命令集合"></a>1. <a id="命令集合">命令集合</a></h2><h3 id="1-1-Key-键"><a href="#1-1-Key-键" class="headerlink" title="1.1 Key(键)"></a>1.1 <strong>Key(键)</strong></h3><h4 id="1-1-1-DEL-key"><a href="#1-1-1-DEL-key" class="headerlink" title="1.1.1 DEL key"></a>1.1.1 <strong><a id="DEL">DEL key</a></strong></h4><p>Redis DEL 命令用于删除给定的一个或多个 <code>key</code> 。不存在的 <code>key</code> 会被忽略。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DEL KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 被删除 key 的数量。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set kungs1 &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set kungs2 &quot;World&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set kungs3 &quot;redis&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DEL kungs1 kungs2 kungs3 kungs4</span><br><span class="line">3</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).</p></blockquote><h4 id="1-1-2-DUMP-key"><a href="#1-1-2-DUMP-key" class="headerlink" title="1.1.2 DUMP key"></a>1.1.2 <strong><a id="DUMP">DUMP key</a></strong></h4><p>Redis <a href="https://redis.com.cn/commands/dump.html">DUMP</a> 用于序列化给定 <code>key</code> ，并返回被序列化的值，使用 <code>restore</code> 命令可以将<code>DUMP</code> 的结果反序列化回 Redis 。</p><blockquote><p>序列化格式有以下几个特点：</p><ul><li>它带有 64 位的校验和，用于检测错误， <code>restore</code> 在进行反序列化之前会先检查校验和。.</li><li>值的编码格式和 RDB 文件保持一致。</li><li>RDB 版本会被编码在序列化值当中，如果因为 Redis 的版本造成 RDB 格式不兼容，那么 Redis 会拒绝对这个值进行反序列化操作。</li></ul></blockquote><p>序列化的值不包括任何过期（expire）信息。</p><p>如果想获得 key 的剩余过期时间，需要使用 <a href="https://redis.com.cn/commands/pttl.html">PTTL</a> 命令。</p><p>如果 <code>key</code> 不存在，那么返回 <code>nil</code> </p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DUMP KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><a href="#多行字符串"><b>多行字符串</b></a>: 如果 key 不存在，那么返回 nil 。 否则，返回序列化之后的值。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set kungskey 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DUMP kungskey</span><br><span class="line">&quot;\x00\xc0\n\t\x00\xbem\x06\x89Z(\x00\n&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p><p><strong>时间复杂度:</strong> O(1) to access the key and additional O(N<em>M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1</em>M) where M is small, so simply O(1).</p></blockquote><h4 id="1-1-3-EXISTS-key-key-…"><a href="#1-1-3-EXISTS-key-key-…" class="headerlink" title="1.1.3 EXISTS key [key …]"></a>1.1.3 <strong><a id="EXISTS">EXISTS key [key …]</a></strong></h4><p>Redis EXISTS 命令用于检查给定 <code>key</code> 是否存在。</p><p>从 Redis 3.0.3 起可以一次检查多个 key 是否存在。这种情况下，返回待检查 key 中存在的 key 的个数。检查单个 key 返回 1 或 0 。</p><p>注意：如果相同的 key 在参数列表中出现了多次，它会被计算多次。所以，如果<code>somekey</code>存在, <code>EXISTS somekey somekey</code> 命令返回 2。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EXISTS KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><a href="#整数"><b>整数</b></a>:</p><ul><li><code>1</code>: key存在</li><li><code>0</code>: key不存在</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET key1 &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; EXISTS key1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS nosuchkey</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; SET key2 &quot;World&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; EXISTS key1 key2 nosuchkey</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-1-4-EXPIRE-key-seconds"><a href="#1-1-4-EXPIRE-key-seconds" class="headerlink" title="1.1.4 EXPIRE key seconds"></a>1.1.4 <strong><a id="EXPIRE">EXPIRE key seconds</a></strong></h4><p>Redis <code>Expire</code> 命令设置 <code>key</code> 的过期时间（seconds）。 设置的时间过期后，key 会被自动删除。带有超时时间的 key 通常被称为<strong>易失的(<em>volatile</em>)</strong>。</p><p>超时时间只能使用删除 key 或者覆盖 key 的命令清除，包括 <a href="#DEL key">DEL</a>, <a href="#SET">SET</a>,  <a href="#SET">GETSET</a> 和所有的 <code>*STORE</code> 命令。 对于修改 key 中存储的值，而不是用新值替换旧值的命令，不会修改超时时间。例如，自增 key 中存储的值的 <a href="#INCR">INCR</a>, 向list中新增一个值 <a href="#LPUSH">LPUSH</a>, 或者修改 hash 域的值  <a href="#LSET">HSET</a> ，这些都不会修改 key 的过期时间。</p><p>通过使用  <a href="#PERSIST">PERSIST</a> 命令把 key 改回持久的(persistent) key，这样 key 的过期时间也可以被清除。</p><p>key使用 <a href="#RENAME">RENAME</a> 改名后，过期时间被转移到新 key 上。</p><p>已存在的旧 key 使用 <a href="#RENAME">RENAME</a> 改名，那么新 key 会继承所有旧 key 的属性。例如，一个名为 <strong>Key_A</strong> 的 key 使用命令 <code>RENAME Key_B Key_A</code> 改名，新的 <strong>Key_A</strong> 会继承包括超时时间在内的所有 <strong>Key_B</strong> 的属性。 </p><p>特别注意，使用负值调用 <a href="#EXPIRE">EXPIRE</a>/<a href="#PEXPIRE">PEXPIRE</a> 或使用过去的时间调用 <a href="#EXPIREAT">EXPIREAT</a>/<a href="#PEXPIREAT">PEXPIREAT</a> ，那么 key 会被删除 <a href="#DEL">deleted</a> 而不是过期。 (因为, 触发的<a href="#Redis键空间通知">key event</a> 将是 <code>del</code>, 而不是 <code>expired</code>).</p><h4 id="1-1-5-EXPIREAT-key-timestamp"><a href="#1-1-5-EXPIREAT-key-timestamp" class="headerlink" title="1.1.5 EXPIREAT key timestamp"></a>1.1.5 <strong><a id="EXPIREAT">EXPIREAT key timestamp</a></strong></h4><p><a href="#EXPIREAT">EXPIREAT</a> 与 <a href="#EXPIRE">EXPIRE</a> 有相同的作用和语义, 不同的是 <a href="#EXPIREAT">EXPIREAT</a> 使用绝对 Unix 时间戳 (自1970年1月1日以来的秒数)代替表示过期时间的秒数。使用过去的时间戳将会立即删除该 key。</p><p>详细语义功能说明可以参考 <a href="#EXPIRE">EXPIRE</a>。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; Expireat KEY_NAME TIME_IN_UNIX_TIMESTAMP</span><br></pre></td></tr></table></figure></li><li><p><strong>背景：</strong></p><p><a href="#EXPIREAT">EXPIREAT</a> 引入的目的是为了把 AOF 持久化模式的相对时间转换为绝对时间。当然，也可以直接指明某个 key 在未来某个时间过期。</p></li><li><p><strong>返回值：</strong></p><p><a href="#整数"><b>整数</b></a>:</p><ul><li><code>1</code>: 设置超时成功</li><li><code>0</code>: key不存在</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; EXISTS mykey</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; EXPIREAT mykey 1293840000</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS mykey</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-1-6-PEXPIRE-key-milliseconds"><a href="#1-1-6-PEXPIRE-key-milliseconds" class="headerlink" title="1.1.6 PEXPIRE key milliseconds"></a>1.1.6 <strong><a id="PEXPIRE">PEXPIRE key milliseconds</a></strong></h4><p> <a href="#PEXPIRE">PEXPIRE</a>  跟 <a href="#EXPIRE">EXPIRE</a>  基本一样，只是过期时间单位是毫秒。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PEXPIRE key milliseconds</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><a href="#整数"><b>整数</b></a>:</p><ul><li><code>1</code>: 过期设置成功</li><li><code>0</code>: key不存在 或设置失败</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PEXPIRE mykey 15000</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; TTL mykey</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; PTTL mykey</span><br><span class="line">(integer) 7039</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-1-7-PEXPIREAT-key-milliseconds-timestamp"><a href="#1-1-7-PEXPIREAT-key-milliseconds-timestamp" class="headerlink" title="1.1.7 PEXPIREAT key milliseconds-timestamp"></a>1.1.7 <strong><a id="PEXPIREAT">PEXPIREAT key milliseconds-timestamp</a></strong></h4><p>Redis <a href="#PEXPIREAT">PEXPIREAT</a> 命令用于设置 key 的过期时间，时间的格式是uinx时间戳并精确到毫秒。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PEXPIREAT KEY_NAME TIME_IN_MILLISECONDS_IN_UNIX_TIMESTAMP</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><a href="#整数"><b>整数</b></a>:</p><ul><li><code>1</code>: 设置成功返回</li><li><code>0</code>: key不存在</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PEXPIREAT mykey 150000000000</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; TTL mykey</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; PTTL mykey</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-1-8-KEYS-pattern"><a href="#1-1-8-KEYS-pattern" class="headerlink" title="1.1.8 KEYS pattern"></a>1.1.8 <strong><a id="KEYS">KEYS pattern</a></strong></h4><p>Redis <a href="#KEYS">KEYS</a> 命令用于查找所有匹配给定模式 pattern 的 key 。</p><p>尽管这个操作的时间复杂度是 O(N)，但是常量时间相当小。</p><p>例如，在一个普通笔记本上跑 Redis，扫描 100 万个 key 只要40毫秒。</p><p><strong>Warning</strong>: 生产环境使用 <a href="#KEYS">KEYS</a> 命令需要非常小心。在大的数据库上执行命令会影响性能。</p><p>这个命令适合用来调试和特殊操作，像改变键空间布局。</p><p>不要在你的代码中使用 <a href="#KEYS">KEYS</a> 。如果你需要一个寻找键空间中的key子集，考虑使用 <a href="#SCAN">SCAN</a> 或 <a href="#Set(集合)">Sets</a>。</p><p>匹配模式:</p><ul><li><code>h?llo</code> 匹配 <code>hello</code>, <code>hallo</code> 和 <code>hxllo</code></li><li><code>h*llo</code> 匹配 <code>hllo</code> 和 <code>heeeello</code></li><li><code>h[ae]llo</code> 匹配 <code>hello</code> and <code>hallo,</code> 不匹配 <code>hillo</code></li><li><code>h[^e]llo</code> 匹配 <code>hallo</code>, <code>hbllo</code>, … 不匹配 <code>hello</code></li><li><code>h[a-b]llo</code> 匹配 <code>hallo</code> 和 <code>hbllo</code></li></ul><p>使用 <code>\</code> 转义你想匹配的特殊字符。</p><h4 id="1-1-9-MOVE-key-db"><a href="#1-1-9-MOVE-key-db" class="headerlink" title="1.1.9 MOVE key db"></a>1.1.9 <strong><a id="MOVE">MOVE key db</a></strong></h4><p>Redis MOVE 命令用于将当前数据库的 key 移动到选定的数据库 db 当中。</p><p>如果 <code>key</code> 在目标数据库中已存在，或者 <code>key</code> 在源数据库中不存，则<code>key</code> 不会被移动。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MOVE KEY_NAME DESTINATION_DATABASE</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><a href="#整数"><b>整数</b></a>:</p><ul><li><code>1</code>: <code>key</code> 被移动</li><li><code>0</code>: <code>key</code> 没有被移动</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">key 存在于当前数据库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redis默认使用数据库 0，为了清晰起见，这里再显式指定一次。</span></span><br><span class="line">127.0.0.1:6379&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set kungs &quot;yanpenggong base -Zone&quot;</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 kungs 移动到数据库 1</span></span><br><span class="line">127.0.0.1:6379&gt; move kungs 1</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kungs 已经被移走</span></span><br><span class="line">127.0.0.1:6379&gt; exists kungs</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用数据库 1</span></span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">证实 kungs 被移到了数据库 1</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(注意命令提示符变成了<span class="string">&quot;127.0.0.1:6379[1]&quot;</span>，表明正在使用数据库 1)</span></span><br><span class="line">127.0.0.1:6379[1]&gt; exists kungs</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当 key 不存在的时候</span></span><br><span class="line">127.0.0.1:6379[1]&gt; exists fake_key</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">试图从数据库 1 移动一个不存在的 key 到数据库 0，失败</span></span><br><span class="line">127.0.0.1:6379[1]&gt; move fake_key 0</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用数据库0</span></span><br><span class="line">127.0.0.1:6379[1]&gt; select 0</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">证实 fake_key 不存在</span></span><br><span class="line">127.0.0.1:6379&gt; exists fake_key</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当源数据库和目标数据库有相同的 key 时</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用数据库0</span></span><br><span class="line">127.0.0.1:6379&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set fruit &quot;apple&quot;</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用数据库1</span></span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; set fruit &quot;pineappleC&quot;</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用数据库0，并试图将 fruit 移动到数据库 1</span></span><br><span class="line">127.0.0.1:6379[1]&gt; select 0</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为两个数据库有相同的 key，MOVE 失败</span></span><br><span class="line">127.0.0.1:6379&gt; move fruit 1</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据库 0 的 fruit 没变</span></span><br><span class="line">127.0.0.1:6379&gt; get fruit</span><br><span class="line">&quot;apple&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据库 1 的 fruit 也是</span></span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get fruit</span><br><span class="line">&quot;pineappleC&quot;</span><br><span class="line">127.0.0.1:6379[1]&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-1-10-PERSIST-key"><a href="#1-1-10-PERSIST-key" class="headerlink" title="1.1.10 PERSIST key"></a>1.1.10 <strong><a id="PERSIST">PERSIST key</a></strong></h4><p>Redis PERSIST 命令用于删除给定 key 的过期时间，使得 key 永不过期。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PERSIST KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><a href="#整数"><b>整数</b></a>:</p><ul><li><code>1</code>: 当过期时间移除成功时</li><li><code>0</code>: key不存在或 key 没有设置过期时间</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为 key 设置生存时间</span></span><br><span class="line">127.0.0.1:6379&gt; EXPIRE mykey 10</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; TTL mykey</span><br><span class="line">(integer) 8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除 key 的生存时间</span></span><br><span class="line">127.0.0.1:6379&gt; PERSIST mykey</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; TTL mykey</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-1-11-PTTL-key"><a href="#1-1-11-PTTL-key" class="headerlink" title="1.1.11 PTTL key"></a>1.1.11 <strong><a id="PTTL">PTTL key</a></strong></h4><p>Redis PTTL 命令以毫秒为单位返回 key 的剩余过期时间。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PTTL KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><blockquote><p>Redis 2.6 之前的版本如果 key 不存在或者 key 没有关联超时时间则返回 <code>-1</code> 。</p><p>Redis 2.8 起：</p><ul><li>key 不存在返回 <code>-2</code></li><li>key 存在但是没有关联超时时间返回 <code>-1</code></li></ul></blockquote><p><a href="#整数"><b>整数</b></a>:</p><ul><li><code>-1</code>: key 存在但没有设置剩余生存时间</li><li><code>-2</code>: key 不存在</li><li><code>其它</code>: 以毫秒为单位，返回 key 的剩余生存时间</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set mykey &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">key 存在，但没有设置剩余生存时间</span></span><br><span class="line">127.0.0.1:6379&gt; PTTL mykey</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; EXPIRE mykey 1000</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">有剩余生存时间的 key</span></span><br><span class="line">127.0.0.1:6379&gt; PTTL mykey</span><br><span class="line">(integer) 998591</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-1-12-TTL-key"><a href="#1-1-12-TTL-key" class="headerlink" title="1.1.12 TTL key"></a>1.1.12 <strong><a id="TTL">TTL key</a></strong></h4><p>Redis TTL 命令以秒为单位返回 key 的剩余过期时间。用户客户端检查 key 还可以存在多久。</p><blockquote><ul><li>Redis 2.6 之前的版本如果 key 不存在或者 key 没有关联超时时间则返回 -1 。</li><li>Redis 2.8 起：<ul><li>key 不存在返回 -2</li><li>key 存在但是没有关联超时时间返回 -1</li><li><a href="#PTTL">PTTL</a> 返回以毫秒为单位的剩余超时时间。</li></ul></li></ul></blockquote><ul><li><p><strong>返回值：</strong></p><p><a href="#整数"><b>整数</b></a>: 剩余超时秒数，失败返回负数如上。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set mykey &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">key 存在，但没有设置剩余生存时间</span></span><br><span class="line">127.0.0.1:6379&gt; TTL mykey</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; EXPIRE mykey 1000</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">有剩余生存时间的 key</span></span><br><span class="line">127.0.0.1:6379&gt; TTL mykey</span><br><span class="line">(integer) 998</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-1-13-RANDOMKEY"><a href="#1-1-13-RANDOMKEY" class="headerlink" title="1.1.13 RANDOMKEY"></a>1.1.13 <strong><a id="RANDOMKEY">RANDOMKEY</a></strong></h4><p>Redis RANDOMKEY 命令从当前数据库中随机返回一个 key 。</p><ul><li><p><strong>语法:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RANDOMKEY </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><a href="#多行字符串">多行字符串</a>: 当数据库不为空时，返回一个 key 。 当数据库为空时，返回 nil 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MSET fruit &quot;apple&quot; drink &quot;beer&quot; food &quot;cookies&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) &quot;food&quot;</span><br><span class="line">2) &quot;drink&quot;</span><br><span class="line">3) &quot;fruit&quot;</span><br><span class="line">127.0.0.1:6379&gt; RANDOMKEY</span><br><span class="line">&quot;food&quot;</span><br><span class="line">127.0.0.1:6379&gt; RANDOMKEY</span><br><span class="line">&quot;fruit&quot;</span><br><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; RANDOMKEY</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-1-14-RENAME-key-newkey"><a href="#1-1-14-RENAME-key-newkey" class="headerlink" title="1.1.14 RENAME key newkey"></a>1.1.14 <strong><a id="RENAME">RENAME key newkey</a></strong></h4><p>Redis RENAME 命令用于修改 key 的名字为 newkey 。若key 不存在返回错误。</p><p>在集群模式下，key 和newkey 需要在同一个 hash slot。key 和newkey有相同的 hash tag 才能重命名。</p><p>如果 newkey 存在则会被覆盖，此种情况隐式执行了 DEL 操作，所以如果要删除的key的值很大会有一定的延时，即使RENAME 本身是常量时间复杂度的操作。</p><p>在集群模式下，key 和newkey 需要在同一个 hash slot。key 和newkey有相同的 hash tag 才能重命名。</p><ul><li><p><strong>历史：</strong></p><p><code>&lt;= 3.2.0</code>: 源 key 和目的 key 相同返回错误。</p></li><li><p><strong>返回值：</strong></p><p>字符串</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">key 存在且 newkey 不存在</span></span><br><span class="line">127.0.0.1:6379&gt; set mykey &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; RENAME mykey mykey1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get mykey1</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当 key 不存在时，返回错误</span></span><br><span class="line">127.0.0.1:6379&gt; RENAME mykey2 mykey22</span><br><span class="line">(error) ERR no such key</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">newkey 已存在时， RENAME 会覆盖旧 newkey</span></span><br><span class="line">127.0.0.1:6379&gt; set pc &quot;macpro&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set personal_computer &quot;thinkpad&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; RENAME pc personal_computer</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get pc</span><br><span class="line">(nil)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原来的值 thinkpad 被覆盖了</span></span><br><span class="line">127.0.0.1:6379&gt; get personal_computer</span><br><span class="line">&quot;macpro&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote></li></ul><h4 id="1-1-15-RENAMENX-key-newkey"><a href="#1-1-15-RENAMENX-key-newkey" class="headerlink" title="1.1.15 RENAMENX key newkey"></a>1.1.15 <strong><a id="RENAMENX">RENAMENX key newkey</a></strong></h4><p>Redis Renamenx 命令用于在新的 key 不存在时修改 key 的名称 。若 key 不存在返回错误。</p><p>在集群模式下，<code>key</code> 和<code>newkey</code> 需要在同一个 <strong>hash slot</strong>。<code>key</code> 和<code>newkey</code>有相同的 hash tag 才能重命名。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RENAMENX OLD_KEY_NAME NEW_KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>历史：</strong></p></li></ul><ul><li><p><strong>返回值：</strong></p><p><a href="#整数"><b>整数</b></a>:</p><ul><li><code>1</code>: rename 成功</li><li><code>0</code>: <code>newkey</code> 已经存在</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">newkey 不存在，改名成功</span></span><br><span class="line">127.0.0.1:6379&gt; set mykey &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; RENAMENX mykey myotherkey</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; GET myotherkey</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">newkey存在时，失败</span></span><br><span class="line">127.0.0.1:6379&gt; SET animal &quot;bear&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET favorite_animal &quot;butterfly&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; RENAMENX animal favorite_animal</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get animal</span><br><span class="line">&quot;bear&quot;</span><br><span class="line">127.0.0.1:6379&gt; get favorite_animal</span><br><span class="line">&quot;butterfly&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-1-16-SCAN-cursor-MATCH-pattern-COUNT-count"><a href="#1-1-16-SCAN-cursor-MATCH-pattern-COUNT-count" class="headerlink" title="1.1.16 SCAN cursor [MATCH pattern] [COUNT count]"></a>1.1.16 <strong><a id="SCAN">SCAN cursor [MATCH pattern] [COUNT count]</a></strong></h4><p>Redis SCAN 命令及其相关命令 <a href="#SSCAN">SSCAN</a>, <a href="#HSCAN">HSCAN</a>, <a href="#ZSCAN">ZSCAN</a> 命令都是用于增量遍历集合中的元素。 </p><blockquote><ul><li><a href="#SCAN">SCAN</a>: 命令用于迭代当前数据库中的数据库键</li><li><a href="#SSCAN">SSCAN</a>: 命令用于迭代集合键中的元素。</li><li><a href="#HSCAN">HSCAN</a>: 命令用于迭代哈希键中的键值对。</li><li><a href="#ZSCAN">ZSCAN</a>: 命令用于迭代有序集合中的元素（包括元素成员和元素分值）。</li></ul></blockquote><p>以上列出的四个命令都支持增量式迭代， 它们每次执行都只会返回少量元素， 所以这些命令可以用于生产环境， 而不会出现像 KEYS 命令、 SMEMBERS 命令带来的问题 —— 当 KEYS 命令被用于处理一个大的数据库时， 又或者 SMEMBERS 命令被用于处理一个大的集合键时， 它们可能会阻塞服务器达数秒之久。</p><p>不过， 增量式迭代命令也不是没有缺点的： 举个例子， 使用 SMEMBERS 命令可以返回集合键某一时刻包含的所有元素， 但是对于 SCAN 这类增量式迭代命令来说， 因为在对键进行增量式迭代的过程中， 键可能会被修改， 所以增量式迭代命令不能完全保证返回所有元素。</p><p>因为 SCAN 、 SSCAN 、 HSCAN 和 ZSCAN 四个命令的工作方式都非常相似， 所以这个文档会一并介绍这四个命令， 但是要记住：SSCAN 命令、 HSCAN 命令和 ZSCAN 命令的第一个参数总是一个存储集合的键名。而 SCAN 命令则不需要在第一个参数提供任何数据库键 —— 因为它迭代的是当前数据库中的所包含的键。</p><blockquote><ol><li><p><strong>SCAN 命令的基本用法</strong></p><p>SCAN 命令是一个基于游标的迭代器，每次被调用之后， 都会向用户返回一个新的游标， 用户在下次迭代时需要使用这个新游标作为 SCAN 命令的游标参数， 以此来延续之前的迭代过程。</p><p>SCAN 返回一个包含两个元素的数组， 第一个元素是用于进行下一次迭代的新游标， 而第二个元素则是一个数组， 这个数组中包含了所有被迭代的元素。当 SCAN 命令的游标参数被设置为 <code>0</code> 时， 服务器将开始一次新的迭代，而当服务器向用户返回值为 <code>0</code> 的游标时， 表示迭代已结束。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scan 0</span><br><span class="line">1) &quot;17&quot;</span><br><span class="line">2)  1) &quot;key:12&quot;</span><br><span class="line">    2) &quot;key:8&quot;</span><br><span class="line">    3) &quot;key:4&quot;</span><br><span class="line">    4) &quot;key:14&quot;</span><br><span class="line">    5) &quot;key:16&quot;</span><br><span class="line">    6) &quot;key:17&quot;</span><br><span class="line">    7) &quot;key:15&quot;</span><br><span class="line">    8) &quot;key:10&quot;</span><br><span class="line">    9) &quot;key:3&quot;</span><br><span class="line">   10) &quot;key:7&quot;</span><br><span class="line">   11) &quot;key:1&quot;</span><br><span class="line">127.0.0.1:6379&gt; scan 17</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;key:5&quot;</span><br><span class="line">   2) &quot;key:18&quot;</span><br><span class="line">   3) &quot;key:0&quot;</span><br><span class="line">   4) &quot;key:2&quot;</span><br><span class="line">   5) &quot;key:19&quot;</span><br><span class="line">   6) &quot;key:13&quot;</span><br><span class="line">   7) &quot;key:6&quot;</span><br><span class="line">   8) &quot;key:9&quot;</span><br><span class="line">   9) &quot;key:11&quot;</span><br></pre></td></tr></table></figure><p>在上面这个例子中， 第一次迭代使用 <code>0</code> 作为游标， 表示开始一次新的迭代。第二次迭代使用的是第一次迭代时返回的游标， 也就是命令回复第一个元素的值 —— <code>17</code> 。</p></li></ol><ol><li><p><strong>SCAN 命令的保证</strong></p><ul><li>如果有一个元素， 它从遍历开始直到遍历结束期间都存在于被遍历的数据集当中， 那么 SCAN 命令总会在某次迭代中将这个元素返回给用户。</li><li>如果有一个元素， 它从遍历开始就已经被删除，且直到遍历结束也没有被添加回来， 那么 SCAN 命令确保不会返回这个元素。</li></ul><p>然而因为 SCAN 命令仅仅使用游标来记录迭代状态， 所以这些命令带有以下缺点：</p><ul><li>同一个元素可能会被返回多次。 处理重复元素的工作交由应用程序负责， 比如说， 可以考虑将迭代返回的元素仅仅用于可以安全地重复执行多次的操作上。</li><li>如果一个元素是在迭代过程中被添加到数据集的， 又或者是在迭代过程中从数据集中被删除的， 那么这个元素可能会被返回， 也可能不会， 这是未定义的（undefined）。</li></ul></li></ol><ol><li><p><strong>SCAN 命令每次执行返回的元素数量</strong></p><p>SCAN 命令族并不保证每次执行都返回某个给定数量的元素。增量式命令甚至可能会返回零个元素， 但只要命令返回的游标不是 <code>0</code> ， 应用程序就不应该将迭代视作结束。</p><p>不过命令返回的元素数量总是符合一定规则的， 在实际中：对于一个大数据集来说， 增量式迭代命令每次最多可能会返回数十个元素；而对于一个足够小的数据集来说， 小集合键、小哈希键和小有序集合键， 那么增量迭代命令将在一次调用中返回数据集中的所有元素。</p><p>最后， 用户可以通过增量式迭代命令提供的 <strong>COUNT</strong> 选项来指定每次迭代返回元素的最大值。</p></li></ol><ol><li><p><strong>COUNT 选项</strong></p><p>虽然 SCAN 命令不保证每次迭代所返回的元素数量， 但我们可以使用 <strong>COUNT</strong>选项， 对命令的行为进行一定程度上的调整。 <strong>COUNT</strong> 选项的作用就是让用户告知迭代命令， 在每次迭代中应该从数据集里返回多少元素。虽然这个选项<strong>只是对增量式迭代命令的一种提示</strong>（hint）， 但是在大多数情况下， 这种提示都是有效的。</p><ul><li><strong>COUNT</strong> 参数的默认值为 <code>10</code> 。</li><li>在迭代一个足够大的、由哈希表实现的数据库、集合键、哈希键或者有序集合键时， 如果用户没有使用 <code>MATCH</code> 选项， 那么命令返回的元素数量通常和 <code>COUNT</code> 选项指定的一样， 或者比 <code>COUNT</code> 选项指定的数量稍多一些。</li><li>在迭代一个编码为整数集合（intset，一个只由整数值构成的小集合）、 或者编码为压缩列表（ziplist，由不同值构成的一个小哈希或者一个小有序集合）时， 增量式迭代命令通常会无视 <code>COUNT</code> 选项指定的值， 在第一次迭代就将数据集包含的所有元素都返回给用户。</li></ul><p>Important: <strong>并非每次迭代都要使用相同的</strong> <code>COUNT</code> **值。用户可以在每次迭代中按自己的需要随意改变 <code>COUNT</code> 值， 只要记得将上次迭代返回的游标用到下次迭代里面就可以了。</p></li></ol><ol><li><p><strong>MATCH 选项</strong></p><p>和 KEYS 命令一样， <code>SCAN</code>命令族也可以通过提供一个 glob 风格的模式参数， 让命令只返回和给定模式相匹配的元素， 这一点可以通过在执行增量式迭代命令时， 通过给定 <code>MATCH &lt;pattern&gt;</code> 参数来实现。</p><p>例如： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset 1 2 3 foo foobar feelsgood</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; sscan myset 0 match f*</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;foo&quot;</span><br><span class="line">   2) &quot;feelsgood&quot;</span><br><span class="line">   3) &quot;foobar&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>对元素的模式匹配工作是在命令从数据集中取出元素之后， 向客户端返回元素之前的这段时间内进行的， 所以如果被迭代的数据集中只有少量元素和模式相匹配， 那么迭代命令或许会在多次执行中都不返回任何元素。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scan 0 MATCH *11*</span><br><span class="line">1) &quot;288&quot;</span><br><span class="line">2) 1) &quot;key:911&quot;</span><br><span class="line">127.0.0.1:6379&gt; scan 288 MATCH *11*</span><br><span class="line">1) &quot;224&quot;</span><br><span class="line">2) (empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; scan 224 MATCH *11*</span><br><span class="line">1) &quot;80&quot;</span><br><span class="line">2) (empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; scan 80 MATCH *11*</span><br><span class="line">1) &quot;176&quot;</span><br><span class="line">2) (empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; scan 176 MATCH *11* COUNT 1000</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2)  1) &quot;key:611&quot;</span><br><span class="line">    2) &quot;key:711&quot;</span><br><span class="line">    3) &quot;key:118&quot;</span><br><span class="line">    4) &quot;key:117&quot;</span><br><span class="line">    5) &quot;key:311&quot;</span><br><span class="line">    6) &quot;key:112&quot;</span><br><span class="line">    7) &quot;key:111&quot;</span><br><span class="line">    8) &quot;key:110&quot;</span><br><span class="line">    9) &quot;key:113&quot;</span><br><span class="line">   10) &quot;key:211&quot;</span><br><span class="line">   11) &quot;key:411&quot;</span><br><span class="line">   12) &quot;key:115&quot;</span><br><span class="line">   13) &quot;key:116&quot;</span><br><span class="line">   14) &quot;key:114&quot;</span><br><span class="line">   15) &quot;key:119&quot;</span><br><span class="line">   16) &quot;key:811&quot;</span><br><span class="line">   17) &quot;key:511&quot;</span><br><span class="line">   18) &quot;key:11&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>我们可以看到， 以上的大部分迭代都不返回任何元素。</p><p>在最后一次迭代， 我们通过将 <code>COUNT</code> 选项的参数设置为 <code>1000</code> ， 强制命令为本次迭代扫描</p></li></ol><p>   更多元素， 从而使得命令返回的元素也变多了</p></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCAN cursor [MATCH pattern] [COUNT count]</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>cursor - 游标。</li><li>pattern - 匹配的模式。</li><li>count - 指定从数据集里返回多少元素，默认值为 10 。</li></ul></li><li><p><strong>返回值：</strong></p><p>数组列表</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 0 作为游标，开始新的迭代</span></span><br><span class="line">127.0.0.1:6379&gt; scan 0</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;favorite_animal&quot;</span><br><span class="line">   2) &quot;personal_computer&quot;</span><br><span class="line">   3) &quot;myotherkey&quot;</span><br><span class="line">   4) &quot;mykey1&quot;</span><br><span class="line">   5) &quot;animal&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用的是第一次迭代时返回的游标 12 开始新的迭代</span></span><br><span class="line">127.0.0.1:6379&gt; scan 12</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;favorite_animal&quot;</span><br><span class="line">   2) &quot;personal_computer&quot;</span><br><span class="line">   3) &quot;myotherkey&quot;</span><br><span class="line">   4) &quot;mykey1&quot;</span><br><span class="line">   5) &quot;animal&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用的是第一次迭代时返回的游标 3 开始新的迭代</span></span><br><span class="line">127.0.0.1:6379&gt; scan 3</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;myotherkey&quot;</span><br><span class="line">   2) &quot;mykey1&quot;</span><br><span class="line">   3) &quot;animal&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.0.</strong></p><p><strong>时间复杂度:</strong> O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.</p></blockquote><h4 id="1-1-17-TYPE-key"><a href="#1-1-17-TYPE-key" class="headerlink" title="1.1.17 TYPE key"></a>1.1.17 <strong><a id="TYPE">TYPE key</a></strong></h4><p>Redis Type 命令用于返回 key 所储存的值的类型。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; TYPE KEY_NAME </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>返回 key 的数据类型，数据类型有：</p><ul><li>none (key不存在)</li><li>string (字符串)</li><li>list (列表)</li><li>set (集合)</li><li>zset (有序集)</li><li>hash (哈希表)</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET key1 &quot;value&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LPUSH key2 &quot;value&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD key3 &quot;value&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; TYPE key1</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; TYPE key2</span><br><span class="line">list</span><br><span class="line">127.0.0.1:6379&gt; TYPE key3</span><br><span class="line">set</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-1-18-MIGRATE-host-port-key-”-”-destination-db-timeout-COPY-REPLACE-AUTH-password-AUTH2-username-password-KEYS-key-key-…"><a href="#1-1-18-MIGRATE-host-port-key-”-”-destination-db-timeout-COPY-REPLACE-AUTH-password-AUTH2-username-password-KEYS-key-key-…" class="headerlink" title="1.1.18 MIGRATE host port key|\”\” destination-db timeout [COPY] [REPLACE] [AUTH password] [AUTH2 username password] [KEYS key [key …]]"></a>1.1.18 <strong><a id="MIGRATE">MIGRATE host port key|\”\” destination-db timeout [COPY] [REPLACE] [AUTH password] [AUTH2 username password] [KEYS key [key …]]</a></strong></h4><p>将 key 原子性地从当前实例传送到目标实例的指定数据库上，一旦传送成功， key 会出现在目标实例上，而当前实例上的 key 会被删除。</p><p>MIGRATE 命令是一个原子操作，它在执行的时候会阻塞进行迁移的两个实例，直到以下任意结果发生：迁移成功，迁移失败，等待超时。</p><ul><li><p><strong>一次迁移多个 key:</strong></p><p>Redis 3.0.6 起<code>MIGRATE</code> 支持批量迁移。需要使用 <code>KEYS</code> 选项，使用空字符串替换 <em>key</em>，要迁移的 key 列在 <code>KEYS</code> 命令之后:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MIGRATE 192.168.1.34 6379 &quot;&quot; 0 5000 KEYS key1 key2 key3</span><br></pre></td></tr></table></figure><p>当所有 key 都不存在时返回 <code>NOKEY</code> ，即使只有一个key存在也执行成功。</p></li><li><p><strong>Options:</strong></p><ul><li><code>COPY</code> — 复制，不删除源实例中的 key。</li><li><code>REPLACE</code> — 替换，替换目标实例中的存在的 key。</li><li><code>KEYS</code> — 如果 key 参数是一个空字符串，会迁移 KEYS 命令后所有的 key 。</li><li><code>AUTH</code> — 使用密码访问目标数据库。</li><li><code>AUTH2</code> — 使用用户名和密码对访问数据库。 (Redis 6 以上 ACL auth )。</li></ul></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 迁移成功时返回 OK ，如果在源实例中找不到 key 返回 NOKEY 。</p></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p><p><strong>时间复杂度:</strong> This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.</p></blockquote><h3 id="1-2-String-字符串"><a href="#1-2-String-字符串" class="headerlink" title="1.2 String(字符串)"></a>1.2 <strong>String(字符串)</strong></h3><h4 id="1-2-1-SET-key-value-EX-seconds-PX-milliseconds-KEEPTTL-NX-XX-GET"><a href="#1-2-1-SET-key-value-EX-seconds-PX-milliseconds-KEEPTTL-NX-XX-GET" class="headerlink" title="1.2.1 SET key value [EX seconds|PX milliseconds|KEEPTTL] [NX|XX] [GET]"></a>1.2.1 <strong><a id="SET">SET key value [EX seconds|PX milliseconds|KEEPTTL] [NX|XX] [GET]</a></strong></h4><p>Redis SET 命令用于设置给定 key 的值。如果 key 已经存储其他值， SET 就覆写旧值，且无视类型。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET KEY_NAME VALUE</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><ul><li><p><strong>字符串</strong>: 如果<code>SET</code>命令正常执行那么回返回<code>OK</code> </p></li><li><p><strong>多行字符串</strong>: 使用 GET 选项，返回 key 存储的值</p></li><li><p><strong>空</strong>: key 不存在，否则如果加了<code>NX</code> 或者 <code>XX</code>选项，<code>SET</code> 没执行，那么会返回nil。</p></li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET mykey</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; SET anotherkey &quot;will expire in a minute&quot; EX 60</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get anotherkey</span><br><span class="line">&quot;will expire in a minute&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-2-2-GET-key"><a href="#1-2-2-GET-key" class="headerlink" title="1.2.2 GET key"></a>1.2.2 <strong><a id="GET">GET key</a></strong></h4><p>返回与键 <code>key</code> 相关联的字符串值，用于获取指定 <code>key</code> 的值。</p><p>如果键 <code>key</code> 不存在， 那么返回特殊值 <code>nil</code> ； 否则， 返回键 <code>key</code> 的值。</p><p>如果键 <code>key</code> 的值不是字符串类型， 那么返回一个错误， 因为 <code>GET</code> 命令只能用于字符串值。</p><ul><li><p><strong>返回值：</strong></p><p><a href="#多行字符串"><b>多行字符串</b></a>: 返回key中存储的值，key 不存在是返回<code>nil</code> 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对不存在的 key 进行 GET</span></span><br><span class="line">127.0.0.1:6379&gt; GET nonexisting</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; SET mykey &quot;Hello&quot;</span><br><span class="line">&quot;OK&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对字符串类型 key 进行 GET</span></span><br><span class="line">127.0.0.1:6379&gt; GET mykey</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对不是字符串类型的 key 进行 GET</span></span><br><span class="line">127.0.0.1:6379&gt; HSET myhash field1 &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; GET myhash</span><br><span class="line">ERR WRONGTYPE Operation against a key holding the wrong kind of value</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-2-3-GETRANGE-key-start-end"><a href="#1-2-3-GETRANGE-key-start-end" class="headerlink" title="1.2.3 GETRANGE key start end"></a>1.2.3 <strong><a id="GETRANGE">GETRANGE key start end</a></strong></h4><p>GETRANGE 命令返回存储在 key 中的字符串的子串，由 start 和 end 偏移决定(都包括在内)。负数偏移提供相对字符串结尾的偏移。所以， -1 表示最后一个字符， -2 表示倒数第二个字符，以此类推。<br>GETRANGE 通过将结果范围限制为字符串的实际长度来处理超出范围的请求。<br><strong>Warning</strong>: GETRANGE 是改名而来，在 Redis2.0 以前版本叫做 SUBSTR 。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GETRANGE KEY_NAME start end</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>：截取得到的子字符串。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET mykey &quot;This is a string yanpenggong&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE mykey 0 3</span><br><span class="line">&quot;This&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE mykey -3 -1</span><br><span class="line">&quot;ong&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE mykey 0 -1</span><br><span class="line">&quot;This is a string yanpenggong&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE mykey 10 100</span><br><span class="line">&quot;string yanpenggong&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.4.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.</p></blockquote><h4 id="1-2-4-GETSET-key-value"><a href="#1-2-4-GETSET-key-value" class="headerlink" title="1.2.4 GETSET key value"></a>1.2.4 <strong><a id="GETSET">GETSET key value</a></strong></h4><p>将键 <code>key</code> 的值设为 <code>value</code> ， 并返回键 <code>key</code> 在被设置之前的旧值。</p><p>返回给定键 <code>key</code> 的旧值。</p><p>如果键 <code>key</code> 没有旧值， 也即是说， 键 <code>key</code> 在被设置之前并不存在， 那么命令返回 <code>nil</code> 。</p><p>当键 <code>key</code> 存在但不是字符串类型时， 命令返回一个错误。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GETSET KEY_NAME VALUE</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>返回给定 key 的旧值。 当 key 没有旧值时，即 key 不存在时，返回 nil 。</p><p>当 key 存在但不是字符串类型时，返回一个错误。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有旧值，返回 nil</span></span><br><span class="line">127.0.0.1:6379&gt; GETSET db redis</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; GET db</span><br><span class="line">&quot;redis&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回旧值 redis</span></span><br><span class="line">127.0.0.1:6379&gt; GETSET db mongodb</span><br><span class="line">&quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; GET db</span><br><span class="line">&quot;mongodb&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-2-5-GETBIT-key-offset"><a href="#1-2-5-GETBIT-key-offset" class="headerlink" title="1.2.5 GETBIT key offset"></a>1.2.5 <strong><a id="GETBIT">GETBIT key offset</a></strong></h4><p>对 <code>key</code> 所储存的字符串值，获取指定偏移量上的位(bit)。</p><p>当 <code>offset</code> 比字符串值的长度大，或者 <code>key</code> 不存在时，返回 <code>0</code> 。</p><h4 id="1-2-6-MGET-key-key-…"><a href="#1-2-6-MGET-key-key-…" class="headerlink" title="1.2.6 MGET key [key …]"></a>1.2.6 <strong><a id="MGET">MGET key [key …]</a></strong></h4><p>Redis MGET 命令返回所有(一个或多个)给定 key 的值，值的类型是字符串。 如果给定的 key 里面，有某个 key 不存在或者值不是字符串，那么这个 key 返回特殊值 <code>nil</code> 。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MGET KEY1 KEY2 .. KEYN</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><a href="#RESP 数组">数组</a>: MGET 命令将返回一个列表， 列表中包含了所有给定键的值。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET key1 &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET key2 &quot;World&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MGET key1 key2 nonexisting</span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;World&quot;</span><br><span class="line">3) (nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of keys to retrieve.</p></blockquote><h4 id="1-2-7-SETBIT-key-offset-value"><a href="#1-2-7-SETBIT-key-offset-value" class="headerlink" title="1.2.7 SETBIT key offset value"></a>1.2.7 <strong><a id="SETBIT">SETBIT key offset value</a></strong></h4><p>Redis Setbit 命令用于对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</p><p>根据值 value 是 1 或 0 来决定设置或清除位 bit。当 key 不存在时会创建一个新的字符串。</p><p>当字符串不够长时，字符串的长度将增大，以确保它可以在offset位置存储值。</p><p><strong>offset</strong> 参数需要大于等于0，并且小于 $2^{32}$ (bitmaps 最大 512MB)。</p><p>当值字符串变长时，添加的 bit 会被设置为 0。</p><blockquote><p><strong>注意</strong>: 当设置的是最后一位 bit (<strong>offset</strong> 等于 $2^{32} -1$)，并且存储在 key 中的字符串还没有存储一个字符串值，或者存储的是一个短的字符串值时，Redis 需要分配所有的中间内存，这会阻塞 Redis 服务器一段时间。</p><p>在 2010 年的 MacBook Pro上:</p><ul><li>设置 $2^{32} -1$ 位 (分配512MB内存) 需花费 300ms，</li><li>设置 $2^{30} -1$ 位 (分配 128MB 内存) 需花费 80m，</li><li>设置 $2^{28} -1$ 位 (分配 32MB 内存) 需花费 30ms，</li><li>设置 $2^{26} -1$ 位 (分配 8MB 内存) 需花费 8ms。 </li></ul><p>需要注意的是，一旦上面第一步内存分配被完成，对于同一个 <strong>key</strong> 接下来调用 <code>SETBIT</code> 将不会有分配内存开销。</p></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETBIT key offset value</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><a href="#RESP整数">整数</a>: 存储在 offset 偏移位的原始值。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETBIT bit 10086 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; GETBIT bit 10086</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bit 默认被初始化为 0</span></span><br><span class="line">127.0.0.1:6379&gt; GETBIT bit 100</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-2-8-SETEX-key-seconds-value"><a href="#1-2-8-SETEX-key-seconds-value" class="headerlink" title="1.2.8 SETEX key seconds value"></a>1.2.8 <strong><a id="SETEX">SETEX key seconds value</a></strong></h4><p><code>SETEX</code> 命令将键 <code>key</code> 的值设置为 <code>value</code> ， 并将键 <code>key</code> 的生存时间设置为 <code>seconds</code> 秒钟。</p><p>如果键 <code>key</code> 已经存在， 那么 <code>SETEX</code> 命令将覆盖已有的值。</p><p><code>SETEX</code> 命令的效果和以下两个命令的效果类似：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET mykey value</span><br><span class="line">127.0.0.1:6379&gt; EXPIRE mykey seconds</span><br></pre></td></tr></table></figure><p><code>SETEX</code> 和这两个命令的不同之处在于 <code>SETEX</code> 是一个原子（atomic）操作， 它可以在同一时间内完成设置值和设置过期时间这两个操作， 因此 <code>SETEX</code> 命令在Redis用做缓存的时候非常实用。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETEX KEY_NAME TIMEOUT VALUE</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>：命令在设置成功时返回 <code>OK</code> 。 当 <code>seconds</code> 参数不合法时， 命令将返回ERR ERR value is not an integer or out of range错误。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETEX mykey 10 &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; TTL mykey</span><br><span class="line">(integer) 9</span><br><span class="line">127.0.0.1:6379&gt; GET mykey</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等几秒再看看输出</span></span><br><span class="line">127.0.0.1:6379&gt; TTL mykey</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; GET mykey</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-2-9-SETNX-key-value"><a href="#1-2-9-SETNX-key-value" class="headerlink" title="1.2.9 SETNX key value"></a>1.2.9 <strong><a id="SETNX">SETNX key value</a></strong></h4><p>Redis Setnx（ <strong>SET if Not exists</strong> ）命令在指定的 key 不存在时，为 key 设置指定的值，这种情况下等同 <code>SET</code> 命令。当 <code>key</code>存在时，什么也不做。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETNX KEY_NAME VALUE</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><a href="#RESP整数">整数</a>: </p><ul><li><code>1</code>:  如果key被设置了</li><li><code>0</code>: 如果key没有被设置</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mykey 不存在</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS mykey</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mykey 设置成功</span></span><br><span class="line">127.0.0.1:6379&gt; SETNX mykey &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">尝试覆盖，但是失败</span></span><br><span class="line">127.0.0.1:6379&gt; SETNX mykey &quot;World&quot;</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有被覆盖</span></span><br><span class="line">127.0.0.1:6379&gt; GET mykey</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-2-10-SETRANGE-key-offset-value"><a href="#1-2-10-SETRANGE-key-offset-value" class="headerlink" title="1.2.10 SETRANGE key offset value"></a>1.2.10 <strong><a id="SETRANGE">SETRANGE key offset value</a></strong></h4><p><code>SETRANGE</code> 命令从偏移量 <code>offset</code> 开始， 用 <code>value</code> 参数覆盖键 <code>key</code> 储存的字符串值。</p><p>不存在的键 <code>key</code> 当作空白字符串处理。</p><p><code>SETRANGE</code>命令会确保字符串足够长以便将 <code>value</code> 设置到指定的偏移量上， 如果键 <code>key</code> 原来储存的字符串长度比偏移量小(比如字符串只有 <code>5</code> 个字符长，但你设置的 <code>offset</code> 是 <code>10</code> )， 那么原字符和偏移量之间的空白将用零字节(zerobytes, <code>&quot;\x00&quot;</code> )进行填充。</p><p>因为 Redis 字符串的大小被限制在 512 兆(megabytes)以内， 所以用户能够使用的最大偏移量为 $2^{29}-1$(536870911) ， 如果你需要使用比这更大的空间， 请使用多个 <code>key</code> 。</p><blockquote><p><strong>Warning</strong>: 当生成一个很长的字符串时， Redis 需要分配内存空间， 该操作有时候可能会造成服务器阻塞(block)。 在2010年出产的Macbook Pro上， 设置偏移量为 536870911(512MB 内存分配)将耗费约 300 毫秒， 设置偏移量为 134217728(128MB 内存分配)将耗费约 80 毫秒， 设置偏移量 33554432(32MB 内存分配)将耗费约 30 毫秒， 设置偏移量为 8388608(8MB 内存分配)将耗费约 8 毫秒。</p></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: <code>SETRANGE</code>命令会返回被修改之后， 字符串值的长度。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET key1 &quot;Hello world&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE key1 6 &quot;Redis&quot;</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; GET key1</span><br><span class="line">&quot;Hello Redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE key2 6 &quot;Redis&quot;</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; GET key2</span><br><span class="line">&quot;\x00\x00\x00\x00\x00\x00Redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.</p></blockquote><h4 id="1-2-11-STRLEN-key"><a href="#1-2-11-STRLEN-key" class="headerlink" title="1.2.11 STRLEN key"></a>1.2.11 <strong><a id="STRLEN">STRLEN key</a></strong></h4><p>Redis Strlen 命令用于获取指定 key 所储存的字符串值的长度。当 key 储存的不是字符串类型时，返回错误。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; STRLEN KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值</strong>：</p><p><strong>整数</strong>: 字符串的长度，key 不存在时，返回 0 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取字符串的长度</span></span><br><span class="line">127.0.0.1:6379&gt; SET mykey &quot;Hello World&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; STRLEN mykey</span><br><span class="line">(integer) 11</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不存在的 key 长度为 0</span></span><br><span class="line">127.0.0.1:6379&gt; STRLEN nonexisting</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-2-12-MSET-key-value-key-value-…"><a href="#1-2-12-MSET-key-value-key-value-…" class="headerlink" title="1.2.12 MSET key value [key value …]"></a>1.2.12 <strong><a id="MSET">MSET key value [key value …]</a></strong></h4><p>Redis <code>MSET</code> 命令设置多个 <code>key</code> 的值为各自对应的 value。</p><p><code>MSET</code> 像 <code>SET</code> 一样，会用新值替换旧值。如果你不想覆盖旧值，可以使用 <code>MSETNX</code>。</p><p><code>MSET</code> 是原子操作，所有 key 的值同时设置。客户端不会看到有些 <code>key</code> 值被修改，而另一些 <code>key</code> 值没变。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MSET key1 value1 key2 value2 .. keyN valueN</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 总是返回”OK”，因为 <code>MSET</code>不会失败。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MSET key1 &quot;Hello&quot; key2 &quot;World&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET key1</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; GET key2</span><br><span class="line">&quot;World&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.1.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of keys to set.</p></blockquote><h4 id="1-2-13-MSETNX-key-value-key-value-…"><a href="#1-2-13-MSETNX-key-value-key-value-…" class="headerlink" title="1.2.13 MSETNX key value [key value …]"></a>1.2.13 <strong><a id="MSETNX">MSETNX key value [key value …]</a></strong></h4><p>当且仅当所有给定键都不存在时， 为所有给定键设置值。</p><p>即使只有一个给定键已经存在， MSETNX 命令也会拒绝执行对所有键的设置操作。</p><p>MSETNX 是一个原子性(atomic)操作， 所有给定键要么就全部都被设置， 要么就全部都不设置。</p><p>MSETNX 可以用来设置逻辑对象的属性，来确保要么都设置，要么都不设置。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>:</p><ul><li><code>1</code>: 当所有给定键都设置成功时</li><li><code>0</code>: 某个给定键已经存在而导致设置未能成功</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MSETNX key1 &quot;Hello&quot; key2 &quot;there&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; MSETNX key2 &quot;new&quot; key3 &quot;world&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; MGET key1 key2 key3</span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;there&quot;</span><br><span class="line">3) (nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.1.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of keys to set.</p></blockquote><h4 id="1-2-14-PSETEX-key-milliseconds-value"><a href="#1-2-14-PSETEX-key-milliseconds-value" class="headerlink" title="1.2.14 PSETEX key milliseconds value"></a>1.2.14 <strong><a id="PSETEX">PSETEX key milliseconds value</a></strong></h4><p><code>PSETEX</code> 命令和 <code>SETEX</code> 命令相似， 但它以毫秒为单位设置 <code>key</code> 的生存时间， 而不是像 <a href="https://redis.com.cn/commands/setex.html">SETEX</a> 命令那样以秒为单位进行设置。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PSETEX key milliseconds value</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>设置成功时返回”OK”</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PSETEX mykey 10000 &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PTTL mykey</span><br><span class="line">(integer) 8171</span><br><span class="line">127.0.0.1:6379&gt; GET mykey</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-2-15-INCR-key"><a href="#1-2-15-INCR-key" class="headerlink" title="1.2.15 INCR key"></a>1.2.15 <strong><a id="INCR">INCR key</a></strong></h4><p>Redis <code>INCR</code>命令将 key 中储存的数字值增一。</p><p>如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 <code>INCR</code> 操作。</p><p>如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误 ERR ERR hash value is not an integer。</p><p>本操作的值限制在 64 位(bit)有符号数字表示之内。</p><p><strong>Note</strong>: 本质上这是一个字符串操作，因为Redis没有专门的整数类型。存储在 key 中的字符串被转换为十进制有符号整数，在此基础上加1。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INCR KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 执行 INCR 命令之后 key 的值。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET mykey &quot;10&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCR mykey</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; GET mykey</span><br><span class="line">&quot;11&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数字值在 Redis 中以字符串的形式保存</span></span><br><span class="line">127.0.0.1:6379&gt; SET mykey 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCR mykey</span><br><span class="line">(integer) 21</span><br><span class="line">127.0.0.1:6379&gt; GET mykey</span><br><span class="line">&quot;21&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-2-16-INCRBY-key-increment"><a href="#1-2-16-INCRBY-key-increment" class="headerlink" title="1.2.16 INCRBY key increment"></a>1.2.16 <strong><a id="INCRBY">INCRBY key increment</a></strong></h4><p>Redis <code>INCRBY</code> 命令将 key 中储存的数字加上指定的增量值。</p><p>如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCRBY 命令。</p><p>如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误 ERR ERR hash value is not an integer。</p><p>本操作的值限制在 64 位(bit)有符号数字表示之内。</p><p>关于递增(increment) / 递减(decrement)操作的更多信息， 请参见 <code>INCR</code>  命令的文档。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INCRBY key increment</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 命令执行之后 key 中 存储的值。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET mykey &quot;10&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCRBY mykey 5</span><br><span class="line">(integer) 15</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-2-17-INCRBYFLOAT-key-increment"><a href="#1-2-17-INCRBYFLOAT-key-increment" class="headerlink" title="1.2.17 INCRBYFLOAT key increment"></a>1.2.17 <strong><a id="INCRBYFLOAT">INCRBYFLOAT key increment</a></strong></h4><p>为键 <code>key</code> 中储存的值加上浮点数增量 <code>increment</code> ，key 中的浮点数是以字符串形式存储的。</p><p>如果键 <code>key</code> 不存在， 那么 <code>INCRBYFLOAT</code> 会先将键 <code>key</code> 的值设为 <code>0</code> ， 然后再执行加法操作。</p><p>如果命令执行成功， 那么键 <code>key</code> 的值会被更新为执行加法计算之后的新值， 并且新值会以字符串的形式返回给调用者。</p><p>无论是键 <code>key</code> 的值还是增量 <code>increment</code> ， 都可以使用像 <code>2.0e7</code> 、 <code>3e5</code> 、 <code>90e-2</code> 那样的指数符号(exponential notation)来表示， 但是， <strong>执行 INCRBYFLOAT 命令之后的值</strong>总是以同样的形式储存， 也即是， 它们总是由一个数字， 一个（可选的）小数点和一个任意长度的小数部分组成（比如 <code>3.14</code> 、 <code>69.768</code> ，诸如此类)， 小数部分尾随的 <code>0</code> 会被移除， 如果可能的话， 命令还会将浮点数转换为整数（比如 <code>3.0</code> 会被保存成 <code>3</code> ）。</p><p>此外， 无论加法计算所得的浮点数的实际精度有多长， <code>INCRBYFLOAT</code>命令的计算结果最多只保留小数点的后十七位。</p><p>当以下任意一个条件发生时， 命令返回一个错误：</p><ul><li>键 <code>key</code> 的值不是字符串类型(因为 Redis 中的数字和浮点数都以字符串的形式保存，所以它们都属于字符串类型）；</li><li><p>键 <code>key</code> 当前的值或者给定的增量 <code>increment</code> 不能被解释(parse)为双精度浮点数。</p></li><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INCRBYFLOAT key increment</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 在加上增量 increment 之后， 键 key 的值。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET mykey 10.50</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCRBYFLOAT mykey 0.1</span><br><span class="line">&quot;10.6&quot;</span><br><span class="line">127.0.0.1:6379&gt; INCRBYFLOAT mykey -5</span><br><span class="line">&quot;5.6&quot;</span><br><span class="line">127.0.0.1:6379&gt; SET mykey 5.0e3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCRBYFLOAT mykey 2.0e2</span><br><span class="line">&quot;5200&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li><li><p><strong>实现细节</strong></p><p>INCR 命令族主要用在复制和 AOF 文件中，用来当做 SET，减少源 SET 命令个数，浮点的实现差异不会是不一致的来源。</p></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-2-18-DECR-key"><a href="#1-2-18-DECR-key" class="headerlink" title="1.2.18 DECR key"></a>1.2.18 <strong><a id="DECR">DECR key</a></strong></h4><p>为键 <code>key</code> 储存的数字值减去一。</p><p>如果键 <code>key</code> 不存在， 那么键 <code>key</code> 的值会先被初始化为 <code>0</code> ， 然后再执行 <code>DECR</code> 操作。</p><p>如果键 <code>key</code> 储存的值不能被解释为数字， 那么 <code>DECR</code> 命令将返回一个错误。</p><p>本操作的值限制在 64 位(bit)有符号数字表示之内。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DECR key</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 执行操作之后key中的值</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET mykey &quot;10&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECR mykey</span><br><span class="line">(integer) 9</span><br><span class="line">127.0.0.1:6379&gt; SET mykey &quot;13621873621786345326&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECR mykey</span><br><span class="line">(error) ERR value is not an integer or out of range</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-2-19-DECRBY-key-decrement"><a href="#1-2-19-DECRBY-key-decrement" class="headerlink" title="1.2.19 DECRBY key decrement"></a>1.2.19 <strong><a id="DECRBY">DECRBY key decrement</a></strong></h4><p>将键 key 储存的整数值减去减量 decrement 。<br>如果键 key 不存在， 那么键 key 的值会先被初始化为 0 ， 然后再执行 <code>DECRBY</code> 命令。<br>如果键 key 储存的值不能被解释为数字， 那么 <code>DECRBY</code> 命令将返回一个错误。<br>本操作的值限制在 64 位(bit)有符号数字表示之内。<br>关于更多递增(increment) / 递减(decrement)操作的更多信息， 请参见 <code>INCR</code> 命令的文档。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: <code>DECRBY</code> 命令会返回键在执行减法操作之后的值。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET mykey &quot;10&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY mykey 3</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-2-20-APPEND-key-value"><a href="#1-2-20-APPEND-key-value" class="headerlink" title="1.2.20 APPEND key value"></a>1.2.20 <strong><a id="APPEND">APPEND key value</a></strong></h4><p>Redis APPEND 命令用于为指定的 key 追加值。<br>如果 key 已经存在并且是一个字符串， <code>APPEND</code> 命令将 value 追加到 key 原来的值的末尾。<br>如果 key 不存在， <code>APPEND</code> 就简单地将给定 key 设为 value ，就像执行 <code>SET key value</code> 一样。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; APPEND KEY_NAME NEW_VALUE</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 追加指定值之后， key 中字符串的长度。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保 myphone 不存在</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS myphone</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对不存在的key 进行APPEND，等同于 SET myphone <span class="string">&quot;nokia&quot;</span></span></span><br><span class="line">127.0.0.1:6379&gt; APPEND myphone &quot;nokia&quot;</span><br><span class="line">(integer) 5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对已存在的字符串进行 APPEND。长度从5个字符串增加到11个字符串</span></span><br><span class="line">127.0.0.1:6379&gt; APPEND myphone &quot; - 222&quot;</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; GET myphone</span><br><span class="line">&quot;nokia - 222&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.</p></blockquote><h3 id="1-3-Hash-哈希表"><a href="#1-3-Hash-哈希表" class="headerlink" title="1.3 Hash(哈希表)"></a>1.3 <strong>Hash(哈希表)</strong></h3><h4 id="1-3-1-HDEL-key-field-field-…"><a href="#1-3-1-HDEL-key-field-field-…" class="headerlink" title="1.3.1 HDEL key field [field …]"></a>1.3.1 <strong><a id="HDEL">HDEL key field [field …]</a></strong></h4><p>Redis <code>HDEL</code> 命令用于删除哈希表 key 中的一个或多个指定字段，不存在的字段将被忽略。 如果 <code>key</code> 粗存在，会被当作空哈希表处理并返回 <code>0</code> 。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HDEL KEY_NAME FIELD1.. FIELDN </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 被成功删除字段的数量，不包括被忽略的字段。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HDEL myhash field1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HDEL myhash field2</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of fields to be removed.</p></blockquote><h4 id="1-3-2-HEXISTS-key-field"><a href="#1-3-2-HEXISTS-key-field" class="headerlink" title="1.3.2 HEXISTS key field"></a>1.3.2 <strong><a id="HEXISTS">HEXISTS key field</a></strong></h4><p>Redis Hexists 命令用于查看哈希表的指定字段<code>field</code> 是否存在。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HEXISTS KEY_NAME FIELD_NAME </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>整数, specifically:</p><ul><li><code>1</code> 哈希表含有给定字段<code>field</code>。</li><li><code>0</code> 哈希表不含有给定字段，或 key 不存在。</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash field1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash field2</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-3-3-HGET-key-field"><a href="#1-3-3-HGET-key-field" class="headerlink" title="1.3.3 HGET key field"></a>1.3.3 <strong><a id="HGET">HGET key field</a></strong></h4><p>Redis HGET 命令用于返回哈希表中指定字段 field 的值。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGET KEY_NAME FIELD_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 返回给定字段的值。如果给定的字段或 key 不存在时，返回 nil 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET myhash field1 &quot;foo&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字段存在</span></span><br><span class="line">127.0.0.1:6379&gt; HGET myhash field1</span><br><span class="line">&quot;foo&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字段不存在</span></span><br><span class="line">127.0.0.1:6379&gt; HGET myhash field2</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-3-4-HGETALL-key"><a href="#1-3-4-HGETALL-key" class="headerlink" title="1.3.4 HGETALL key"></a>1.3.4 <strong><a id="HGETALL">HGETALL key</a></strong></h4><p>Redis <code>HGETALL</code> 命令用于返回存储在 <code>key</code> 中的哈希表中所有的域和值。</p><p>在返回值里，紧跟每个域(field name)之后是域的值(value)，所以返回值的长度是哈希表大小的两倍。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGETALL KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 以列表形式返回哈希表的字段及字段值。 若 key 不存在，返回空列表。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET myhash field1 &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET myhash field2 &quot;World&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HGETALL myhash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;Hello&quot;</span><br><span class="line">3) &quot;field2&quot;</span><br><span class="line">4) &quot;World&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the size of the hash.</p></blockquote><h4 id="1-3-5-HINCRBY-key-field-increment"><a href="#1-3-5-HINCRBY-key-field-increment" class="headerlink" title="1.3.5 HINCRBY key field increment"></a>1.3.5 <strong><a id="HINCRBY">HINCRBY key field increment</a></strong></h4><p>为哈希表 <code>key</code> 中的域 <code>field</code> 的值加上增量 <code>increment</code> 。</p><p>增量也可以为负数，相当于对给定域进行减法操作。</p><p>如果 <code>key</code> 不存在，一个新的哈希表被创建并执行 <code>HINCRBY</code> 命令。</p><p>如果域 <code>field</code> 不存在，那么在执行命令前，域的值被初始化为 <code>0</code> 。</p><p>对一个储存字符串值的域 <code>field</code> 执行 <code>HINCRBY</code> 命令将造成一个错误 ERR ERR hash value is not an integer。</p><p>本操作的值被限制在 64 位(bit)有符号数字表示之内。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HINCRBY KEY_NAME FIELD_NAME INCR_BY_NUMBER </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 执行 HINCRBY 命令之后，哈希表 key 中域 field 的值。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET myhash field 5</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY myhash field 1</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY myhash field -1</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY myhash field -10</span><br><span class="line">(integer) -5</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-3-6-HINCRBYFLOAT-key-field-increment"><a href="#1-3-6-HINCRBYFLOAT-key-field-increment" class="headerlink" title="1.3.6 HINCRBYFLOAT key field increment"></a>1.3.6 <strong><a id="HINCRBYFLOAT">HINCRBYFLOAT key field increment</a></strong></h4><p>为哈希表 <code>key</code> 中的域 <code>field</code> 加上浮点数增量 <code>increment</code> 。</p><p>如果哈希表中没有域 <code>field</code> ，那么 INCRBYFLOAT 会先将域 <code>field</code> 的值设为 <code>0</code> ，然后再执行加法操作。</p><p>如果键 <code>key</code> 不存在，那么 INCRBYFLOAT 会先创建一个哈希表，再创建域 <code>field</code> ，最后再执行加法操作。</p><blockquote><p>当以下任意一个条件发生时，返回一个错误：</p><ul><li>域 <code>field</code> 的值不是字符串类型(因为 redis 中的数字和浮点数都以字符串的形式保存，所以它们都属于字符串类型）</li><li>域 <code>field</code> 当前的值或给定的增量 <code>increment</code> 不能解释(parse)为双精度浮点数(double precision floating point number)</li></ul><p>命令的详细功能和 <code>INCRBYFLOAT</code>命令类似，请查看 <code>INCRBYFLOAT</code>命令获取更多相关信息。</p></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HINCRBYFLOAT key field increment</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 执行加法操作之后 field 域的值</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET myhash field 10.50</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HINCRBYFLOAT myhash field 0.1</span><br><span class="line">&quot;10.6&quot;</span><br><span class="line">127.0.0.1:6379&gt; HINCRBYFLOAT myhash field -5</span><br><span class="line">&quot;5.6&quot;</span><br><span class="line">127.0.0.1:6379&gt; HSET myhash field 5.0e3</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; HINCRBYFLOAT myhash field 2.0e2</span><br><span class="line">&quot;5200&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-3-7-HKEYS-key"><a href="#1-3-7-HKEYS-key" class="headerlink" title="1.3.7 HKEYS key"></a>1.3.7 <strong><a id="HKEYS">HKEYS key</a></strong></h4><p>HKEYS 返回存储在 key 中哈希表的所有域。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HKEYS key</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 包含哈希表中所有域的表。当 key 不存在时，返回空表。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET myhash field1 &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET myhash field2 &quot;World&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HKEYS myhash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;field2&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the size of the hash.</p></blockquote><h4 id="1-3-8-HLEN-key"><a href="#1-3-8-HLEN-key" class="headerlink" title="1.3.8 HLEN key"></a>1.3.8 <strong><a id="HLEN">HLEN key</a></strong></h4><p>Redis HLEN 命令用于获取哈希表中字段(fields)的数量。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HLEN key</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 哈希表中字段的数量。 当 key 不存在时，返回 0 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET myhash field1 &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET myhash field2 &quot;World&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HLEN myhash</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-3-9-HMGET-key-field-field-…"><a href="#1-3-9-HMGET-key-field-field-…" class="headerlink" title="1.3.9 HMGET key field [field …]"></a>1.3.9 <strong><a id="HMGET">HMGET key field [field …]</a></strong></h4><p>Redis HMGET 命令用于返回哈希表中，一个或多个给定字段（field）的值。</p><p>如果指定的字段（field）不存在于哈希表或者 key 不存在，那么返回一个 nil 值。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMGET key field [field ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 返回要查询的field对应值的列表，值的顺序field在命令中出现的顺序排列。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET myhash field1 &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET myhash field2 &quot;World&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HMGET myhash field1 field2 nofield</span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;World&quot;</span><br><span class="line">3) (nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of fields being requested.</p></blockquote><h4 id="1-3-10-HMSET-key-field-value-field-value-…"><a href="#1-3-10-HMSET-key-field-value-field-value-…" class="headerlink" title="1.3.10 HMSET key field value [field value …]"></a>1.3.10 <strong><a id="HMSET">HMSET key field value [field value …]</a></strong></h4><p>Redis HMSET 命令用于同时将多个 field-value (字段-值)对设置到哈希表中。</p><p>此命令会覆盖哈希表中已存在的字段。</p><p>如果哈希表不存在，会创建一个空哈希表，并执行 HMSET 操作。</p><p>Redis 4.0.0起，HMSET 被废弃，请使用 HSET 代替。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET key field value [field value ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong></p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET myhash field1 &quot;Hello&quot; field2 &quot;World&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HGET myhash field1</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; HGET myhash field2</span><br><span class="line">&quot;World&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of fields being set.</p></blockquote><h4 id="1-3-11-HSET-key-field-value-field-value-…"><a href="#1-3-11-HSET-key-field-value-field-value-…" class="headerlink" title="1.3.11 HSET key field value [field value …]"></a>1.3.11 <strong><a id="HSET">HSET key field value [field value …]</a></strong></h4><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET key field value [field value ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 被修改或增加的 <code>field</code> 个数。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET myhash field1 &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HGET myhash field1</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.</p></blockquote><h4 id="1-3-12-HSETNX-key-field-value"><a href="#1-3-12-HSETNX-key-field-value" class="headerlink" title="1.3.12 HSETNX key field value"></a>1.3.12 <strong><a id="HSETNX">HSETNX key field value</a></strong></h4><p>Redis HSETNX 命令用于为哈希表中不存在的字段赋值 。</p><p>如果字段已经存在于哈希表中，操作无效。</p><p>如果 key 不存在，一个新哈希表被创建并执行 HSETNX 命令。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSETNX key field value</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>:</p><ul><li><code>1</code> <code>field</code> 设置成功。</li><li><code>0</code> <code>field</code> 已存在，设置失败。</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSETNX myhash field &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HSETNX myhash field &quot;World&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; HGET myhash field</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-3-13-HVALS-key"><a href="#1-3-13-HVALS-key" class="headerlink" title="1.3.13 HVALS key"></a>1.3.13 <strong><a id="HVALS">HVALS key</a></strong></h4><p>Redis HVALS 命令返回哈希表所有域(field)的值。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HVALS key</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 返回哈希表中所有域(field)值的列表。 当 key 不存在时，返回空表。 not exist.</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET myhash field1 &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET myhash field2 &quot;World&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HVALS myhash</span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;World&quot;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the size of the hash.</p></blockquote><h4 id="1-3-14-HSCAN-key-cursor-MATCH-pattern-COUNT-count"><a href="#1-3-14-HSCAN-key-cursor-MATCH-pattern-COUNT-count" class="headerlink" title="1.3.14 HSCAN key cursor [MATCH pattern] [COUNT count]"></a>1.3.14 <strong><a id="HSCAN">HSCAN key cursor [MATCH pattern] [COUNT count]</a></strong></h4><p>Redis HSCAN 命令用于遍历哈希表中的键值对。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSCAN key cursor [MATCH pattern] [COUNT count]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li><strong>cursor</strong>: 游标。</li><li><strong>pattern</strong>: 匹配的模式。</li><li><strong>count</strong>: 指定从数据集里返回多少元素，默认值为 10 。</li></ul></li><li><p><strong>返回值：</strong></p><p>返回的每个元素都是一个元组，每一个元组元素由一个字段(field) 和值（value）组成。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET sites google &quot;google.com&quot; kungs &quot;yanpenggong&quot; weibo &quot;weibo.com&quot; 8 &quot;alibaba.com&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HSCAN sites 0 match &quot;goog*&quot;</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;google&quot;</span><br><span class="line">   2) &quot;google.com&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.0.</strong></p><p><strong>时间复杂度:</strong> O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..</p></blockquote><h4 id="1-3-15-HSTRLEN-key-field"><a href="#1-3-15-HSTRLEN-key-field" class="headerlink" title="1.3.15 HSTRLEN key field"></a>1.3.15 <strong><a id="HSTRLEN">HSTRLEN key field</a></strong></h4><p>Redis HSTRLEN 命令返回存储在 <code>key</code> 中的哈希表里， 与给定域 <code>field</code> 相关联的值的字符串长度（string length）。</p><p>如果给定的键或者域不存在， 那么命令返回 <code>0</code> 。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSTRLEN key field</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 值的字符串长度，key 或 field 不存在时返回 0。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET myhash f1 HelloWorld f2 88 f3 -516</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HSTRLEN myhash f1</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; HSTRLEN myhash f2</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; HSTRLEN myhash f3</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 3.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h3 id="1-4-List-列表"><a href="#1-4-List-列表" class="headerlink" title="1.4 List(列表)"></a>1.4 <strong>List(列表)</strong></h3><h4 id="1-4-1-BLPOP-key-key-…-timeout"><a href="#1-4-1-BLPOP-key-key-…-timeout" class="headerlink" title="1.4.1 BLPOP key [key …] timeout"></a>1.4.1 <strong><a id="BLPOP">BLPOP key [key …] timeout</a></strong></h4><p>Redis BLPOP 命令移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。它是 LPOP 的阻塞版本。<br>当给定多个 key 参数时，按参数 key 的先后顺序依次检查各个列表，弹出第一个非空列表的头元素。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BLPOP LIST1 LIST2 .. LISTN TIMEOUT</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>:</p><ul><li>如果列表为空或超时，返回一个 <code>nil</code>。 </li><li>返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的值。</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DEL list1 list2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH list1 a b c</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; BLPOP list1 list2 0</span><br><span class="line">1) &quot;list1&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; BLPOP list1 10</span><br><span class="line">1) &quot;list1&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">127.0.0.1:6379&gt; BLPOP list1 10</span><br><span class="line">1) &quot;list1&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; BLPOP list1 10</span><br><span class="line">(nil)</span><br><span class="line">(10.08s)</span><br><span class="line">127.0.0.1:6379&gt; BLPOP list2 10</span><br><span class="line">(nil)</span><br><span class="line">(10.07s)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>在实例中，操作会被阻塞，如果指定的列表 key list2 存在数据则会返回第一个元素，否则在等待10秒后会返回 nil 。</p></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-4-2-BRPOP-key-key-…-timeout"><a href="#1-4-2-BRPOP-key-key-…-timeout" class="headerlink" title="1.4.2 BRPOP key [key …] timeout"></a>1.4.2 <strong><a id="BRPOP">BRPOP key [key …] timeout</a></strong></h4><p>BRPOP 是阻塞列表的移除原语。从给的列表参数中按顺序检查第一个不空的列表，然后从该列表的尾部移除元素。 BRPOP 是 RPOP 的阻塞版本，因为当没有元素从给定的列表中移除的时候，BRPOP 阻塞连接。</p><blockquote><p>参考 BLPOP documentation 了解更多信息，因为 BRPOP 和 BLPOP 的功能是相同的，除了他们一个是从列表头部（左边），另一个是从列表尾部（右边）移除元素。</p></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BRPOP LIST1 LIST2 .. LISTN TIMEOUT </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>:</p><ul><li>所有列表为空并且超时时，返回 <code>nil</code> 。</li><li>一个两个成员的数组，第一个元素是被移除元素的key的名字，第二个元素是被移除元素的值。</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DEL list1 list2</span><br><span class="line">Error: Broken pipe</span><br><span class="line">127.0.0.1:6379&gt; RPUSH list1 a b c</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; BRPOP list1 list2 0</span><br><span class="line">1) &quot;list1&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-4-3-BRPOPLPUSH-source-destination-timeout"><a href="#1-4-3-BRPOPLPUSH-source-destination-timeout" class="headerlink" title="1.4.3 BRPOPLPUSH source destination timeout"></a>1.4.3 <strong><a id="BRPOPLPUSH">BRPOPLPUSH source destination timeout</a></strong></h4><p>Redis BRPOPLPUSH 命令从列表中取出最后一个元素，并插入到另外一个列表的头部； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。<br>BRPOPLPUSH 是 <code>RPOPLPUSH</code>的阻塞版本，当给定列表 <code>source</code> 不为空时， <code>BRPOPLPUSH</code>的表现和 RPOPLPUSH 一样。<br>超时参数 <code>timeout</code> 接受一个以秒为单位的数字作为值。超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely) 。<br>从 Redis 6.2.0 起，建议使用 <code>BLMOVE</code> 替代 <code>BRPOPLPUSH</code>。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BRPOPLPUSH LIST1 ANOTHER_LIST TIMEOUT</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。 反之，返回一个含有两个元素的列表，第一个元素是被弹出元素的值，第二个元素是等待时长。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH msg &quot;hello yanpenggong&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; BRPOPLPUSH msg reciver 10</span><br><span class="line">&quot;hello yanpenggong&quot;</span><br><span class="line">127.0.0.1:6379&gt; LLEN reciver</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE reciver 0 0</span><br><span class="line">1) &quot;hello yanpenggong&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">空列表</span></span><br><span class="line">127.0.0.1:6379&gt; RPOP msg</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; BRPOPLPUSH msg reciver 10</span><br><span class="line">(nil)</span><br><span class="line">(10.05s)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-4-4-LINDEX-key-index"><a href="#1-4-4-LINDEX-key-index" class="headerlink" title="1.4.4 LINDEX key index"></a>1.4.4 <strong><a id="LINDEX">LINDEX key index</a></strong></h4><p>LINDEX 返回列表 key 里索引 index 位置存储的元素。</p><p> index 下标是从 0 开始索引的，所以 0 是表示第一个元素， 1 表示第二个元素，并以此类推。 </p><p>负数索引用于指定从列表尾部开始索引的元素，在这种方法下，-1 表示最后一个元素，-2 表示倒数第二个元素，并以此往前推。<br>当 key 值不是列表的时候，会返回错误。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LINDEX key index</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 查询的元素，<code>index</code> 超出索引范围时返回 <code>nil</code> 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH mylist &quot;World&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH mylist &quot;Hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LINDEX mylist 0</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; LINDEX mylist -1</span><br><span class="line">&quot;World&quot;</span><br><span class="line">127.0.0.1:6379&gt; LINDEX mylist 3</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).</p></blockquote><h4 id="1-4-5-LINSERT-key-BEFORE-AFTER-pivot-element"><a href="#1-4-5-LINSERT-key-BEFORE-AFTER-pivot-element" class="headerlink" title="1.4.5 LINSERT key BEFORE|AFTER pivot element"></a>1.4.5 <strong><a id="LINSERT">LINSERT key BEFORE|AFTER pivot element</a></strong></h4><p>Redis LINSERT 用于把 <code>element</code> 插入到列表 <code>key</code> 中，参考值 pivot 的前面或后面。</p><p>当 <code>key</code> 不存在时，这个list会被看作是空list，什么都不执行。</p><p>当 <code>key</code> 存在，值不是列表类型时，返回错误。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LINSERT key BEFORE|AFTER pivot element</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 执行操作后的列表长度，列表中<code>pivot</code>参考值不存在的时候返回 <code>-1</code>。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;World&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LINSERT mylist BEFORE &quot;World&quot; &quot;There&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;There&quot;</span><br><span class="line">3) &quot;World&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.2.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).</p></blockquote><h4 id="1-4-6-LLEN-key"><a href="#1-4-6-LLEN-key" class="headerlink" title="1.4.6 LLEN key"></a>1.4.6 <strong><a id="LLEN">LLEN key</a></strong></h4><p>Redis LLEN 用于返回存储在 <code>key</code> 中的列表长度。 如果 <code>key</code> 不存在，则 <code>key</code>被解释为一个空列表，返回 <code>0</code> 。 如果 <code>key</code> 不是列表类型，返回一个错误。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LLEN KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>整数: 列表的长度。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; LPUSH mylist &quot;World&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH mylist &quot;Hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH mylist &quot;yanpenggong&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LLEN mylist</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-4-7-LPOP-key"><a href="#1-4-7-LPOP-key" class="headerlink" title="1.4.7 LPOP key"></a>1.4.7 <strong><a id="LPOP">LPOP key</a></strong></h4><p>Redis LPOP 命令用于删除并返回存储在 <code>key</code> 中的列表的第一个元素。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPOP key</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 列表的首元素，<code>key</code> 不存在的时候返回 <code>nil</code> 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LPOP mylist</span><br><span class="line">&quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-4-8-LPUSH-key-element-element-…"><a href="#1-4-8-LPUSH-key-element-element-…" class="headerlink" title="1.4.8 LPUSH key element [element …]"></a>1.4.8 <strong><a id="LPUSH">LPUSH key element [element …]</a></strong></h4><p>redis LPUSH 用于将一个或多个值插入到列表<code>key</code> 的头部。</p><p>如果 key 不存在，那么在进行 push 操作前会创建一个空列表。 </p><p>如果 key 对应的值不是 list 类型，那么会返回一个错误。</p><p>可以使用一个命令把多个元素 push 进入列表，只需在命令末尾加上多个指定的参数。</p><p>元素按在参数中出现的顺序，从左到右依次插入到 list 的头部。 </p><p>所以对于这个命令例子 <code>LPUSH mylist a b c</code>，返回的列表是 c 为第一个元素， b 为第二个元素， a 为第三个元素。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH KEY_NAME VALUE1.. VALUEN</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 执行push操作后列表的长度。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH mylist &quot;world&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH mylist &quot;Hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.</p></blockquote><h4 id="1-4-9-LPUSHX-key-element-element-…"><a href="#1-4-9-LPUSHX-key-element-element-…" class="headerlink" title="1.4.9 LPUSHX key element [element …]"></a>1.4.9 <strong><a id="LPUSHX">LPUSHX key element [element …]</a></strong></h4><p>Redis LPUSHX 在当 key 存在并且存储着一个 list 类型值的时候，向值 list 的头部插入 value。 与 LPUSH 相反，当 key 不存在的时候不会进行任何操作。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSHX KEY_NAME VALUE1.. VALUEN</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 执行push操作后列表list的长度。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH mylist &quot;world&quot; &quot;Hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSHX mylist &quot;kungs&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LPUSHX mylist1 &quot;kungs&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;kungs&quot;</span><br><span class="line">2) &quot;Hello&quot;</span><br><span class="line">3) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist1 0 -1</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.</p></blockquote><h4 id="1-4-10-LRANGE-key-start-stop"><a href="#1-4-10-LRANGE-key-start-stop" class="headerlink" title="1.4.10 LRANGE key start stop"></a>1.4.10 <strong><a id="LRANGE">LRANGE key start stop</a></strong></h4><p>Redis LRANGE 用于返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。 </p><p>其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。</p><p> 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LRANGE KEY_NAME START END</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 一个列表，包含指定区间内的元素。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 0</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist -3 2</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist -100 100</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 5 10</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.</p></blockquote><h4 id="1-4-11-LREM-key-count-element"><a href="#1-4-11-LREM-key-count-element" class="headerlink" title="1.4.11 LREM key count element"></a>1.4.11 <strong><a id="LREM">LREM key count element</a></strong></h4><p>Redis LREM 用于从列表 key 中删除前 count 个值等于 element 的元素。 这个 count 参数通过下面几种方式影响这个操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">count &gt; 0: 从头到尾删除值为 value 的元素。</span><br><span class="line">count &lt; 0: 从尾到头删除值为 value 的元素。</span><br><span class="line">count = 0: 移除所有值为 value 的元素。</span><br></pre></td></tr></table></figure><p>比如， <code>LREM list -2 &quot;hello&quot;</code> 会从列表key中删除最后两个出现的 “hello”。</p><p>需要注意的是，不存在key会被当作空list处理，所以当 key 不存在的时候，这个命令会返回 0。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LREM key count VALUE</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 删除元素个数。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;Hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;World&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;Hello&quot;</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; LREM mylist -2 &quot;Hello&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;World&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N+M) where N is the length of the list and M is the number of elements removed.</p></blockquote><h4 id="1-4-12-LSET-key-index-element"><a href="#1-4-12-LSET-key-index-element" class="headerlink" title="1.4.12 LSET key index element"></a>1.4.12 <strong><a id="LSET">LSET key index element</a></strong></h4><p>Redis LSET 用于设置列表 key 中 index 位置的元素值为 <code>element</code>。 更多关于 index 参数的信息，详见 <a href="#LINDEX">LINDEX</a>。</p><p>当 index 超出列表索引范围时会返回错误<code>ERR ERR index out of range</code>。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LSET KEY_NAME INDEX VALUE</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 操作成功返回 ok ，否则返回错误信息。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LSET mylist 0 &quot;four&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LSET mylist -2 &quot;five&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;four&quot;</span><br><span class="line">2) &quot;five&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).</p></blockquote><h4 id="1-4-13-LTRIM-key-start-stop"><a href="#1-4-13-LTRIM-key-start-stop" class="headerlink" title="1.4.13 LTRIM key start stop"></a>1.4.13 <strong><a id="LTRIM">LTRIM key start stop</a></strong></h4><p>Redis Ltrim 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</p><p>start 和 stop 都是由0开始计数的， 这里的 0 是列表里的第一个元素（表头），1 是第二个元素，以此类推。</p><p>start 和 end 也可以用负数来表示与表尾的偏移量，比如 -1 表示列表里的最后一个元素， -2 表示倒数第二个，等等。</p><p>超过范围的下标并不会产生错误：如果 start 超过列表尾部，或者 start &gt; end，结果会是列表变成空表（即该 key 会被移除）。 如果 end 超过列表尾部，Redis 会将其当作列表的最后一个元素。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LTRIM KEY_NAME START STOP</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 命令执行成功时，返回 ok 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LTRIM mylist 1 -1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of elements to be removed by the operation.</p></blockquote><h4 id="1-4-14-RPOP-key"><a href="#1-4-14-RPOP-key" class="headerlink" title="1.4.14 RPOP key"></a>1.4.14 <strong><a id="RPOP">RPOP key</a></strong></h4><p>Redis RPOP 用于移除并返回列表 <code>key</code> 的最后一个元素。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPOP KEY_NAME </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 最后一个元素的值，<code>key</code> 不存在时返回 <code>nil</code> 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; RPOP mylist</span><br><span class="line">&quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-4-15-RPOPLPUSH-source-destination"><a href="#1-4-15-RPOPLPUSH-source-destination" class="headerlink" title="1.4.15 RPOPLPUSH source destination"></a>1.4.15 <strong><a id="RPOPLPUSH">RPOPLPUSH source destination</a></strong></h4><p>用于原子地从列表 <code>source</code> 中移除并返回最后一个元素，然后把这个元素插入为列表<code>destination</code> 的第一个元素。</p><p>例如: 假设 <code>source</code> 列表成员为 <code>a,b,c</code>，列表 <code>destination</code> 成员为 <code>x,y,z</code>。</p><p>执行 <code>RPOPLPUSH source destination</code> 的结果是列表 <code>source</code> 成员为<code>a,b</code> ，列表 <code>destination</code> 成员为<code>c,x,y,z</code>。</p><p>如果列表 <code>source</code> 不存在，返回 <code>nil</code> ，什么也不执行。</p><p>如果列表 <code>source</code> 和<code>destination</code> 相同，相当于从列表的一端删除元素，在放入列表的另一端，所以可以当做一个列表循环命令。</p><p><code>LMOVE</code> 用来替换废弃的指令 <code>RPOPLPUSH</code>，相当于执行<code>LMOVE RIGHT LEFT</code>。</p><p>从 Redis 6.2.0起， RPOPLPUSH 被废弃，使用 <a href="#LMOVE">LMOVE</a>替代。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 移除并又插入的元素。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; RPOPLPUSH mylist myotherlist</span><br><span class="line">&quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE myotherlist 0 -1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-4-16-RPUSH-key-element-element-…"><a href="#1-4-16-RPUSH-key-element-element-…" class="headerlink" title="1.4.16 RPUSH key element [element …]"></a>1.4.16 <strong><a id="RPUSH">RPUSH key element [element …]</a></strong></h4><p>RPUSH 向存存储在 key 中的列表的尾部插入所有指定的值。如果 key 不存在，那么会创建一个空的列表然后再进行 push 操作。 当 key 保存的不是列表，那么会返回一个错误。</p><p>可以使用<code>RPUSH</code>命令把多个元素插入队列，只需要在命令后面指定多个参数。元素是从左到右按序从列表尾部插入。 比如命令 <code>RPUSH mylist a b c</code> 会返回一个列表，其第一个元素是 a ，第二个元素是 b ，第三个元素是 c。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH KEY_NAME VALUE1..VALUEN</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 执行 push 操作后的列表长度。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;World&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;World&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.</p></blockquote><h4 id="1-4-17-RPUSHX-key-element-element-…"><a href="#1-4-17-RPUSHX-key-element-element-…" class="headerlink" title="1.4.17 RPUSHX key element [element …]"></a>1.4.17 <strong><a id="RPUSHX">RPUSHX key element [element …]</a></strong></h4><p><code>RPUSHX</code>将值 value 插入到列表 <code>key</code> 的表尾, 当且仅当 <code>key</code> 存在并且是一个列表。 和 <code>RPUSH</code>命令相反, 当 key 不存在时，RPUSHX 命令什么也不做。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSHX KEY_NAME VALUE1..VALUEN</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: RPUSHX 命令执行之后列表的长度。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist &quot;World&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSHX myotherlist &quot;World&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;World&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE myotherlist 0 -1</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.</p></blockquote><h3 id="1-5-Sets-集合"><a href="#1-5-Sets-集合" class="headerlink" title="1.5 Sets(集合)"></a>1.5 <strong>Sets(集合)</strong></h3><h4 id="1-5-1-SADD-key-member-member-…"><a href="#1-5-1-SADD-key-member-member-…" class="headerlink" title="1.5.1 SADD key member [member …]"></a>1.5.1 <strong><a id="SADD">SADD key member [member …]</a></strong></h4><p>Redis Sadd 命令将一个或多个成员元素加入到集合中，已经存在于集合的成员元素将被忽略。</p><p>假如集合 key 不存在，则创建一个只包含被添加的元素作为成员的集合。</p><p>当集合 key 不是集合类型时，返回一个错误。</p><p><strong>注意：</strong>在 Redis2.4 版本以前， SADD 只接受单个成员值。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD KEY_NAME VALUE1..VALUEN</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 返回新成功添加到集合里元素的数量，不包括已经存在于集合中的元素。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD myset &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD myset &quot;World&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;World&quot;</span><br><span class="line">2) &quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.</p></blockquote><h4 id="1-5-2-SCARD-key"><a href="#1-5-2-SCARD-key" class="headerlink" title="1.5.2 SCARD key"></a>1.5.2 <strong><a id="SCARD">SCARD key</a></strong></h4><p>Redis SCARD 命令返回集合中元素的数量。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCARD KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 集合中成员的数量。 当集合 key 不存在时，返回 0 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD myset &quot;Hello&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD myset &quot;World&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SCARD myset</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-5-3-SDIFF-key-key-…"><a href="#1-5-3-SDIFF-key-key-…" class="headerlink" title="1.5.3 SDIFF key [key …]"></a>1.5.3 <strong><a id="SDIFF">SDIFF key [key …]</a></strong></h4><p>Redis SDIFF 命令返回第一个集合与其他集合之间的差异，也可以认为说第一个集合中独有的元素。不存在的集合 key 将视为空集。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SDIFF FIRST_KEY OTHER_KEY1..OTHER_KEYN </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 包含差集成员的列表。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD key1 a b c d</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; SADD key2 c</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD key3 a c e</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SDIFF key1 key2 key3</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;d&quot;</span><br><span class="line">127.0.0.1:6379&gt; SDIFF key1 key2</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;d&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">可用版本&gt;= 1.0.0.</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>时间复杂度: O(N) where N is the total number of elements in all given sets.</p></blockquote><h4 id="1-5-4-SDIFFSTORE-destination-key-key-…"><a href="#1-5-4-SDIFFSTORE-destination-key-key-…" class="headerlink" title="1.5.4 SDIFFSTORE destination key [key …]"></a>1.5.4 <strong><a id="SDIFFSTORE">SDIFFSTORE destination key [key …]</a></strong></h4><p><code>SDIFFSTORE</code> 命令的作用和<code>SDIFF</code>类似，不同的是它将结果保存到 <code>destination</code> 集合，而把结果集返回给客户端。</p><p>如果 <code>destination</code> 集合已经存在，则将其覆盖。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SDIFFSTORE DESTINATION_KEY KEY1..KEYN</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 结果集中成员数量。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD key1 a b c d</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; SADD key2 c d e</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SDIFFSTORE key key1 key2</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS key</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the total number of elements in all given sets.</p></blockquote><h4 id="1-5-5-SINTER-key-key-…"><a href="#1-5-5-SINTER-key-key-…" class="headerlink" title="1.5.5 SINTER key [key …]"></a>1.5.5 <strong><a id="SINTER">SINTER key [key …]</a></strong></h4><script type="math/tex; mode=display">\begin{array}{}key1 = \{a,b,c,d\}\\key2 = \{c\}\\key3 = \{a,c,e\}\\SINTER\quad key1\quad key2\quad key3 = \{c\}\end{array}</script><p>对于不存在的 <code>key</code> 可以认为是空集合。</p><p>如果给定的<code>key</code>中有一个空集合，那么结果集一定是空集合。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SINTER KEY KEY1..KEYN </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 结果集成员个数。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD key1 a b c d</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; SADD key2 c d e</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SINTER key1 key2</span><br><span class="line">1) &quot;d&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.</p></blockquote><h4 id="1-5-6-SINTERSTORE-destination-key-key-…"><a href="#1-5-6-SINTERSTORE-destination-key-key-…" class="headerlink" title="1.5.6 SINTERSTORE destination key [key …]"></a>1.5.6 <strong><a id="SINTERSTORE">SINTERSTORE destination key [key …]</a></strong></h4><p>SINTERSTORE 命令与 SINTER 命令类似，不同的是它并不是直接返回结果集，而是将结果保存在 destination 集合中。<br>如果 destination 集合存在, 则会被覆盖。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SINTERSTORE DESTINATION_KEY KEY KEY1..KEYN</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 结果集中成员数量。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DEL key key1key2 key3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; DEL key key1 key2 key3</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; SADD key1 a b c</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SADD key2 c d e</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SINTERSTORE key key1 key2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS key</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.</p></blockquote><h4 id="1-5-7-SISMEMBER-key-member"><a href="#1-5-7-SISMEMBER-key-member" class="headerlink" title="1.5.7 SISMEMBER key member"></a>1.5.7 <strong><a id="SISMEMBER">SISMEMBER key member</a></strong></h4><p>Redis SISMEMBER 用于判断元素 member 是否集合 key 的成员。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SISMEMBER KEY MEMBER</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>:</p><ul><li><code>1</code>: 如果成员元素是集合的成员，返回 1 。 </li><li><code>0</code>: 如果成员元素不是集合的成员，或 <code>key</code> 不存在，返回 0 。</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD myset &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset &quot;two&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-5-8-SMEMBERS-key"><a href="#1-5-8-SMEMBERS-key" class="headerlink" title="1.5.8 SMEMBERS key"></a>1.5.8 <strong><a id="SMEMBERS">SMEMBERS key</a></strong></h4><p>Redis SISMEMBER 命令返回存储在 <code>key</code> 中的集合的所有的成员。 不存在的集合被视为空集合。<br>SISMEMBER 与运行带有一个参数 <code>key</code> 的 SINTER 有同样的效果。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SMEMBERS key</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 集合中的所有成员。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD myset &quot;Hello&quot; &quot;World&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;World&quot;</span><br><span class="line">2) &quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the set cardinality.</p></blockquote><h4 id="1-5-9-SMOVE-source-destination-member"><a href="#1-5-9-SMOVE-source-destination-member" class="headerlink" title="1.5.9 SMOVE source destination member"></a>1.5.9 <strong><a id="SMOVE">SMOVE source destination member</a></strong></h4><p>Redis SMOVE 命令用于从集合<code>source</code> 中移动成员<code>member</code> 到集合 <code>destination</code>。 这个操作是原子操作。 在任何时刻，<code>member</code> 只会存在于<code>source</code> 和<code>destination</code> 其中之一。</p><p>如果集合<code>source</code> 不存在，或者要移动的成员不是集合<code>source</code> 的成员，什么也不执行并返回 <code>0</code> 。</p><p>否则，其它情况下，从集合<code>source</code> 中删除成员并添加到集合 <code>destination</code>。</p><p>如果要移动的元素在集合 <code>destination</code>中已经存在，那么只是从集合<code>source</code>中删除该成员。</p><p>如果 <code>source</code> 或<code>destination</code> 不是集合类型则返回错误。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SMOVE SOURCE DESTINATION MEMBER</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>:</p><ul><li><code>1</code>: 移动元素成功。</li><li><code>0</code>: 如果要移动的 element 不是<code>source</code> 的成员，什么也不执行。</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD myset &quot;one&quot; &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; SADD myotherset &quot;three&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SMOVE myset myotherset &quot;two&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myotherset</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-5-10-SPOP-key-count"><a href="#1-5-10-SPOP-key-count" class="headerlink" title="1.5.10 SPOP key [count]"></a>1.5.10 <strong><a id="SPOP">SPOP key [count]</a></strong></h4><p>Redis SPOP 命令用于从集合 <code>key</code>中删除并返回一个或多个随机元素。</p><p>这个命令和 SRANDMEMBER 相似， SRANDMEMBER 只返回随机成员但是不删除这些返回的成员。</p><p>参数 <code>count</code> 从 Redis 3.2 起可用</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SPOP key [count]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 被删除的元素，当<code>key</code>不存在时返回<code>nil</code>。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD myset &quot;one&quot; &quot;two&quot; &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SPOP myset</span><br><span class="line">&quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; SADD myset &quot;four&quot; &quot;five&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; SPOP myset 3</span><br><span class="line">1) &quot;four&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;five&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-5-11-SRANDMEMBER-key-count"><a href="#1-5-11-SRANDMEMBER-key-count" class="headerlink" title="1.5.11 SRANDMEMBER key [count]"></a>1.5.11 <strong><a id="SRANDMEMBER">SRANDMEMBER key [count]</a></strong></h4><p>Redis SRANDMEMBER 命令仅使用<code>key</code> 参数，那么随机返回集合<code>key</code> 中的一个随机元素。</p><p>Redis 2.6开始，可以接受 count 参数，如果count是整数且小于元素的个数，返回含有 count 个不同的元素的数组，如果count是个整数且大于集合中元素的个数时，返回整个集合的所有元素，当count是负数，则会返回一个包含count的绝对值的个数元素的数组，如果count的绝对值大于元素的个数，则返回的结果集里会出现一个元素出现多次的情况.</p><p>仅提供key参数时，该命令作用类似于<code>SPOP</code>命令，不同的是<code>SPOP</code>命令会将被选择的随机元素从集合中移除，而<code>SRANDMEMBER</code> 仅仅是返回该随记元素，而不对原集合做任何操作。</p><blockquote><p><strong>传递count参数时的行为规范</strong></p><p>当传递了一个值为正数的count参数，返回的元素就好像从集合中移除了每个选中的元素一样（就像在宾果游戏中提取数字一样）。但是<strong>元素不会从集合中移除</strong>。所以基本上：</p><ul><li>不会返回重复的元素。</li><li>如果count参数的值大于集合内的元素数量，此命令将会仅返回整个集合，没有额外的元素。</li></ul><p>相反，当count参数的值为负数时，此命令的行为将发生改变，并且提取操作就像在每次提取后，重新将取出的元素放回包里一样，因此，可能返回重复的元素，以及总是会返回我们请求的数量的元素，因为我们可以一次又一次地重复相同的元素，除了当集合为空（或者不存在key）的时候，将总是会返回一个空数组。</p><p><strong>返回元素的分布</strong></p><p>当集合中的元素数量很少时，返回元素分布远不够完美，这是因为我们使用了一个近似随机元素函数，它并不能保证良好的分布。</p><p>所使用的算法（在dict.c中实现）对哈希表桶进行采样以找到非空桶。一旦找到非空桶，由于我们在哈希表的实现中使用了链接法，因此会检查桶中的元素数量，并且选出一个随机元素。</p><p>这意味着，如果你在整个哈希表中有两个非空桶，其中一个有三个元素，另一个只有一个元素，那么其桶中单独存在的元素将以更高的概率返回。</p></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SRANDMEMBER KEY [count]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 不使用count 参数的情况下该命令返回随机的元素，如果key不存在则返回nil。 </p><p><strong>数组</strong>: 使用count参数,则返回一个随机的元素数组，如果key不存在则返回一个空的数组。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD myset one two three</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line">&quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset -5</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;one&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">4) &quot;three&quot;</span><br><span class="line">5) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.</p></blockquote><h4 id="1-5-12-SREM-key-member-member-…"><a href="#1-5-12-SREM-key-member-member-…" class="headerlink" title="1.5.12 SREM key member [member …]"></a>1.5.12 <strong><a id="SREM">SREM key member [member …]</a></strong></h4><p>SREM 用于在集合中删除指定的元素。如果指定的元素不是集合成员则被忽略。</p><p>如果集合 <code>key</code> 不存在则被视为一个空的集合，该命令返回0。</p><p>如果key的类型不是一个集合，则返回 ERR WRONGTYPE Operation against a key holding the wrong kind of value 错误</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SREM KEY MEMBER1..MEMBERN</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 被删除元素个数，不含不存在的元素。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD myset &quot;one&quot; &quot;two&quot; &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SREM myset &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SREM myset &quot;four&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of members to be removed.</p></blockquote><h4 id="1-5-13-SUNION-key-key-…"><a href="#1-5-13-SUNION-key-key-…" class="headerlink" title="1.5.13 SUNION key [key …]"></a>1.5.13 <strong><a id="SUNION">SUNION key [key …]</a></strong></h4><p>SUNION 命令用于返回所有给定集合的并集。例如:</p><script type="math/tex; mode=display">\begin{array}{}key1 = \{a,b,c,d\}\\key2 = \{c\}\\key3 = \{a,c,e\}\\SUNION\quad key1\quad key2\quad key3 = \{a,b,c,d,e\}\end{array}</script><p>对于不存在 key 被当做空集合处理。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUNION KEY KEY1..KEYN</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 结果集中成员数量。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD key1 &quot;a&quot; &quot;b&quot; &quot;c&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SADD key2 &quot;c&quot; &quot;d&quot; &quot;e&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SUNION key1 key2</span><br><span class="line">1) &quot;e&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">4) &quot;a&quot;</span><br><span class="line">5) &quot;d&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the total number of elements in all given sets.</p></blockquote><h4 id="1-5-14-SUNIONSTORE-destination-key-key-…"><a href="#1-5-14-SUNIONSTORE-destination-key-key-…" class="headerlink" title="1.5.14 SUNIONSTORE destination key [key …]"></a>1.5.14 <strong><a id="SUNIONSTORE">SUNIONSTORE destination key [key …]</a></strong></h4><p>SUNIONSTORE 命令的功能类似于 SUNION，不同的是不反回结果集，而是存储在 <code>destination</code> 中。</p><p>如果 <code>destination</code> 已经存在，则被覆盖。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 结果集中的成员数量。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD key1 &quot;a&quot; &quot;b&quot; &quot;c&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SADD key2 &quot;c&quot; &quot;d&quot; &quot;e&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SUNIONSTORE key key1 key2</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS key</span><br><span class="line">1) &quot;e&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">4) &quot;a&quot;</span><br><span class="line">5) &quot;d&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the total number of elements in all given sets.</p></blockquote><h4 id="1-5-15-SSCAN-key-cursor-MATCH-pattern-COUNT-count"><a href="#1-5-15-SSCAN-key-cursor-MATCH-pattern-COUNT-count" class="headerlink" title="1.5.15 SSCAN key cursor [MATCH pattern] [COUNT count]"></a>1.5.15 <strong><a id="SSCAN">SSCAN key cursor [MATCH pattern] [COUNT count]</a></strong></h4><p>Redis SSCAN 命令用于遍历集合中键的元素，SSCAN 继承自SCAN。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SSCAN key cursor [MATCH pattern] [COUNT count]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li>cursor - 游标。</li><li>pattern - 匹配的模式。</li><li>count - 指定从数据集里返回多少元素，默认值为 10 </li></ul></li><li><p><strong>返回值：</strong></p><p>数组列表。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD myset &quot;Mongodb&quot; &quot;Redis&quot; &quot;hive&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; SSCAN myset 0 match &quot;R*&quot;</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;Redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; SSCAN myset 2 match &quot;R*&quot;</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) (empty array)</span><br><span class="line">127.0.0.1:6379&gt; SSCAN myset -4 match R*</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;Redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; SSCAN myset 2 match *o*</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;Mongodb&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.0.</strong></p><p><strong>时间复杂度:</strong> O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..</p></blockquote><h3 id="1-6-Sorted-Sets-有序集合"><a href="#1-6-Sorted-Sets-有序集合" class="headerlink" title="1.6 Sorted Sets(有序集合)"></a>1.6 <strong>Sorted Sets(有序集合)</strong></h3><h4 id="1-6-1-ZADD-key-NX-XX-GT-LT-CH-INCR-score-member-score-member-…"><a href="#1-6-1-ZADD-key-NX-XX-GT-LT-CH-INCR-score-member-score-member-…" class="headerlink" title="1.6.1 ZADD key [NX|XX] [GT|LT] [CH] [INCR]score member [score member …]"></a>1.6.1 <strong><a id="ZADD">ZADD key [NX|XX] [GT|LT] [CH] [INCR]score member [score member …]</a></strong></h4><p>Redis ZADD 命令用于将一个或多个 <code>member</code> 元素及其 <code>score</code> 值加入到有序集 <code>key</code> 当中。</p><p>如果某个 <code>member</code> 已经是有序集的成员，那么更新这个 <code>member</code> 的 <code>score</code>值，并通过重新插入这个 <code>member</code> 元素，来保证该 <code>member</code> 在正确的位置上。</p><p>如果有序集合 <code>key</code> 不存在，则创建一个空的有序集并执行 ZADD 操作。</p><p>当 <code>key</code> 存在但不是有序集类型时，返回一个错误。</p><p><code>score</code> 值可以是整数值或双精度浮点数，<code>score</code> 可为正也可以为负。</p><p><strong>注意：</strong> 在 Redis 2.4 版本以前， ZADD 每次只能添加一个元素。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD key [NX|XX] [GT|LT] [CH] [INCR]score member [score member ...]</span><br></pre></td></tr></table></figure><ol><li><p><strong>参数说明</strong>：</p><ul><li><strong>XX</strong>: 仅更新存在的成员，不添加新成员。</li><li><p><strong>NX</strong>: 不更新存在的成员。只添加新成员。</p></li><li><p><strong>LT</strong>: 更新新的分值比当前分值小的成员，不存在则新增。</p></li><li><p><strong>GT</strong>: 更新新的分值比当前分值大的成员，不存在则新增。</p></li><li><p><strong>CH</strong>: 返回变更成员的数量。变更的成员是指 <strong>新增成员</strong> 和 <strong>score值更新</strong>的成员，命令指明的和之前score值相同的成员不计在内。 注意: 在通常情况下，ZADD返回值只计算新添加成员的数量。</p></li><li><p><strong>INCR</strong>: ZADD 使用该参数与 ZINCRBY 功能一样。一次只能操作一个score-element对。</p></li></ul><p>注意: <strong>GT</strong>, <strong>LT</strong> 和 <strong>NX</strong> 三者互斥不能同时使用。</p></li><li><p><strong>scores 有效值范围</strong></p><p>Redis 有序集合的分数使用<em>双精度64位浮点数</em>表示。在Redis所支持的平台上，称为<strong>IEEE 754 floating point number</strong>，它能包括的整数范围是<code>-(2^53)</code> 到 <code>+(2^53)</code>。或者说是-9007199254740992 到 9007199254740992。更大的整数在内部用指数形式表示，所以，如果为分数设置一个非常大的整数，你得到的是一个近似的十进制数。</p></li><li><p><strong>Sorted sets 101</strong></p><p>有序集合按照分数以递增的方式进行排序。相同的成员（member）只存在一次，有序集合不允许存在重复的成员。 分数可以通过<code>ZADD</code>命令进行更新或者也可以通过<code>ZINCRBY</code>命令递增来修改之前的值，相应的他们的排序位置也会随着分数变化而改变。</p><p>获取一个成员当前的分数可以使用 ZSCORE 命令，也可以用它来验证成员是否存在。</p></li><li><p><strong>相同分数的成员</strong></p><p>有序集合里面的成员是不能重复的都是唯一的，但是，不同成员间有可能<em>有相同的分数</em>。当多个成员有相同的分数时，他们将是<em>按字典排序</em>（ordered lexicographically）（仍由分数作为第一排序条件，然后，相同分数的成员按照字典序排序）。</p><p>字典顺序排序用的是二进制，它比较的是字符串的字节数组。</p><p>如果用户将所有元素设置相同分数（例如0），有序集合里面的所有元素将按照字典顺序进行排序，范围查询元素可以使用 ZRANGEBYLEX 命令（注：范围查询分数可以使用 ZRANGEBYSCORE 命令）。</p></li></ol></li><li><p><strong>返回值</strong>:</p><p><strong>整数</strong>:</p><ul><li>被成功添加的新成员的数量，不包括那些被更新分数的、已经存在的成员。</li></ul><p>如果使用 INCR 选项，则返回 <strong>多行字符串</strong>:</p><ul><li>以字符串形式表示的 <code>member</code> 的 score 值(双精度浮点数)。(双精度浮点数) , 执行失败返回 <code>nil</code> (当使用 <code>XX</code> 或 <code>NX</code> 选项)。</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加单个元素</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD page_rank 10 google.com</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加多个元素</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD page_rank 9 baidu.com 8 github.com</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE page_rank 0 -1 WITHSCORES</span><br><span class="line">1) &quot;github.com&quot;</span><br><span class="line">2) &quot;8&quot;</span><br><span class="line">3) &quot;baidu.com&quot;</span><br><span class="line">4) &quot;9&quot;</span><br><span class="line">5) &quot;google.com&quot;</span><br><span class="line">6) &quot;10&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加已存在元素，且 score 值不变，发现没有改变</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD page_rank 10 google.com</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE page_rank 0 -1 WITHSCORES</span><br><span class="line">1) &quot;github.com&quot;</span><br><span class="line">2) &quot;8&quot;</span><br><span class="line">3) &quot;baidu.com&quot;</span><br><span class="line">4) &quot;9&quot;</span><br><span class="line">5) &quot;google.com&quot;</span><br><span class="line">6) &quot;10&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加已存在元素，但是改变 score 值</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD page_rank 6 github.com</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;github.com&quot;</span>的值被改变</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE page_rank 0 -1 WITHSCORES</span><br><span class="line">1) &quot;github.com&quot;</span><br><span class="line">2) &quot;6&quot;</span><br><span class="line">3) &quot;baidu.com&quot;</span><br><span class="line">4) &quot;9&quot;</span><br><span class="line">5) &quot;google.com&quot;</span><br><span class="line">6) &quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.2.0.</strong></p><p><strong>时间复杂度:</strong> O(log(N)) for each item added, where N is the number of elements in the sorted set.</p></blockquote><h4 id="1-6-2-ZCARD-key"><a href="#1-6-2-ZCARD-key" class="headerlink" title="1.6.2 ZCARD key"></a>1.6.2 <strong><a id="ZCARD">ZCARD key</a></strong></h4><p>Redis ZCARD 命令用于返回有序集的成员个数。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZCARD KEY_NAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 返回有序集的成员个数，当 <code>key</code> 不存在时，返回 <code>0</code> 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD myset 2 &quot;two&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZCARD myset</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-6-3-ZCOUNT-key-min-max"><a href="#1-6-3-ZCOUNT-key-min-max" class="headerlink" title="1.6.3 ZCOUNT key min max"></a>1.6.3 <strong><a id="ZCOUNT">ZCOUNT key min max</a></strong></h4><p>ZCOUNT 返回有序集 <code>key</code> 中， <code>score</code> 值在 <code>min</code> 和 <code>max</code> 之间(默认包括 <code>score</code> 值等于 <code>min</code> 或 <code>max</code> )的成员的数量。</p><p>关于参数 <code>min</code> 和 <code>max</code> 的详细使用方法，请参考<code>ZRANGEBYSCORE</code>.</p><p>注意: ZCOUNT 命令的时间复杂度是 O(log(N))，因为 ZCOUNT 使用有序成员来实现范围查询，不需要遍历整个集合。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: score 值在 min 和 max 之间的成员的数量。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD myset 2 &quot;two&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD myset 3 &quot;three&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myset -inf +inf</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myset (1 3</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(log(N)) with N being the number of elements in the sorted set.</p></blockquote><h4 id="1-6-4-ZINCRBY-key-increment-member"><a href="#1-6-4-ZINCRBY-key-increment-member" class="headerlink" title="1.6.4 ZINCRBY key increment member"></a>1.6.4 <strong><a id="ZINCRBY">ZINCRBY key increment member</a></strong></h4><p><code>ZINCRBY</code> 为有序集 <code>key</code> 的成员 <code>member</code> 的 <code>score</code> 值加上增量 <code>increment</code> 。</p><p>当 <code>key</code> 不存在，或 <code>member</code> 不是 <code>key</code> 的成员时， <code>ZINCRBY key increment member</code> 等同于 <code>ZADD key increment member</code> 。</p><p>当 <code>key</code> 不是有序集类型时，返回”ERR WRONGTYPE Operation against a key holding the wrong kind of value”。</p><p><code>score</code> 值可以是字符串形式表示的整数值或双精度浮点数。</p><p>可以通过传递一个负数值 <code>increment</code> ，让 <code>score</code> 减去相应的值，比如 <code>ZINCRBY key -2 member</code> ，就是让 <code>member</code> 的 <code>score</code> 值减去 <code>2</code> 。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 以字符串形式表示的 <code>member</code> 成员的新 <code>score</code> 值（双精度浮点数）。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD myset 2 &quot;two&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY myset 2 &quot;one&quot;</span><br><span class="line">&quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1 WITHSCORES</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.2.0.</strong></p><p><strong>时间复杂度:</strong> O(log(N)) where N is the number of elements in the sorted set.</p></blockquote><h4 id="1-6-5-ZINTERSTORE-destination-numkeys-key-key-…-WEIGHTS-weight-weight-…-AGGREGATE-SUM-MIN-MAX"><a href="#1-6-5-ZINTERSTORE-destination-numkeys-key-key-…-WEIGHTS-weight-weight-…-AGGREGATE-SUM-MIN-MAX" class="headerlink" title="1.6.5 ZINTERSTORE destination numkeys key [key …] [WEIGHTS weight [weight …]] [AGGREGATE SUM|MIN|MAX]"></a>1.6.5 <strong><a id="ZINTERSTORE">ZINTERSTORE destination numkeys key [key …] [WEIGHTS weight [weight …]] [AGGREGATE SUM|MIN|MAX]</a></strong></h4><p>计算 numkeys 个有序集合的交集，并且把结果放到 destination 中。 在给定要计算的 key 和其它参数之前，必须先给定 key 个数(numberkeys)。</p><p>默认情况下，结果集中元素的分数是各有序集合中该元素分数之和。</p><p>对于WEIGHTS和AGGREGATE参数的描述，参见命令 ZUNIONSTORE。</p><p>如果destination存在，会被覆盖。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>:结果集 destination 中元素个数。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD zset1 1 &quot;one&quot; 2 &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZADD zset2 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zset1 * 2 + zset2 * 3</span></span><br><span class="line">127.0.0.1:6379&gt; ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE out 0 -1 WITHSCORES</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;5&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">4) &quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N<em>K)+O(M</em>log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.</p></blockquote><h4 id="1-6-6-ZLEXCOUNT-key-min-max"><a href="#1-6-6-ZLEXCOUNT-key-min-max" class="headerlink" title="1.6.6 ZLEXCOUNT key min max"></a>1.6.6 <strong><a id="ZLEXCOUNT">ZLEXCOUNT key min max</a></strong></h4><p>当有序集中的所有成员都有相同的<code>score</code>， ZLEXCOUNT 命令返回有序集中值在 <code>min</code> 和<code>max</code>之间的成员个数。</p><p><code>min</code> 和<code>max</code> 详见<code>ZRANGEBYLEX</code>。时间复 O(log(N))。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT key min max</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 返回特定分值元素个数。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 0 a 0 b 0 c 0 d 0 e</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; ZADD myset 0 f 0 g</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT myset - +</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT myset [b [f</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.9.</strong></p><p><strong>时间复杂度:</strong> O(log(N)) with N being the number of elements in the sorted set.</p></blockquote><h4 id="1-6-7-ZRANGE-key-start-stop-WITHSCORES"><a href="#1-6-7-ZRANGE-key-start-stop-WITHSCORES" class="headerlink" title="1.6.7 ZRANGE key start stop [WITHSCORES]"></a>1.6.7 <strong><a id="ZRANGE">ZRANGE key start stop [WITHSCORES]</a></strong></h4><p>Redis ZRANGE 命令返回有序集中，指定区间内的成员，其中成员的按分数值递增(从小到大)来排序，具有相同分数值的成员按字典序(lexicographical order )来排列。</p><p>如果你需要成员按值递减(从大到小)来排列，请使用 <code>ZREVRANGE</code>命令。</p><p>下标参数 <code>start</code> 和 <code>stop</code> 都以 <code>0</code> 为底，也就是说，以 <code>0</code> 表示有序集第一个成员，以 <code>1</code> 表示有序集第二个成员，以此类推。</p><p>你也可以使用负数下标，以 <code>-1</code> 表示最后一个成员， <code>-2</code> 表示倒数第二个成员，以此类推。</p><p><code>start</code> 和 <code>stop</code> 都是<strong>包含在内的区间</strong>，因此例如 <code>ZRANGE myzset 0 1</code> 将会返回有序集合的第一个和第二个元素。</p><p>超出范围的索引不会产生错误。 如果 <code>start</code> 参数的值大于有序集合中的最大索引，或者 <code>start &gt; stop</code> ，将会返回一个空列表。 如果 <code>stop</code> 的值大于有序集合的末尾，Redis 会将其视为有序集合的最后一个元素。</p><p>可以传递 <code>WITHSCORES</code> 选项，以便将元素的分数与元素一起返回。这样返回的列表将包含 <code>value1,score1,...,valueN,scoreN</code> ，而不是 <code>value1,...,valueN</code> 。 客户端类库可以自由地返回更合适的数据类型（建议：具有值和得分的数组或元组）。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 给定范围内的元素列表（如果指定了<code>WITHSCORES</code>选项，将同时返回它们的得分）。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 2 3</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset -2 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 1 WITHSCORES</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1 WITHSCORES</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;three&quot;</span><br><span class="line">6) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.2.0.</strong></p><p><strong>时间复杂度:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.</p></blockquote><h4 id="1-6-8-ZRANGEBYLEX-key-min-max-LIMIT-offset-count"><a href="#1-6-8-ZRANGEBYLEX-key-min-max-LIMIT-offset-count" class="headerlink" title="1.6.8 ZRANGEBYLEX key min max [LIMIT offset count]"></a>1.6.8 <strong><a id="ZRANGEBYLEX">ZRANGEBYLEX key min max [LIMIT offset count]</a></strong></h4><p>Redis Zrangebylex 通过字典区间返回有序集合的成员。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX key min max [LIMIT offset count]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 指定区间内的元素列表。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 0 a 0 b 0 c 0 d 0 e 0 f 0 g</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX myset - [c</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX myset - (c</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX myset [aaa (g</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">3) &quot;d&quot;</span><br><span class="line">4) &quot;e&quot;</span><br><span class="line">5) &quot;f&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.9.</strong></p><p><strong>时间复杂度:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).</p></blockquote><h4 id="1-6-9-ZRANGEBYSCORE-key-min-max-WITHSCORES-LIMIT-offset-count"><a href="#1-6-9-ZRANGEBYSCORE-key-min-max-WITHSCORES-LIMIT-offset-count" class="headerlink" title="1.6.9 ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]"></a>1.6.9 <strong><a id="ZRANGEBYSCORE">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</a></strong></h4><p>Redis ZRANGEBYSCORE 返回有序集 <code>key</code> 中，所有 <code>score</code> 值介于 <code>min</code> 和 <code>max</code> 之间(包括等于 <code>min</code> 或 <code>max</code> )的成员。有序集成员按 <code>score</code> 值递增(从小到大)次序排列。</p><p>具有相同 <code>score</code> 值的成员按字典序(<code>lexicographical order</code>)来排列(该属性是有序集提供的，不需要额外的计算)。</p><p>可选的 <code>LIMIT</code> 参数指定返回结果的数量及区间(就像SQL中的 <code>SELECT LIMIT offset, count</code> )，注意当 <code>offset</code> 很大时，定位 <code>offset</code> 的操作可能需要遍历整个有序集，此过程最坏复杂度为 O(N) 时间。</p><p>可选的 <code>WITHSCORES</code> 参数决定结果集是单单返回有序集的成员，还是将有序集成员及其 <code>score</code> 值一起返回。 该选项自 Redis 2.0 版本起可用。</p><p><strong>互斥区间与无穷大:</strong></p><p><code>min</code> 和 <code>max</code> 可以是 <code>-inf</code> 和 <code>+inf</code> ，这样一来，你就可以在不知道有序集的最低和最高 <code>score</code> 值的情况下，获取所有成员。</p><p>默认情况下，区间的取值使用闭区间 (小于等于或大于等于)，你也可以通过给参数前增加 <code>(</code> 符号来使用可选的开区间 (小于或大于)。</p><p>举个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGEBYSCORE zset (1 5</span><br></pre></td></tr></table></figure><p>返回所有符合条件 <code>1 &lt; score &lt;= 5</code> 的成员：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGEBYSCORE zset (5 (10</span><br></pre></td></tr></table></figure><p>则返回所有符合条件 <code>5 &lt; score &lt; 10</code> 的成员。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 指定区间内的有序集成员的列表（带有 <code>score</code> 值(可选)）。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示整个有序集</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myset -inf +inf</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示整个有序集及成员的 score 值</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myset -inf +inf WITHSCORES</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;three&quot;</span><br><span class="line">6) &quot;3&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示大于等于 1 小于等于 2 的成员</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myset 1 2</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示大于 1 小于等于 2 的成员</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myset (1 2</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示大于 1 小于 2 的成员</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myset (1 (2</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.5.</strong></p><p><strong>时间复杂度:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).</p></blockquote><h4 id="1-6-10-ZRANK-key-member"><a href="#1-6-10-ZRANK-key-member" class="headerlink" title="1.6.10 ZRANK key member"></a>1.6.10 <strong><a id="ZRANK">ZRANK key member</a></strong></h4><p>Redis<code>ZRANK</code> 命令返回有序集<code>key</code>中成员<code>member</code>的排名，其中有序集成员按score值从低到高排列。</p><p>排名从0开始，也就是说，score值最低的成员排名为<code>0</code>。</p><p>使用<code>ZREVRANK</code>命令可以获得成员按score值递增(从高到低)排列的排名。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><ul><li>如果<code>member</code>是有序集key的成员，<strong>整数</strong>: <code>member</code> 的排名。</li><li>如果<code>member</code>不是有序集key的成员， 或 <code>key</code> 不存在，<strong>多行字符串</strong>: <code>nil</code>。</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZRANK myset &quot;three&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANK myset &quot;four&quot;</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(log(N))</p></blockquote><h4 id="1-6-11-ZREM-key-member-member-…"><a href="#1-6-11-ZREM-key-member-member-…" class="headerlink" title="1.6.11 ZREM key member [member …]"></a>1.6.11 <strong><a id="ZREM">ZREM key member [member …]</a></strong></h4><p>Redis ZREM 命令用于从有序集合<code>key</code>中删除指定的成员<code>member</code>。</p><p>如果<code>member</code>不存在则被忽略。</p><p>当key存在，但是不是有序集合类型时，返回类型错误。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREM key member [member ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 返回的是从有序集合中删除的成员个数，不包括不存在的成员。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZREM myset &quot;two&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1 WITHSCORES</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.2.0.</strong></p><p><strong>时间复杂度:</strong> O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.</p></blockquote><h4 id="1-6-12-ZREMRANGEBYLEX-key-min-max"><a href="#1-6-12-ZREMRANGEBYLEX-key-min-max" class="headerlink" title="1.6.12 ZREMRANGEBYLEX key min max"></a>1.6.12 <strong><a id="ZREMRANGEBYLEX">ZREMRANGEBYLEX key min max</a></strong></h4><p>Reids ZREMRANGEBYLEX 命令用于删除成员名称按字典由低到高排序介于<code>min</code> 和 <code>max</code> 之间的所有成员（集合中所有成员的分数相同）。 不要在成员分数不同的有序集合中使用此命令，因为它是基于分数一致的有序集合设计的，如果使用，会导致删除的结果不正确。</p><p>命令中 <code>min</code> 和 <code>max</code> 的含义与 ZRANGEBYLEX 命令相同。该命令会与使用相同<code>min</code> 和 <code>max</code>参数的 ZRANGEBYLEX 返回相同的结果。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYLEX key min max</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 删除元素的个数。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 0 aaa 0 b 0 c 0 d 0 e 0 f 0 zap 0 zip 0 ALPHA 0 alpha</span><br><span class="line"></span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1</span><br><span class="line"> 1) &quot;ALPHA&quot;</span><br><span class="line"> 2) &quot;aaa&quot;</span><br><span class="line"> 3) &quot;alpha&quot;</span><br><span class="line"> 4) &quot;b&quot;</span><br><span class="line"> 5) &quot;c&quot;</span><br><span class="line"> 6) &quot;d&quot;</span><br><span class="line"> 7) &quot;e&quot;</span><br><span class="line"> 8) &quot;f&quot;</span><br><span class="line"> 9) &quot;zap&quot;</span><br><span class="line">10) &quot;zip&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYLEX myset [alpha [omega</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1</span><br><span class="line">1) &quot;ALPHA&quot;</span><br><span class="line">2) &quot;aaa&quot;</span><br><span class="line">3) &quot;zap&quot;</span><br><span class="line">4) &quot;zip&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.9.</strong></p><p><strong>时间复杂度:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.</p></blockquote><h4 id="1-6-13-ZREMRANGEBYRANK-key-start-stop"><a href="#1-6-13-ZREMRANGEBYRANK-key-start-stop" class="headerlink" title="1.6.13 ZREMRANGEBYRANK key start stop"></a>1.6.13 <strong><a id="ZREMRANGEBYRANK">ZREMRANGEBYRANK key start stop</a></strong></h4><p>Redis ZREMRANGEBYRANK 移除有序集key中，指定排名(rank)区间 <code>start</code> 和 <code>stop</code> 内的所有成员。下标参数start和stop都是从0开始计数，0是分数最小的那个元素。索引也可是负数，表示位移从最高分处开始数。例如，-1是分数最高的元素，-2是分数第二高的，依次类推。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYRANK key start stop</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 删除元素的个数。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYRANK myset 0 1</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1 WITHSCORES</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.</p></blockquote><h4 id="1-6-14-ZREMRANGEBYSCORE-key-min-max"><a href="#1-6-14-ZREMRANGEBYSCORE-key-min-max" class="headerlink" title="1.6.14 ZREMRANGEBYSCORE key min max"></a>1.6.14 <strong><a id="ZREMRANGEBYSCORE">ZREMRANGEBYSCORE key min max</a></strong></h4><p>Redis ZREMRANGEBYSCORE 命令移除有序集key中，所有score值介于min和max之间(包括等于min或max)的成员。</p><p>自版本2.1.6开始，score值等于min或max的成员也可以不包括在内，语法请参见<code>ZRANGEBYSCORE</code>命令。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYSCORE key min max</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 删除元素的个数。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYSCORE myset -inf (2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1 WITHSCORES</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.2.0.</strong></p><p><strong>时间复杂度:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.</p></blockquote><h4 id="1-6-15-ZREVRANGE-key-start-stop-WITHSCORES"><a href="#1-6-15-ZREVRANGE-key-start-stop-WITHSCORES" class="headerlink" title="1.6.15 ZREVRANGE key start stop [WITHSCORES]"></a>1.6.15 <strong><a id="ZREVRANGE">ZREVRANGE key start stop [WITHSCORES]</a></strong></h4><p>Redis ZREVRANGE 命令返回有序集<code>key</code>中，指定区间内的成员。其中成员的位置按score值递减(从高到低)来排列。</p><p>具有相同score值的成员按字典序的反序排列。 除了成员排序相反外，<code>ZREVRANGE</code>命令的其他方面和<code>ZRANGE</code>命令一样。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANGE key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 指定范围的元素列表(可选是否含有分数)。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE myset 0 -1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE myset 2 3</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE myset -2 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.2.0.</strong></p><p><strong>时间复杂度:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.</p></blockquote><h4 id="1-6-16-ZREVRANGEBYSCORE-key-max-min-WITHSCORES-LIMIT-offset-count"><a href="#1-6-16-ZREVRANGEBYSCORE-key-max-min-WITHSCORES-LIMIT-offset-count" class="headerlink" title="1.6.16 ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]"></a>1.6.16 <strong><a id="ZREVRANGEBYSCORE">ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</a></strong></h4><p>Redis Zrangebyscore 返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列。</p><p>具有相同分数值的成员按字典序来排列(该属性是有序集提供的，不需要额外的计算)。</p><p>默认情况下，区间的取值使用闭区间 (小于等于或大于等于)，你也可以通过给参数前增加 ( 符号来使用可选的开区间 (小于或大于)。</p><p>可选的LIMIT参数指定返回结果的数量及区间（类似SQL中SELECT LIMIT offset, count）。注意，如果offset太大，定位offset就可能遍历整个有序集合，这会增加O(N)的复杂度。</p><p>可选参数WITHSCORES会返回元素和其分数，而不只是元素。这个选项在redis2.0之后的版本都可用。</p><p>##区间及无限</p><p>min和max可以是-inf和+inf，这样一来，你就可以在不知道有序集的最低和最高score值的情况下，使用ZRANGEBYSCORE这类命令。</p><p>默认情况下，区间的取值使用闭区间(小于等于或大于等于)，你也可以通过给参数前增加(符号来使用可选的开区间(小于或大于)。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 指定分数范围的元素列表(也可以返回他们的分数)。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYSCORE myset +inf -inf</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYSCORE myset 2 1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYSCORE myset 2 (1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYSCORE myset (2 (1</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.2.0.</strong></p><p><strong>时间复杂度:</strong> O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).</p></blockquote><h4 id="1-6-17-ZREVRANK-key-member"><a href="#1-6-17-ZREVRANK-key-member" class="headerlink" title="1.6.17 ZREVRANK key member"></a>1.6.17 <strong><a id="ZREVRANK">ZREVRANK key member</a></strong></h4><p>Redis ZREVRANK 命令返回有序集<code>key</code>中成员<code>member</code>的排名，其中有序集成员按score值从高到低排列。</p><p>排名从0开始，也就是说，score值最大的成员排名为<code>0</code>。</p><p>使用<code>ZRANK</code>命令可以获得成员按score值递增(从低到高)排列的排名。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANK key member</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><ul><li>如果<code>member</code>是有序集key的成员，<strong>整数</strong>: <code>member</code>的排名。</li><li>如果<code>member</code>不是有序集key的成员， 或 <code>key</code> 不存在，<strong>多行字符串</strong>: <code>nil</code>。</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK myset &quot;one&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK myset &quot;two&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK myset &quot;four&quot;</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(log(N))</p></blockquote><h4 id="1-6-18-ZSCORE-key-member"><a href="#1-6-18-ZSCORE-key-member" class="headerlink" title="1.6.18 ZSCORE key member"></a>1.6.18 <strong><a id="ZSCORE">ZSCORE key member</a></strong></h4><p>Redis zscore 命令用于返回有序集 <code>key</code>.中成员 <code>member</code> 的分数。</p><p>如果有续集中 不存在 <code>member</code> ，或者 <code>key</code> 不存在，返回 <code>nil</code> 。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZSCORE key member</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 成员的分数。(双精度浮点数，字符串格式）</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot; 2 &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZSCORE myset &quot;two&quot;</span><br><span class="line">&quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZSCORE myset &quot;one&quot;</span><br><span class="line">&quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-6-19-ZUNIONSTORE-destination-numkeys-key-key-…-WEIGHTS-weight-weight-…-AGGREGATE-SUM-MIN-MAX"><a href="#1-6-19-ZUNIONSTORE-destination-numkeys-key-key-…-WEIGHTS-weight-weight-…-AGGREGATE-SUM-MIN-MAX" class="headerlink" title="1.6.19 ZUNIONSTORE destination numkeys key [key …] [WEIGHTS weight [weight …]] [AGGREGATE SUM|MIN|MAX]"></a>1.6.19 <strong><a id="ZUNIONSTORE">ZUNIONSTORE destination numkeys key [key …] [WEIGHTS weight [weight …]] [AGGREGATE SUM|MIN|MAX]</a></strong></h4><p>Redis ZUNIONSTORE 用于计算给定的<code>numkeys</code>个有序集合的并集，并且把结果放到destination中。</p><p>在给定要计算的key和其它参数之前，必须先给定key个数(<code>numkeys</code>)。 </p><p>默认情况下，结果集中某个成员的score值是所有给定集中该成员score值之和。</p><p>使用<code>WEIGHTS</code>选项，你可以为每个给定的有序集指定一个乘法因子，意思就是，每个给定有序集的所有成员的score值在传递给聚合函数之前都要先乘以该因子。如果<code>WEIGHTS</code>没有给定，默认是 <code>1</code>。</p><p>使用<code>AGGREGATE</code>选项，你可以指定并集的结果集的聚合方式。默认使用的参数SUM，可以将所有集合中某个成员的score值之和作为结果集中该成员的score值。如果使用参数<code>MIN</code>或者<code>MAX</code>，结果集就是所有集合中该元素最小或最大score。</p><p>如果<code>destination</code>存在，会被覆盖。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 结果集destination中成员的数量。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset1 1 &quot;one&quot; 2 &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZADD myset2 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZUNIONSTORE out 2 myset1 myset2 WEIGHTS 2 3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE out 0 -1 WITHSCORES</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;5&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line">4) &quot;9&quot;</span><br><span class="line">5) &quot;two&quot;</span><br><span class="line">6) &quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.</p></blockquote><h4 id="1-6-20-ZSCAN-key-cursor-MATCH-pattern-COUNT-count"><a href="#1-6-20-ZSCAN-key-cursor-MATCH-pattern-COUNT-count" class="headerlink" title="1.6.20 ZSCAN key cursor [MATCH pattern] [COUNT count]"></a>1.6.20 <strong><a id="ZSCAN">ZSCAN key cursor [MATCH pattern] [COUNT count]</a></strong></h4><p>查看 SCAN 获取关于 ZSCAN 命令的信息。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZSCAN key cursor [MATCH pattern] [COUNT count]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>:</p><ul><li><strong>cursor</strong>: 游标。</li><li><strong>pattern</strong>: 匹配的模式。</li><li><strong>count</strong>: 指定从数据集里返回多少元素，默认值为 10 </li></ul></li><li><p><strong>返回值：</strong></p><p>返回的每个元素都是一个有序集合元素，一个有序集合元素由一个成员（member）和一个分值（score）组成。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 &quot;one&quot; 2 &quot;two&quot; 3 &quot;three&quot;</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZSCAN myset 0 match *w*</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;two&quot;</span><br><span class="line">   2) &quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.0.</strong></p><p><strong>时间复杂度:</strong> O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..</p></blockquote><h3 id="1-7-Redis-发布订阅"><a href="#1-7-Redis-发布订阅" class="headerlink" title="1.7  Redis 发布订阅"></a>1.7  <strong>Redis 发布订阅</strong></h3><h4 id="1-7-1-PSUBSCRIBE-pattern-pattern-…"><a href="#1-7-1-PSUBSCRIBE-pattern-pattern-…" class="headerlink" title="1.7.1 PSUBSCRIBE pattern [pattern …]"></a>1.7.1 <strong><a id="PSUBSCRIBE">PSUBSCRIBE pattern [pattern …]</a></strong></h4><p>Redis PSUBSCRIBE 命令用于订阅一个或多个符合给定模式的频道。</p><p>模式支持 glob 风格的正则表达式。每个模式以 <code>*</code> 作为匹配符，比如 <code>it*</code> 匹配所有以 <code>it</code> 开头的频道( <code>it.news</code> 、 <code>it.blog</code> 、 <code>it.tweets</code> 等等)， <code>news.*</code> 匹配所有以 <code>news.</code> 开头的频道( <code>news.it</code> 、 <code>news.global.today</code> 等等)，诸如此类。</p><p>特殊字符使用 <code>\</code> 转义。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PSUBSCRIBE pattern [pattern ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>接收到的信息。</p></li><li><p><strong>实例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE rediscomcnChat</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;rediscomcnChat&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;rediscomcnChat&quot;</span><br><span class="line">3) &quot;Redis PUBLISH test&quot;</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;rediscomcnChat&quot;</span><br><span class="line">3) &quot;Learn redis with python&quot;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of patterns the client is already subscribed to.</p></blockquote><h4 id="1-7-2-PUBSUB-subcommand-argument-argument-…"><a href="#1-7-2-PUBSUB-subcommand-argument-argument-…" class="headerlink" title="1.7.2 PUBSUB subcommand [argument [argument …]]"></a>1.7.2 <strong><a id="PUBSUB">PUBSUB subcommand [argument [argument …]]</a></strong></h4><p>Redis Pubsub 命令用于查看订阅与发布系统状态，它由数个不同格式的子命令组成。</p><blockquote><ol><li><p><strong>PUBSUB CHANNELS [pattern]</strong></p><p>列出当前的活跃频道。</p><p>活跃频道指的是那些至少有一个订阅者的频道， 订阅模式的客户端不计算在内。</p><p><code>pattern</code> 参数是可选的：</p><ul><li>如果不给出 <code>pattern</code> 参数，那么列出订阅与发布系统中的所有活跃频道。</li><li>如果给出 <code>pattern</code> 参数，那么只列出和给定模式 <code>pattern</code> 相匹配的那些活跃频道。</li></ul><p><strong>返回值</strong>:</p><p><strong>数组</strong>: 一个由活跃频道组成的列表。</p></li><li><p><code>PUBSUB NUMSUB [channel-1 ... channel-N]</code></p><p>返回给定频道的订阅者数量， 订阅模式的客户端不计算在内。</p><p><strong>返回值</strong>:</p><p><strong>数组</strong>: 一个多条批量回复（Multi-bulk reply），回复中包含给定的频道，以及频道的订阅者数量。 </p><p>格式为：频道 <code>channel-1</code> ， <code>channel-1</code> 的订阅者数量，频道 <code>channel-2</code>， <code>channel-2</code> 的订阅者数量，诸如此类。 </p><p>回复中频道的排列顺序和执行命令时给定频道的排列顺序一致。 </p><p>不给定任何频道而直接调用这个命令也是可以的， 在这种情况下， 命令只返回一个空列表。</p></li><li><p><code>PUBSUB NUMPAT</code></p><p>返回订阅模式的数量。</p><p>注意， 这个命令返回的不是订阅模式的客户端的数量， 而是客户端订阅的所有模式的数量总和。</p><p><strong>返回值</strong>:</p><p><strong>整数</strong>: 所有客户端订阅的所有模式的数量总和。</p></li></ol></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBSUB subcommand [argument [argument ...]]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 一个由活跃频道组成的列表。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBSUB CHANNELS</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.0.</strong></p><p><strong>时间复杂度:</strong> O(N) for the CHANNELS subcommand, where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns). O(N) for the NUMSUB subcommand, where N is the number of requested channels. O(1) for the NUMPAT subcommand.</p></blockquote><h4 id="1-7-3-PUBLISH-channel-message"><a href="#1-7-3-PUBLISH-channel-message" class="headerlink" title="1.7.3 PUBLISH channel message"></a>1.7.3 <strong><a id="PUBLISH">PUBLISH channel message</a></strong></h4><p>Redis PUBLISH 命令用于将信息 <code>message</code> 发送到指定的频道 <code>channel</code> 。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH channel message</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 接收到信息 message 的订阅者数量。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对没有订阅者的频道发送信息</span></span><br><span class="line">127.0.0.1:6379&gt; PUBLISH bad_channel &quot;can any body hear me?&quot;</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">向有一个订阅者的频道发送信息</span></span><br><span class="line">127.0.0.1:6379&gt; PUBLISH rediscomcnChat &quot;Hello World&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 向有多个订阅者的频道发送信息(前提是，启动了多个订阅者)</span></span></span><br><span class="line">127.0.0.1:6379&gt; PUBLISH rediscomcnChat1 &quot;two channel infos&quot;</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>在订阅者频道可以接收到最新消息：</p><figure class="highlight sh"><figcaption><span>l lsh l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE rediscomcnChat</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;rediscomcnChat&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;rediscomcnChat&quot;</span></span><br><span class="line">3) <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).</p></blockquote><h4 id="1-7-4-PUNSUBSCRIBE-pattern-pattern-…"><a href="#1-7-4-PUNSUBSCRIBE-pattern-pattern-…" class="headerlink" title="1.7.4 PUNSUBSCRIBE [pattern [pattern …]]"></a>1.7.4 <strong><a id="PUNSUBSCRIBE">PUNSUBSCRIBE [pattern [pattern …]]</a></strong></h4><p>Redis PUNSUBSCRIBE 命令用于客户端退订所有给定模式。</p><p>如果没有模式被指定，也即是，一个无参数的 PUNSUBSCRIBE 调用被执行，那么客户端使用PSUBSCRIBE 命令订阅的所有模式都会被退订。在这种情况下，命令会返回一个信息，告知客户端所有被退订的模式。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUNSUBSCRIBE [pattern [pattern ...]]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>这个命令在不同的客户端中有不同的表现。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUNSUBSCRIBE rediscomcnChat1</span><br><span class="line">1) &quot;punsubscribe&quot;</span><br><span class="line">2) &quot;rediscomcnChat1&quot;</span><br><span class="line">3) (integer) 0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N+M) where N is the number of patterns the client is already subscribed and M is the number of total patterns subscribed in the system (by any client).</p></blockquote><h4 id="1-7-5-SUBSCRIBE-channel-channel-…"><a href="#1-7-5-SUBSCRIBE-channel-channel-…" class="headerlink" title="1.7.5 SUBSCRIBE channel [channel …]"></a>1.7.5 <strong><a id="SUBSCRIBE">SUBSCRIBE channel [channel …]</a></strong></h4><p>Redis SUBSCRIBE 命令用于订阅给定的一个或多个频道的信息。</p><p>进入订阅模式后只能执行如下命令： SUBSCRIBE, PSUBSCRIBE, UNSUBSCRIBE, PUNSUBSCRIBE, PING 和QUIT 。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE channel [channel ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>接收到的信息</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE rediscomcnChat</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;rediscomcnChat&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;rediscomcnChat&quot;</span><br><span class="line">3) &quot;Hello World&quot;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of channels to subscribe to.</p></blockquote><h4 id="1-7-6-UNSUBSCRIBE-channel-channel-…"><a href="#1-7-6-UNSUBSCRIBE-channel-channel-…" class="headerlink" title="1.7.6 UNSUBSCRIBE [channel [channel …]]"></a>1.7.6 <strong><a id="UNSUBSCRIBE">UNSUBSCRIBE [channel [channel …]]</a></strong></h4><p>Redis UNSUBSCRIBE 命令用于指示客户端退订给定的频道。</p><p>如果没有频道被指定，一个无参数的 UNSUBSCRIBE 调用被执行，那么客户端使用 SUBSCRIBE 命令订阅的所有频道都会被退订。在这种情况下，命令会返回一个信息，告知客户端所有被退订的频道。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; UNSUBSCRIBE [channel [channel ...]]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>这个命令在不同的客户端中有不同的表现。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; UNSUBSCRIBE rediscomcnChat1</span><br><span class="line">1) &quot;unsubscribe&quot;</span><br><span class="line">2) &quot;rediscomcnChat1&quot;</span><br><span class="line">3) (integer) 0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of clients already subscribed to a channel.</p></blockquote><h3 id="1-8-Redis-事务"><a href="#1-8-Redis-事务" class="headerlink" title="1.8 Redis 事务"></a>1.8 <strong>Redis 事务</strong></h3><h4 id="1-8-1-DISCARD"><a href="#1-8-1-DISCARD" class="headerlink" title="1.8.1 DISCARD"></a>1.8.1 <strong><a id="DISCARD">DISCARD</a></strong></h4><p>DISCARD 命令取消事务，放弃执行事务队列内的所有命令，恢复连接为非 (transaction) 模式。</p><p>如果正在使用 WATCH 命令监视某个(或某些) key，那么取消所有监视，等同于执行命令 UNWATCH 。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DISCARD</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: <code>OK</code>.</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; ping</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; SET myset &quot;kungs&quot;</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; DISCARD</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p></blockquote><h4 id="1-8-2-EXEC"><a href="#1-8-2-EXEC" class="headerlink" title="1.8.2 EXEC"></a>1.8.2 <strong><a id="EXEC">EXEC</a></strong></h4><p>Redis EXEC 命令用于执行事务 (transaction )队列内的所有命令。</p><p>假如某个(或某些) key 正处于 WATCH 命令的监视之下，且事务块中有和这个(或这些) key 相关的命令，那么EXEC 命令只在这个(或这些) key 没有被其他命令所改动的情况下执行并生效，否则该事务被打断(abort)。 check-and-set mechanism.</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EXEC</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>事务块内所有命令的返回值，按命令执行的先后顺序排列。当操作被打断时，返回空值 <code>nil</code> 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">事务被成功执行</span></span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR user_id</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR user_id</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR user_id</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; PING</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; EXEC</span><br><span class="line">1) (integer) 1</span><br><span class="line">2) (integer) 2</span><br><span class="line">3) (integer) 3</span><br><span class="line">4) PONG</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">监视 key ，且事务成功执行</span></span><br><span class="line">127.0.0.1:6379&gt; WATCH lock lock_times</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; SET lock &quot;huangz&quot;</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR lock_times</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; EXEC</span><br><span class="line">1) OK</span><br><span class="line">2) (integer) 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">监视 key ，且事务被打断</span></span><br><span class="line">127.0.0.1:6379&gt; WATCH lock lock_times</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; SET lock &quot;joe&quot;  # 就在这时，另一个客户端修改了 lock_times 的值</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR lock_times</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; EXEC  # 因为 lock_times 被修改， joe 的事务执行失败</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.2.0.</strong></p></blockquote><h4 id="1-8-3-MULTI"><a href="#1-8-3-MULTI" class="headerlink" title="1.8.3 MULTI"></a>1.8.3 <strong><a id="MULTI">MULTI</a></strong></h4><p>Redis MULTI 命令用于标记一个事务块的开始。</p><p>事务块内的多条命令会按照先后顺序被放进一个队列当中，最后由 EXEC 命令原子性(atomic)地执行。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 总是返回 <code>OK</code>.</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR user_id</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR user_id</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR user_id</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; PING</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; EXEC</span><br><span class="line">1) (integer) 1</span><br><span class="line">2) (integer) 2</span><br><span class="line">3) (integer) 3</span><br><span class="line">4) PONG</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.2.0.</strong></p></blockquote><h4 id="1-8-4-UNWATCH"><a href="#1-8-4-UNWATCH" class="headerlink" title="1.8.4 UNWATCH"></a>1.8.4 <strong><a id="UNWATCH">UNWATCH</a></strong></h4><p>Redis UNWATCH命令用于取消 WATCH 命令对所有 key 的监视。<br>详细参考 transaction.<br>如果执行过 EXEC 或DISCARD，无需再执行 UNWATCH。<br>因为 EXEC 命令会执行事务，因此 WATCH 命令的效果已经产生了；而 DISCARD命令在取消事务的同时也会取消所有对 key 的监视，因此这两个命令执行之后，就没有必要执行 <code>UNWATCH</code>了。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; UNWATCH</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 总是返回 <code>OK</code>.</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;  WATCH lock lock_times</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; UNWATCH</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-8-5-WATCH-key-key-…"><a href="#1-8-5-WATCH-key-key-…" class="headerlink" title="1.8.5 WATCH key [key …]"></a>1.8.5 <strong><a id="WATCH">WATCH key [key …]</a></strong></h4><p>Redis WATCH 命令用于标记要监视的key，以便有条件地执行事务（更多参考transaction）。</p><p>WATCH 命令可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行。</p><p>监控一直持续到EXEC命令（事务中的命令是在EXEC之后才执行的，所以在MULTI命令后可以修改WATCH监控的键值）</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; WATCH key [key ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 总是返回<code>OK</code> 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;  WATCH lock lock_times</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.2.0.</strong></p><p><strong>时间复杂度:</strong> O(1) for every key.</p></blockquote><h3 id="1-9-Script-脚本"><a href="#1-9-Script-脚本" class="headerlink" title="1.9 Script(脚本)"></a>1.9 <strong>Script(脚本)</strong></h3><h4 id="1-9-1-EVAL-script-numkeys-key-key-arg-arg"><a href="#1-9-1-EVAL-script-numkeys-key-key-arg-arg" class="headerlink" title="1.9.1 EVAL script numkeys key [key ...] arg [arg ...]"></a>1.9.1 <strong><a id="EVAL script numkeys key [key …] arg [arg …]">EVAL script numkeys key [key ...] arg [arg ...]</a></strong></h4><p>Redis Eval 命令使用 Lua 解释器执行脚本。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL script numkeys key [key ...] arg [arg ...]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li><strong>script</strong>： 参数是一段 Lua 5.1 脚本程序。脚本不必(也不应该)定义为一个 Lua 函数。</li><li><strong>numkeys</strong>： 用于指定键名参数的个数。</li><li><strong>key [key …]</strong>： 从 EVAL 的第三个参数开始算起，表示在脚本中所用到的那些 Redis 键(key)，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用 1 为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)。</li><li><strong>arg [arg …]</strong>： 附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)。</li></ul></li><li><p><strong>返回值：</strong></p><p>返回需要执行的输出内容。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; eval &quot;return &#123;KEYS[1],KEYS[2],ARGV[1],ARGV[2]&#125;&quot; 2 key1 key2 first second</span><br><span class="line">1) &quot;key1&quot;</span><br><span class="line">2) &quot;key2&quot;</span><br><span class="line">3) &quot;first&quot;</span><br><span class="line">4) &quot;second&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p></blockquote><h4 id="1-9-2-EVALSHA-sha1-numkeys-key-key-arg-arg"><a href="#1-9-2-EVALSHA-sha1-numkeys-key-key-arg-arg" class="headerlink" title="1.9.2 EVALSHA sha1 numkeys key [key ...] arg [arg ...]"></a>1.9.2 <strong><a id="EVALSHA sha1 numkeys key [key …] arg [arg …]">EVALSHA sha1 numkeys key [key ...] arg [arg ...]</a></strong></h4><p>Redis Evalsha 命令根据给定的 sha1 校验码，执行缓存在服务器中的脚本。</p><p>将脚本缓存到服务器的操作可以通过 SCRIPT LOAD 命令进行。</p><p>这个命令的其他地方，比如参数的传入方式，都和 EVAL 命令一样。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVALSHA sha1 numkeys key [key ...] arg [arg ...]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>:</p><ul><li><strong>sha1</strong> ： 通过 SCRIPT LOAD 生成的 sha1 校验码。</li><li><strong>numkeys</strong>： 用于指定键名参数的个数。</li><li><strong>key [key …]</strong>： 从 EVAL 的第三个参数开始算起，表示在脚本中所用到的那些 Redis 键(key)，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用 1 为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)。</li><li><strong>arg [arg …]</strong>： 附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)。</li></ul></li><li><p><strong>返回值：</strong></p><p>输出缓存的数据内容。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCRIPT LOAD &quot;return &#x27;hello moto&#x27;&quot;</span><br><span class="line">&quot;232fd51614574cf0867b83d384a5e898cfd24e5a&quot;</span><br><span class="line">127.0.0.1:6379&gt; EVALSHA &quot;232fd51614574cf0867b83d384a5e898cfd24e5a&quot; 0</span><br><span class="line">&quot;hello moto&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p></blockquote><h4 id="1-9-3-SCRIPT-EXISTS-sha1-sha1"><a href="#1-9-3-SCRIPT-EXISTS-sha1-sha1" class="headerlink" title="1.9.3 SCRIPT EXISTS sha1 [sha1 ...]"></a>1.9.3 <strong><a id="SCRIPT EXISTS sha1 [sha1 …]">SCRIPT EXISTS sha1 [sha1 ...]</a></strong></h4><p>Redis Script Exists 命令用于校验指定的脚本是否已经被保存在缓存当中。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCRIPT EXISTS sha1 [sha1 ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>一个列表，包含 0 和 1 ，前者表示脚本不存在于缓存，后者表示脚本已经在缓存里面了。</p><p>列表中的元素和给定的 SHA1 校验和保持对应关系，比如列表的第三个元素的值就表示第三个 SHA1 校验和所指定的脚本在缓存中的状态。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">载入一个脚本</span></span><br><span class="line">127.0.0.1:6379&gt; SCRIPT LOAD &quot;return &#x27;hello moto&#x27;&quot;</span><br><span class="line">&quot;232fd51614574cf0867b83d384a5e898cfd24e5a&quot;</span><br><span class="line">127.0.0.1:6379&gt;  SCRIPT EXISTS &quot;232fd51614574cf0867b83d384a5e898cfd24e5a&quot;</span><br><span class="line">1) (integer) 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清空缓存</span></span><br><span class="line">127.0.0.1:6379&gt; SCRIPT FLUSH</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;  SCRIPT EXISTS &quot;232fd51614574cf0867b83d384a5e898cfd24e5a&quot;</span><br><span class="line">1) (integer) 0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p></blockquote><h4 id="1-9-4-SCRIPT-FLUSH"><a href="#1-9-4-SCRIPT-FLUSH" class="headerlink" title="1.9.4 SCRIPT FLUSH"></a>1.9.4 <strong><a id="SCRIPT FLUSH">SCRIPT FLUSH</a></strong></h4><p>Redis Script Flush 命令用于清除所有 Lua 脚本缓存。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCRIPT FLUSH</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 总是返回 <code>OK</code>.</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCRIPT FLUSH</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p></blockquote><h4 id="1-9-5-SCRIPT-KILL"><a href="#1-9-5-SCRIPT-KILL" class="headerlink" title="1.9.5 SCRIPT KILL"></a>1.9.5 <strong><a id="SCRIPT KILL">SCRIPT KILL</a></strong></h4><p>Redis Script kill 命令用于杀死当前正在运行的 Lua 脚本，当且仅当这个脚本没有执行过任何写操作时，这个命令才生效。</p><p>这个命令主要用于终止运行时间过长的脚本，比如一个因为 BUG 而发生无限循环的脚本。</p><p>SCRIPT KILL 执行之后，当前正在运行的脚本会被杀死，执行这个脚本的客户端会从 EVAL 命令的阻塞当中退出，并收到一个错误作为返回值。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCRIPT KILL</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 总是返回 <code>OK</code>.</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCRIPT KILL</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p></blockquote><h4 id="1-9-6-SCRIPT-LOAD-script"><a href="#1-9-6-SCRIPT-LOAD-script" class="headerlink" title="1.9.6 SCRIPT LOAD script"></a>1.9.6 <strong><a id="SCRIPT LOAD script">SCRIPT LOAD script</a></strong></h4><p>Redis Script Load 命令用于将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。</p><p>EVAL 命令也会将脚本添加到脚本缓存中，但是它会立即对输入的脚本进行求值。</p><p>如果给定的脚本已经在缓存里面了，那么不执行任何操作。</p><p>在脚本被加入到缓存之后，通过 EVALSHA 命令，可以使用脚本的 SHA1 校验和来调用这个脚本。</p><p>脚本可以在缓存中保留无限长的时间，直到执行 SCRIPT FLUSH 为止。</p><p>关于使用 Redis 对 Lua 脚本进行求值的更多信息，请参见 EVAL 命令。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCRIPT LOAD script</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>给定脚本的 SHA1 校验和</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCRIPT LOAD &quot;return 1&quot;</span><br><span class="line">&quot;e0e1f9fabfc9d4800c877a703b823ac0578ff8db&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p></blockquote><h3 id="1-10-Connection-连接"><a href="#1-10-Connection-连接" class="headerlink" title="1.10 Connection(连接)"></a>1.10 <strong>Connection(连接)</strong></h3><h4 id="1-10-1-AUTH-username-password"><a href="#1-10-1-AUTH-username-password" class="headerlink" title="1.10.1 AUTH [username] password"></a>1.10.1 <strong><a id="AUTH password">AUTH [username] password</a></strong></h4><p>Redis AUTH 命令用来设置如下两种方式对访问Redis进行权限控制：</p><ol><li>通过 <code>requirepass</code> 设置访问密码。If the Redis server is password protected via the <code>requirepass</code> option.</li><li>Redis 6.0 起，支持ACL权限控制，具体参考 <a href="https://redis.com.cn/topics/acl.html">Redis ACL system</a> 。</li></ol><p>对应于配置文件中的 <code>requirepass</code> 命令。通过配置 <code>requirepass</code> ，可以使 Redis 拒绝未使用 <code>AUTH</code> 验证访问权限的客户端链接。</p><p>如果 <code>AUTH</code> 命令验证的密码与配置文件<code>requirepass</code> 配置的相同，则密码验证通过，服务器返回<code>OK</code>,并开始接受客户端的命令。</p><p>密码验证失败，则返回提示信息重新输入密码。 </p><blockquote><p><strong>安全注意</strong></p><p>因为redis的高性能能在短时间接受非常多的尝试性密码，所以请务必设置一个足够复杂的密码以防止可能的攻击。推荐使用 <a href="https://redis.com.cn/commands/acl-genpass.html">ACL GENPASS</a> 命令生成密码。</p></blockquote><ul><li><p><strong>语法：</strong></p><p>当使用 Redis ACLs 权限控制时，<code>AUTH</code> 验证格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; AUTH [username] password</span><br></pre></td></tr></table></figure><p>通过验证用户名密码的方式验证访问权限，详细参考 <a href="https://redis.com.cn/topics/acl.html">ACL guide</a></p><p>在 ACLs 模式下，如果传递一个密码参数给 AUTH，那么会隐式设置用户名 “default”。</p></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 验证失败时返回错误。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; AUTH PASSWORD</span><br><span class="line">(error) ERR Client sent AUTH, but no password is set</span><br><span class="line">127.0.0.1:6379&gt; CONFIG SET requirepass &quot;yanpenggong&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; AUTH mypass</span><br><span class="line">Ok</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-10-2-ECHO-message"><a href="#1-10-2-ECHO-message" class="headerlink" title="1.10.2 ECHO message"></a>1.10.2 <strong><a id="ECHO message">ECHO message</a></strong></h4><p>Redis ECHO 命令用于打印一个给定的信息 message ，测试时使用。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ECHO message</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>:返回字符串<code>message</code>本身。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ECHO &quot;Hello World&quot;</span><br><span class="line">&quot;Hello World&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-10-3-PING"><a href="#1-10-3-PING" class="headerlink" title="1.10.3 PING"></a>1.10.3 <strong><a id="PING">PING</a></strong></h4><p>Redis PING 命令用于客户端向 Redis 服务器发送一个 PING ，如果服务器运作正常的话，会返回一个 <code>PONG</code> 。PING 命令不带参数返回 <code>PONG</code> 。带参数则返回参数 <code>message</code>。</p><p>PING 通常用来测试连接是否存活，或者测试延迟。</p><p>如果客户端订阅某个频道或某个模式，不带参数执行命令会返回一个数组第一个元素是 “pong” ，第二个元素是空，带参数执行同样返回参数 <code>message</code>。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PING</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>：如果连接正常就返回一个 PONG ，否则返回一个连接错误。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PING</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; PING &quot;Hello World&quot;</span><br><span class="line">&quot;Hello World&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-10-4-QUIT"><a href="#1-10-4-QUIT" class="headerlink" title="1.10.4 QUIT"></a>1.10.4 <strong><a id="QUIT">QUIT</a></strong></h4><p>Redis QUIT 命令用于请求服务器关闭连接。在当前连接上的待处理请求完成后，立刻断开连接。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; QUIT</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 总是返回 OK。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; QUIT</span><br><span class="line">[root@localhost redis-6.2.6]# </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-10-5-SELECT-index"><a href="#1-10-5-SELECT-index" class="headerlink" title="1.10.5 SELECT index"></a>1.10.5 <strong><a id="SELECT index">SELECT index</a></strong></h4><p>Redis SELECT 命令用于切换到指定的数据库，index 是从 0 开始的整数。默认使用数据库 0 。<br>Redis 可选择的数据库是一种逻辑命名空间格式：物理上所有的数据库还是持久化在一起的，在同一个RDB/AOF文件中。不同的数据库中可以有同名的 key， FLUSHDB， <code>SWAPDB</code>或 RANDOMKEY 这些命令都是针对选定的数据库有效。<br>从实际应用角度出发，Redis databases 主要用来表示不同的 <code>key</code> 属于同一个应用，而不是一个 Redis 实例对应多个不同的应用。<br>Reids 分片（Cluster）不能使用 SELECT 。因为 Redis 分片只支持数据库 0 。Redis 分片的情况下，有多个数据库是没有用的。<br>当前选定的数据库是连接的一个属性，客户端应该记录当前连接的数据库并在重连的时候重新选择对应的数据库。<br>没有查询当前连接所选择的数据库的命令，可以使用 CLIENT LIST 输出所有用户当前选择的数据库。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SELECT index</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>：总是返回 OK 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认使用 0 号数据库</span></span><br><span class="line">127.0.0.1:6379&gt; SET dn_number 0</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 1 号数据库</span></span><br><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已经切换到 1 号数据库，注意 Redis 现在的命令提示符多了个 [1]</span></span><br><span class="line">127.0.0.1:6379[1]&gt; GET db_number</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379[1]&gt; SET db_number 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; GET db_number</span><br><span class="line">&quot;1&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再切换到 3 号数据库</span></span><br><span class="line">127.0.0.1:6379[1]&gt; SELECT 3</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提示符从 [1] 改变成了 [3]</span></span><br><span class="line">127.0.0.1:6379[3]&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h3 id="1-11-SERVER-服务器"><a href="#1-11-SERVER-服务器" class="headerlink" title="1.11 SERVER(服务器)"></a>1.11 <strong>SERVER(服务器)</strong></h3><h4 id="1-11-1-BGREWRITEAOF"><a href="#1-11-1-BGREWRITEAOF" class="headerlink" title="1.11.1 BGREWRITEAOF"></a>1.11.1 <strong><a id="BGREWRITEAOF">BGREWRITEAOF</a></strong></h4><p>Redis <code>BGREWRITEAOF</code> 命令用于异步执行一个 AOF（<a href="https://redis.com.cn/topics/persistence.html#append-only-file">Append Only File</a> ） 文件重写操作。重写会创建一个当前 AOF 文件的体积优化版本。</p><p>即使 Bgrewriteaof 执行失败，也不会有任何数据丢失，因为旧的 AOF 文件在 Bgrewriteaof 成功之前不会被修改。</p><p><strong>注意：</strong>从 Redis 2.4 开始， AOF 重写由 Redis 自行触发， <code>BGREWRITEAOF</code> 仅仅用于手动触发重写操作。</p><p>只有当后台没有正在运行的持久化进程的时候，重写才会被 Redis 触发。</p><p>具体来说:</p><ul><li>如果一个 redis 的子进程在创建磁盘快照，AOF 重写被列入<em>执行计划</em>但是不会执行直到生成 RDB 的子程序退出。在这种情况下 <code>BGREWRITEAOF</code> 将仍然返回OK状态码, 不过使用一个合适的提示信息。你可以检查一个 AOF 重写是否被例入执行计划通过查询 <code>INFO</code> 命令。</li><li>如果一个 AOF rewrite 已经在运行，那么这个命令将会返回错误并且不会有 AOF rewrite 命令被列入后续的执行计划中。</li><li>如果 AOF 重启可以启动，但是在运行开始的时候失败（例如创建子进程失败），会返回错误信息给调用者。</li></ul><p>从 Redis 2.4 起 AOF rewrite 是被自动触发的，当然 <code>BGREWRITEAOF</code> 命令可以用来在任何时间触发重写。</p><p>请参考 <a href="https://redis.com.cn/topics/persistence.html">Redis持久化文档</a> 获取更多信息。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BGREWRITEAOF</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>字符串: 启动重写的提示信息或者执行错误信息。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BGREWRITEAOF</span><br><span class="line">Background append only file rewriting started</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p>可用版本&gt;= 1.0.0.</p></blockquote><h4 id="1-11-2-BGSAVE"><a href="#1-11-2-BGSAVE" class="headerlink" title="1.11.2 BGSAVE"></a>1.11.2 <strong><a id="BGSAVE">BGSAVE</a></strong></h4><p>后台保存DB。一般立即返回 OK 状态码。 Redis forks, 父进程继续提供服务以供客户端调用，子进程将DB数据保存到磁盘然后退出。</p><p>如果有运行中的SAVE或AOF返回错误。</p><p>如果使用 <code>BGSAVE SCHEDULE</code> 那么立即返回 <code>OK</code> ，如果后台正好有运行中的AOF，SAVE操作会在下次运行。</p><p>客户端可以通过 <code>LASTSAVE</code> 命令查看相关信息，判断 <code>BGSAVE</code> 命令是否执行成功。</p><p>请移步 <a href="https://redis.com.cn/topics/persistence.html">持久化文档</a> 查看更多相关细节。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BGSAVE [SCHEDULE]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: <code>Background saving started</code> 或 <code>Background saving scheduled</code> 使用 <code>SCHEDULE</code> 时。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BGSAVE</span><br><span class="line">Background saving started</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-11-3-CLIENT-KILL"><a href="#1-11-3-CLIENT-KILL" class="headerlink" title="1.11.3 CLIENT KILL"></a>1.11.3 <strong><a id="CLIENT KILL">CLIENT KILL</a></strong></h4><p>Redis CLIENT KILL 命令用于关闭地址为 <code>ip:port</code> 的客户端连接。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CLIENT KILL [ip:port] [ID client-id] [TYPE normal|master|slave|pubsub] [USER username] [ADDR ip:port] [SKIPME yes/no]</span><br></pre></td></tr></table></figure><p><code>ip:port</code> 应该和 <code>CLIENT LIST</code> 命令返回的结果中 <code>addr</code> 列其中一行匹配。</p><p>因为 Redis 使用单线程设计，所以当 Redis 正在执行命令的时候，不会有客户端被断开连接。</p><p>如果要被断开连接的客户端正在执行命令，那么当这个命令执行之后，在发送下一个命令的时候，它就会收到一个网络错误，告知它自身的连接已被关闭。</p><p>可以根据不同属性杀死客户端而不是只按地址杀死。他们有以下选项：</p><ul><li><code>CLIENT KILL ADDR ip:port</code> 和旧版的三个参数时的行为完全一样。 </li><li><code>CLIENT KILL ID client-id</code> 可以通过唯一<code>ID</code>字段杀死一个客户端，唯一<code>ID</code>可以通过Redis2.8.12的<code>CLIENT LIST</code>命令查询。</li><li><code>CLIENT KILL TYPE type</code> 这里的 <code>type</code> 可以是 <code>normal</code>, <code>slave</code>, <code>pubsub</code>。 这将关闭给定烈性的所有客户端。请注意<code>MONITOR</code>命令阻塞的客户端是 <code>normal</code> 类型。 </li><li><code>CLIENT KILL USER username</code> 关闭使用 <a href="https://redis.com.cn/topics/acl.html">ACL</a> username 连接的客户端。如果不存在 ACL user 则返回错误。</li><li><code>CLIENT KILL SKIPME yes/no</code> 默认情况下是 <code>yes</code>, 调用该命令的客户端自身不被删掉，如果为 <code>no</code> 也会删除自身。</li></ul></li><li><p><strong>返回值：</strong></p><p>三参数格式执行命令：<strong>字符串</strong>: 连接存在并被关闭返回 <code>OK</code>。</p><p>新格式：<strong>整数</strong>: 被杀死的客户端个数。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有已连接客户端</span></span><br><span class="line">127.0.0.1:6379&gt; CLIENT list</span><br><span class="line">id=90 addr=127.0.0.1:34566 laddr=127.0.0.1:6379 fd=7 name= age=0 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=26 qbuf-free=40928 argv-mem=10 obl=0 oll=0 omem=0 tot-mem=61466 events=r cmd=client user=default redir=-1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">杀死当前客户端的连接</span></span><br><span class="line">127.0.0.1:6379&gt; CLIENT KILL 127.0.0.1:34566</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之前的连接已经被关闭，CLI 客户端又重新建立了连接</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之前的端口是 34566 ，现在是 34568</span></span><br><span class="line">127.0.0.1:6379&gt; CLIENT list</span><br><span class="line">id=91 addr=127.0.0.1:34568 laddr=127.0.0.1:6379 fd=7 name= age=0 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=26 qbuf-free=40928 argv-mem=10 obl=0 oll=0 omem=0 tot-mem=61466 events=r cmd=client user=default redir=-1</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.4.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of client connections</p></blockquote><h4 id="1-11-4-CLIENT-LIST"><a href="#1-11-4-CLIENT-LIST" class="headerlink" title="1.11.4 CLIENT LIST"></a>1.11.4 <strong><a id="CLIENT LIST">CLIENT LIST</a></strong></h4><p>Redis CLIENT LIST 命令用于返回所有连接到服务器的客户端信息和统计数据。</p><p>从 v5.0 起，<code>TYPE type</code> 子命令可以用来过滤客户端类型，<em>type</em> 可以是 <code>normal</code>, <code>master</code>, <code>replica</code> 或<code>pubsub</code>。</p><p>注意，被 <code>MONITOR</code> 阻塞的客户端被归类为 <code>normal</code> 类型。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CLIENT LIST [TYPE normal|master|replica|pubsub]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>命令返回多行字符串，这些字符串按以下形式被格式化：</p><ul><li>每个已连接客户端对应一行（以 LF 分割）</li><li>每行字符串由一系列 属性=值 形式的域组成，每个域之间以空格分开</li></ul><p>以下是域的含义：</p><ul><li>addr ： 客户端的地址和端口</li><li>fd ： 套接字所使用的文件描述符</li><li>age ： 以秒计算的已连接时长</li><li>idle ： 以秒计算的空闲时长</li><li>flags ： 客户端 flag </li><li>db ： 该客户端正在使用的数据库 ID</li><li>sub ： 已订阅频道的数量</li><li>psub ： 已订阅模式的数量</li><li>multi ： 在事务中被执行的命令数量</li><li>qbuf ： 查询缓冲区的长度（字节为单位， 0 表示没有分配查询缓冲区）</li><li>qbuf-free ： 查询缓冲区剩余空间的长度（字节为单位， 0 表示没有剩余空间）</li><li>obl ： 输出缓冲区的长度（字节为单位， 0 表示没有分配输出缓冲区）</li><li>oll ： 输出列表包含的对象数量（当输出缓冲区没有剩余空间时，命令回复会以字符串对象的形式被入队到这个队列里）</li><li>omem ： 输出缓冲区和输出列表占用的内存总量</li><li>events ： 文件描述符事件</li><li>cmd ： 最近一次执行的命令</li></ul><p>客户端 flag 可以由以下部分组成：</p><ul><li>O ： 客户端是 MONITOR 模式下的附属节点（slave）</li><li>S ： 客户端是一般模式下（normal）的附属节点</li><li>M ： 客户端是主节点（master）</li><li>x ： 客户端正在执行事务</li><li>b ： 客户端正在等待阻塞事件</li><li>i ： 客户端正在等待 VM I/O 操作（已废弃）</li><li>d ： 一个受监视（watched）的键已被修改， EXEC 命令将失败</li><li>c : 在将回复完整地写出之后，关闭链接</li><li>u : 客户端未被阻塞（unblocked）</li><li>A : 尽可能快地关闭连接</li><li>N : 未设置任何 flag</li></ul><p>文件描述符事件可以是：</p><ul><li>r : 客户端套接字（在事件 loop 中）是可读的（readable）</li><li>w : 客户端套接字（在事件 loop 中）是可写的（writeable）</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CLIENT LIST</span><br><span class="line">id=92 addr=127.0.0.1:34570 laddr=127.0.0.1:6379 fd=7 name= age=0 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=26 qbuf-free=40928 argv-mem=10 obl=0 oll=0 omem=0 tot-mem=61466 events=r cmd=client user=default redir=-1</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.4.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of client connections</p></blockquote><h4 id="1-11-5-CLIENT-GETNAME"><a href="#1-11-5-CLIENT-GETNAME" class="headerlink" title="1.11.5 CLIENT GETNAME"></a>1.11.5 <strong><a id="CLIENT GETNAME">CLIENT GETNAME</a></strong></h4><p>Redis CLIENT GETNAME 命令用于返回 <code>CLIENT SETNAME</code>命令为当前连接设置的名字。 因为新创建的连接默认是没有名字的， 对于没有名字的连接， <code>CLIENT GETNAME</code> 返回空白回复。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CLIENT GETNAME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 如果连接没有设置名字，那么返回空白回复； 如果有设置名字，那么返回名字。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新连接默认没有名字</span></span><br><span class="line">127.0.0.1:6379&gt; CLIENT GETNAME</span><br><span class="line">(nil)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置名字</span></span><br><span class="line">127.0.0.1:6379&gt; CLIENT SETNAME hello-world-connection</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回名字</span></span><br><span class="line">127.0.0.1:6379&gt; CLIENT GETNAME</span><br><span class="line">&quot;hello-world-connection&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.9.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-11-6-CLIENT-PAUSE"><a href="#1-11-6-CLIENT-PAUSE" class="headerlink" title="1.11.6 CLIENT PAUSE"></a>1.11.6 <strong><a id="CLIENT PAUSE">CLIENT PAUSE</a></strong></h4><p><code>CLIENT PAUSE</code> 是连接控制命令，它可以将所有客户端的访问暂停给定的毫秒数。</p><p>该命令执行如下：</p><ul><li>它会停止处理所有来自一般客户端或者pub/sub客户端的命令。但是和slaves的复制命令不受影响。</li><li>因为它会立刻返回OK给调用者，所以CLIENT PAUSE 不会被自己暂停。</li><li>当给定的时间结束，所有的客户端都被解除阻塞：这时所有客户端的查询缓存里积累的所有命令都会被处理。</li></ul><p><code>CLIENT PAUSE</code> 命令可以可控的将客户端从一个Redis实例切换至另一个实例。</p><p>比如，当需要升级一个实例时，管理员可以作如下操作：</p><ul><li>使用CLIENT PAUSE 暂停所有客户端</li><li>等待数秒，让slaves 节点处理完所有来自master的复制命令</li><li>将一个salve节点切换为 master</li><li>重配客户端以来接新的 master 节点</li></ul><p>可以在MULTI/EXEC中一起使用CLIENT PAUSE 和INFO replication以在阻塞的同时获取当前master的偏移量。用这种方法，可以检查slaves处理至给定的复制偏移节点，确保复制完整。</p><p>从 3.2.10 / 4.0.0 起，该命令也会停止过期和淘汰在暂停时期，保持数据处于静止不变的状态。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CLIENT PAUSE timeout </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: OK 或者 error timeout is invalid。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CLIENT PAUSE 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.9.50.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-11-7-CLIENT-SETNAME"><a href="#1-11-7-CLIENT-SETNAME" class="headerlink" title="1.11.7 CLIENT SETNAME"></a>1.11.7 <strong><a id="CLIENT SETNAME">CLIENT SETNAME</a></strong></h4><p>Redis <code>CLIENT SETNAME</code> 命令为当前连接设置一个名字。</p><p>这个名字会显示在<code>CLIENT LIST</code>命令的结果中， 用于客户端识别当前与服务器之间的连接。</p><p>例如， 在使用 Redis 构建队列（queue）时， 可以根据连接负责的任务（role）， 为信息生产者（producer）和信息消费者（consumer）分别设置不同的名字。</p><p>名字使用 Redis 的字符串类型来保存， 最大可以占用 512 MB 。 另外， 为了避免和<code>CLIENT LIST</code> 命令的输出格式发生冲突， 名字里不允许使用空格。</p><p>要移除一个连接的名字， 可以将连接的名字设为空字符串 “” 。</p><p>使用 <code>CLIENT GETNAME</code> 命令可以取出连接的名字。</p><p>新创建的连接默认是没有名字的。</p><p>提示：在 Redis 应用程序发生连接泄漏时，为连接设置名字是一种很好的 debug 手段。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CLIENT SETNAME connection-name</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: <code>OK</code> 设置成功。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新连接默认没有名字</span></span><br><span class="line">127.0.0.1:6379&gt; CLIENT GETNAME</span><br><span class="line">(nil)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置名字</span></span><br><span class="line">127.0.0.1:6379&gt; CLIENT SETNAME link1-connection</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回名字</span></span><br><span class="line">127.0.0.1:6379&gt; CLIENT GETNAME</span><br><span class="line">&quot;link1-connection&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在客户端列表中查看</span></span><br><span class="line">127.0.0.1:6379&gt; CLIENT LIST</span><br><span class="line">id=94 addr=127.0.0.1:34574 laddr=127.0.0.1:6379 fd=7 name=link1-connection age=49 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=26 qbuf-free=40928 argv-mem=10 obl=0 oll=0 omem=0 tot-mem=61466 events=r cmd=client user=default redir=-1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除名字</span></span><br><span class="line">127.0.0.1:6379&gt; CLIENT SETNAME  # 只用空格是不行的！</span><br><span class="line">(error) ERR Unknown subcommand or wrong number of arguments for &#x27;SETNAME&#x27;. Try CLIENT HELP.</span><br><span class="line">127.0.0.1:6379&gt; CLIENT SETNAME &quot;&quot;  # 必须双引号显示包围</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; CLIENT GETNAME  # 清除完毕</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.9.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-11-8-CLUSTER-SLOTS"><a href="#1-11-8-CLUSTER-SLOTS" class="headerlink" title="1.11.8 CLUSTER SLOTS"></a>1.11.8 <strong><a id="CLUSTER SLOTS">CLUSTER SLOTS</a></strong></h4><p>Redis Client Slots 命令用于当前的集群状态，以数组形式展示。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CLUSTER SLOT</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>IP/端口嵌套的列表数组。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster slots</span><br><span class="line">1) 1) (integer) 0</span><br><span class="line">   2) (integer) 4095</span><br><span class="line">   3) 1) &quot;127.0.0.1&quot;</span><br><span class="line">      2) (integer) 7000</span><br><span class="line">   4) 1) &quot;127.0.0.1&quot;</span><br><span class="line">      2) (integer) 7004</span><br><span class="line">2) 1) (integer) 12288</span><br><span class="line">   2) (integer) 16383</span><br><span class="line">   3) 1) &quot;127.0.0.1&quot;</span><br><span class="line">      2) (integer) 7003</span><br><span class="line">   4) 1) &quot;127.0.0.1&quot;</span><br><span class="line">      2) (integer) 7007</span><br><span class="line">3) 1) (integer) 4096</span><br><span class="line">   2) (integer) 8191</span><br><span class="line">   3) 1) &quot;127.0.0.1&quot;</span><br><span class="line">      2) (integer) 7001</span><br><span class="line">   4) 1) &quot;127.0.0.1&quot;</span><br><span class="line">      2) (integer) 7005</span><br><span class="line">4) 1) (integer) 8192</span><br><span class="line">   2) (integer) 12287</span><br><span class="line">   3) 1) &quot;127.0.0.1&quot;</span><br><span class="line">      2) (integer) 7002</span><br><span class="line">   4) 1) &quot;127.0.0.1&quot;</span><br><span class="line">      2) (integer) 7006</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 3.0.0.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the total number of Cluster nodes</p></blockquote><h4 id="1-11-9-COMMAND"><a href="#1-11-9-COMMAND" class="headerlink" title="1.11.9 COMMAND"></a>1.11.9 <strong><a id="COMMAND">COMMAND</a></strong></h4><p>Redis COMMAND 命令以数组的形式返回有关所有 Redis 命令的详细信息。</p><p>如果集群客户端必须知道命令中 key 的位置，以便命令可以转到匹配的实例， 但是 Redis 命令在接收一个 key，多个 key 甚至由其他数据分隔开的多个 key 之间会有所不同。</p><p>你可以使用 COMMAND 来为每一个命令缓存命令和 key 位置之间的映射关系，以实现命令到集群的精确路由。</p><blockquote><ol><li><p><strong>嵌套结果数组</strong>:</p><p>每一个顶级结果包含了六个嵌套的结果。每一个嵌套结果是：</p><ul><li><p>命令名称</p></li><li><p>命令参数个数</p></li><li><p>嵌套的命令选项</p></li><li><p>参数列表中第一个 key 的位置</p></li><li><p>参数列表中最后一个 key 的位置</p></li><li><p>用于定位重复 key 的步数</p></li></ul></li><li><p><strong>命令名称</strong></p><p>命令名称是以小写字符串形式返回的命令。</p></li></ol><ol><li><p><strong>命令参数个数</strong></p><p>|                                                              |                                                              |<br>| —————————————————————————————— | —————————————————————————————— |<br>| 1) 1) “get”<br/>    2) (integer) 2<br/>    3) 1) readonly<br/>    4) (integer) 1<br/>    5) (integer) 1<br/>    6) (integer) 1 | 1) 1) “mget” <br/>    2) (integer) -2<br/>    3) 1) readonly<br/>    4) (integer) 1<br/>    5) (integer) -1<br/>    6) (integer) 1 |</p><p>命令参数个数遵循一个简单的模式</p><ul><li>正数：命令拥有固定数量的必需参数。</li><li>负数：命令拥有最小数量的必需参数，可以有更多的参数。</li></ul><p>命令参数个数<strong>包含</strong>计算命令名称本身。</p><p>例如：</p><ul><li><code>GET</code> 参数个数是 2，因为该命令仅接收一个参数，并且命令格式始终是 <code>GET _key_</code>。</li><li><code>MGET</code> 的参数个数是 -2，因为该命令接收至少一个参数，但最多可以接收无限数量：<code>MGET _key1_ [key2] [key3] ...</code>。</li></ul><p>在 <code>MGET</code> 中同样需要注意，『最后一个key的位置』的值是 -1，这表示 key 列表可以具有无限长度。</p></li><li><p><strong>选项</strong></p><p>命令标志是包含一个或多个状态回复的数组：</p><ul><li><em>write</em> - 命令可能会导致修改</li><li><em>readonly</em> - 命令永远不会修改键</li><li><em>denyoom</em> - 如果当前发生OOM，则拒绝该命令</li><li><em>admin</em> - 服务器管理命令</li><li><em>pubsub</em> - 发布订阅相关的命令</li><li><em>noscript</em> - 在脚本中将会拒绝此命令</li><li><em>random</em> - 命令具有随机结果，在脚本中使用很危险</li><li><em>sort\</em>for*script* - 如果从脚本调用，则排序输出</li><li><em>loading</em> - 允许在数据库加载时使用此命令</li><li><em>stale</em> - 允许在从节点具有陈旧数据时使用此命令</li><li><em>skip_monitor</em> - 在MONITOR中不会显示此命令</li><li><em>asking</em> - 集群相关的 - 即使正在导入数据也接受此命令</li><li><em>fast</em> - 命令以常量或log(N)时间运行。用于延迟监控。</li><li><em>movablekeys</em> - key在命令中没有预先确定的位置。你必须自己发现key</li></ul></li><li><p><strong>可变位置的 Key</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1) 1) &quot;sort&quot;</span><br><span class="line">   2) (integer) -2</span><br><span class="line">   3) 1) write</span><br><span class="line">      2) denyoom</span><br><span class="line">      3) movablekeys</span><br><span class="line">   4) (integer) 1</span><br><span class="line">   5) (integer) 1</span><br><span class="line">   6) (integer) 1</span><br></pre></td></tr></table></figure><p>某些 Redis 命令没有预先确定 key 的位置。对于那些命令，标志 <code>movablekeys</code>会被添加到命令的选项中。 Redis 集群客户端需要解析标记为 <code>movabkeleys</code> 的命令，以便定位所有相关的 key 的位置。</p><p>目前需要解析 key 位置的完整命令列表：</p><ul><li><code>SORT</code> - 可选的 <code>STORE</code> key，可选的 <code>BY</code> 权重，可选的 <a href="https://redis.com.cn/commands/get.html">GET</a> keys</li><li><code>ZUNIONSTORE</code> - keys 参数列表在 <code>WEIGHT</code>或者 <code>AGGREGATE</code>之前</li><li><code>ZINTERSTORE</code> - keys 参数列表在 <code>WEIGHT</code>或者<code>AGGREGATE</code>之前</li><li><code>EVAL</code> - keys 列表是在参数 <code>numkeys</code> 之后的 <code>numkeys</code>个参数</li><li><code>EVALSHA</code> - keys 列表是在参数 <code>numkeys</code>之后的 <code>numkeys</code> 个参数</li></ul><p>另请参阅 <code>COMMAND GETKEYS</code> 来让 Redis 服务器告诉你任意给定完整命令中的 keys 在哪里。</p></li><li><p><strong>参数列表中的第一个Key</strong></p><p>对大部分命令来说，第一个 key 的位置是 1。位置 0 始终是命令名称本身。</p></li><li><p><strong>参数列表中的最后一个 Key</strong></p><p>Redis 命令通常可以接收一个 key，两个 key 或者无限数量的 key 。</p><p>如果命令只接收一个 key，那么第一个 key 和最后一个 key 的位置都是1。</p><p>如果命令接收两个 key（例如：<a href="https://redis.com.cn/commands/brpoplpush.html">BRPOPLPUSH</a>、<a href="https://redis.com.cn/commands/smove.html">SMOVE</a>、<code>RENAME</code>等），那么最后一个 key 的位置是最后一个 key 在参数列表中的位置。</p><p>如果命令接收无限数量的 key，那么最后一个 key 的位置是 -1。</p></li><li><p><strong>步数</strong></p></li></ol><div class="table-container"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1) 1) “mset”<br>    2) (integer) -3<br/>    3) 1) write <br/>        2) denyoom<br/>    4) (integer) 1<br/>    5) (integer) -1<br/>    6) (integer) 2</td><td>1) 1) “mget”<br/>    2) (integer) -2 <br/>    3) 1) readonly<br/>    4) (integer) 1<br/>    5) (integer) -1<br/>    6) (integer) 1</td></tr></tbody></table></div><p>   Key 的步数允许我们在命令中查找 key 的位置，比如 <code>MSET</code>，其格式是 <code>MSET _key1_ _val1_ [key2] [val2] [key3] [val3]...</code>。</p><p>   在 <code>MSET</code> 的用例中，key 是每隔一个位置出现，所以步数的值是 2。对比上面的 <code>MGET</code>，其步数是 1。</p></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; COMMAND</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 嵌套的命令详细信息列表。命令以随机的顺序返回。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br><span class="line">2200</span><br><span class="line">2201</span><br><span class="line">2202</span><br><span class="line">2203</span><br><span class="line">2204</span><br><span class="line">2205</span><br><span class="line">2206</span><br><span class="line">2207</span><br><span class="line">2208</span><br><span class="line">2209</span><br><span class="line">2210</span><br><span class="line">2211</span><br><span class="line">2212</span><br><span class="line">2213</span><br><span class="line">2214</span><br><span class="line">2215</span><br><span class="line">2216</span><br><span class="line">2217</span><br><span class="line">2218</span><br><span class="line">2219</span><br><span class="line">2220</span><br><span class="line">2221</span><br><span class="line">2222</span><br><span class="line">2223</span><br><span class="line">2224</span><br><span class="line">2225</span><br><span class="line">2226</span><br><span class="line">2227</span><br><span class="line">2228</span><br><span class="line">2229</span><br><span class="line">2230</span><br><span class="line">2231</span><br><span class="line">2232</span><br><span class="line">2233</span><br><span class="line">2234</span><br><span class="line">2235</span><br><span class="line">2236</span><br><span class="line">2237</span><br><span class="line">2238</span><br><span class="line">2239</span><br><span class="line">2240</span><br><span class="line">2241</span><br><span class="line">2242</span><br><span class="line">2243</span><br><span class="line">2244</span><br><span class="line">2245</span><br><span class="line">2246</span><br><span class="line">2247</span><br><span class="line">2248</span><br><span class="line">2249</span><br><span class="line">2250</span><br><span class="line">2251</span><br><span class="line">2252</span><br><span class="line">2253</span><br><span class="line">2254</span><br><span class="line">2255</span><br><span class="line">2256</span><br><span class="line">2257</span><br><span class="line">2258</span><br><span class="line">2259</span><br><span class="line">2260</span><br><span class="line">2261</span><br><span class="line">2262</span><br><span class="line">2263</span><br><span class="line">2264</span><br><span class="line">2265</span><br><span class="line">2266</span><br><span class="line">2267</span><br><span class="line">2268</span><br><span class="line">2269</span><br><span class="line">2270</span><br><span class="line">2271</span><br><span class="line">2272</span><br><span class="line">2273</span><br><span class="line">2274</span><br><span class="line">2275</span><br><span class="line">2276</span><br><span class="line">2277</span><br><span class="line">2278</span><br><span class="line">2279</span><br><span class="line">2280</span><br><span class="line">2281</span><br><span class="line">2282</span><br><span class="line">2283</span><br><span class="line">2284</span><br><span class="line">2285</span><br><span class="line">2286</span><br><span class="line">2287</span><br><span class="line">2288</span><br><span class="line">2289</span><br><span class="line">2290</span><br><span class="line">2291</span><br><span class="line">2292</span><br><span class="line">2293</span><br><span class="line">2294</span><br><span class="line">2295</span><br><span class="line">2296</span><br><span class="line">2297</span><br><span class="line">2298</span><br><span class="line">2299</span><br><span class="line">2300</span><br><span class="line">2301</span><br><span class="line">2302</span><br><span class="line">2303</span><br><span class="line">2304</span><br><span class="line">2305</span><br><span class="line">2306</span><br><span class="line">2307</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; COMMAND</span><br><span class="line">  1) 1) &quot;xsetid&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @fast</span><br><span class="line">  2) 1) &quot;lpop&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @fast</span><br><span class="line">  3) 1) &quot;xautoclaim&quot;</span><br><span class="line">     2) (integer) -6</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) random</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @fast</span><br><span class="line">  4) 1) &quot;discard&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) noscript</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">        4) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @fast</span><br><span class="line">        2) @transaction</span><br><span class="line">  5) 1) &quot;copy&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @slow</span><br><span class="line">  6) 1) &quot;type&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @read</span><br><span class="line">        3) @fast</span><br><span class="line">  7) 1) &quot;failover&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">        3) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line">  8) 1) &quot;setnx&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @fast</span><br><span class="line">  9) 1) &quot;bgrewriteaof&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line"> 10) 1) &quot;psync&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line"> 11) 1) &quot;smove&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @set</span><br><span class="line">        3) @fast</span><br><span class="line"> 12) 1) &quot;zrevrangebylex&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line"> 13) 1) &quot;zinter&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) movablekeys</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line"> 14) 1) &quot;geopos&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @geo</span><br><span class="line">        3) @slow</span><br><span class="line"> 15) 1) &quot;readwrite&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @fast</span><br><span class="line"> 16) 1) &quot;hincrby&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @fast</span><br><span class="line"> 17) 1) &quot;keys&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) sort_for_script</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @read</span><br><span class="line">        3) @slow</span><br><span class="line">        4) @dangerous</span><br><span class="line"> 18) 1) &quot;lpos&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @list</span><br><span class="line">        3) @slow</span><br><span class="line"> 19) 1) &quot;exec&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) noscript</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">        4) skip_slowlog</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @slow</span><br><span class="line">        2) @transaction</span><br><span class="line"> 20) 1) &quot;zcount&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line"> 21) 1) &quot;zdiffstore&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) movablekeys</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line"> 22) 1) &quot;replconf&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">        3) loading</span><br><span class="line">        4) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line"> 23) 1) &quot;rpush&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @fast</span><br><span class="line"> 24) 1) &quot;getdel&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @fast</span><br><span class="line"> 25) 1) &quot;brpop&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) noscript</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @slow</span><br><span class="line">        4) @blocking</span><br><span class="line"> 26) 1) &quot;georadius&quot;</span><br><span class="line">     2) (integer) -6</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) movablekeys</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @geo</span><br><span class="line">        3) @slow</span><br><span class="line"> 27) 1) &quot;persist&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @fast</span><br><span class="line"> 28) 1) &quot;blpop&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) noscript</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @slow</span><br><span class="line">        4) @blocking</span><br><span class="line"> 29) 1) &quot;zrangebylex&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line"> 30) 1) &quot;sadd&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @set</span><br><span class="line">        3) @fast</span><br><span class="line"> 31) 1) &quot;unlink&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @fast</span><br><span class="line"> 32) 1) &quot;hello&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) noscript</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">        4) fast</span><br><span class="line">        5) no_auth</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @fast</span><br><span class="line">        2) @connection</span><br><span class="line"> 33) 1) &quot;smismember&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @set</span><br><span class="line">        3) @fast</span><br><span class="line"> 34) 1) &quot;msetnx&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 2</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @slow</span><br><span class="line"> 35) 1) &quot;zrange&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line"> 36) 1) &quot;zscan&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line"> 37) 1) &quot;ltrim&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @slow</span><br><span class="line"> 38) 1) &quot;save&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line"> 39) 1) &quot;replicaof&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">        3) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line"> 40) 1) &quot;sscan&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @set</span><br><span class="line">        3) @slow</span><br><span class="line"> 41) 1) &quot;decr&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @fast</span><br><span class="line"> 42) 1) &quot;flushdb&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) write</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @slow</span><br><span class="line">        4) @dangerous</span><br><span class="line"> 43) 1) &quot;object&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 2</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @read</span><br><span class="line">        3) @slow</span><br><span class="line"> 44) 1) &quot;zmscore&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line"> 45) 1) &quot;geosearchstore&quot;</span><br><span class="line">     2) (integer) -8</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @geo</span><br><span class="line">        3) @slow</span><br><span class="line"> 46) 1) &quot;srem&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @set</span><br><span class="line">        3) @fast</span><br><span class="line"> 47) 1) &quot;rpoplpush&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @slow</span><br><span class="line"> 48) 1) &quot;zunion&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) movablekeys</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line"> 49) 1) &quot;pfselftest&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) admin</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @hyperloglog</span><br><span class="line">        2) @admin</span><br><span class="line">        3) @slow</span><br><span class="line">        4) @dangerous</span><br><span class="line"> 50) 1) &quot;shutdown&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">        3) loading</span><br><span class="line">        4) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line"> 51) 1) &quot;pfdebug&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) admin</span><br><span class="line">     4) (integer) 2</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @hyperloglog</span><br><span class="line">        3) @admin</span><br><span class="line">        4) @slow</span><br><span class="line">        5) @dangerous</span><br><span class="line"> 52) 1) &quot;pexpireat&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @fast</span><br><span class="line"> 53) 1) &quot;lset&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @slow</span><br><span class="line"> 54) 1) &quot;zrem&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line"> 55) 1) &quot;sync&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line"> 56) 1) &quot;geodist&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @geo</span><br><span class="line">        3) @slow</span><br><span class="line"> 57) 1) &quot;setrange&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @slow</span><br><span class="line"> 58) 1) &quot;lmove&quot;</span><br><span class="line">     2) (integer) 5</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @slow</span><br><span class="line"> 59) 1) &quot;expireat&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @fast</span><br><span class="line"> 60) 1) &quot;slaveof&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">        3) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line"> 61) 1) &quot;ttl&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @read</span><br><span class="line">        3) @fast</span><br><span class="line"> 62) 1) &quot;incrby&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @fast</span><br><span class="line"> 63) 1) &quot;move&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @fast</span><br><span class="line"> 64) 1) &quot;monitor&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">        3) loading</span><br><span class="line">        4) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line"> 65) 1) &quot;lastsave&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) random</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">        4) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @fast</span><br><span class="line">        3) @dangerous</span><br><span class="line"> 66) 1) &quot;del&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) write</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @slow</span><br><span class="line"> 67) 1) &quot;flushall&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) write</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @slow</span><br><span class="line">        4) @dangerous</span><br><span class="line"> 68) 1) &quot;debug&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">        3) loading</span><br><span class="line">        4) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line"> 69) 1) &quot;zincrby&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line"> 70) 1) &quot;pttl&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @read</span><br><span class="line">        3) @fast</span><br><span class="line"> 71) 1) &quot;restore&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @slow</span><br><span class="line">        4) @dangerous</span><br><span class="line"> 72) 1) &quot;xreadgroup&quot;</span><br><span class="line">     2) (integer) -7</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) movablekeys</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @slow</span><br><span class="line">        4) @blocking</span><br><span class="line"> 73) 1) &quot;restore-asking&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) asking</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @slow</span><br><span class="line">        4) @dangerous</span><br><span class="line"> 74) 1) &quot;dbsize&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @read</span><br><span class="line">        3) @fast</span><br><span class="line"> 75) 1) &quot;geoadd&quot;</span><br><span class="line">     2) (integer) -5</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @geo</span><br><span class="line">        3) @slow</span><br><span class="line"> 76) 1) &quot;reset&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) noscript</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">        4) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @fast</span><br><span class="line">        2) @connection</span><br><span class="line"> 77) 1) &quot;zremrangebyscore&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line"> 78) 1) &quot;zscore&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line"> 79) 1) &quot;hscan&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @slow</span><br><span class="line"> 80) 1) &quot;sunion&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) sort_for_script</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @set</span><br><span class="line">        3) @slow</span><br><span class="line"> 81) 1) &quot;migrate&quot;</span><br><span class="line">     2) (integer) -6</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) random</span><br><span class="line">        3) movablekeys</span><br><span class="line">     4) (integer) 3</span><br><span class="line">     5) (integer) 3</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @slow</span><br><span class="line">        4) @dangerous</span><br><span class="line"> 82) 1) &quot;zunionstore&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) movablekeys</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line"> 83) 1) &quot;xack&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) random</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @fast</span><br><span class="line"> 84) 1) &quot;rpushx&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @fast</span><br><span class="line"> 85) 1) &quot;role&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) noscript</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">        4) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @fast</span><br><span class="line">        2) @dangerous</span><br><span class="line"> 86) 1) &quot;pexpire&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @fast</span><br><span class="line"> 87) 1) &quot;rename&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @slow</span><br><span class="line"> 88) 1) &quot;blmove&quot;</span><br><span class="line">     2) (integer) 6</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) noscript</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @slow</span><br><span class="line">        4) @blocking</span><br><span class="line"> 89) 1) &quot;zremrangebylex&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line"> 90) 1) &quot;zrevrange&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line"> 91) 1) &quot;hkeys&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) sort_for_script</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @slow</span><br><span class="line"> 92) 1) &quot;mget&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @string</span><br><span class="line">        3) @fast</span><br><span class="line"> 93) 1) &quot;dump&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @read</span><br><span class="line">        3) @slow</span><br><span class="line"> 94) 1) &quot;srandmember&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @set</span><br><span class="line">        3) @slow</span><br><span class="line"> 95) 1) &quot;randomkey&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @read</span><br><span class="line">        3) @slow</span><br><span class="line"> 96) 1) &quot;georadiusbymember&quot;</span><br><span class="line">     2) (integer) -5</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) movablekeys</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @geo</span><br><span class="line">        3) @slow</span><br><span class="line"> 97) 1) &quot;zrangestore&quot;</span><br><span class="line">     2) (integer) -5</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line"> 98) 1) &quot;incrbyfloat&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @fast</span><br><span class="line"> 99) 1) &quot;zrandmember&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line">100) 1) &quot;substr&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @string</span><br><span class="line">        3) @slow</span><br><span class="line">101) 1) &quot;incr&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @fast</span><br><span class="line">102) 1) &quot;post&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @slow</span><br><span class="line">103) 1) &quot;zrank&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line">104) 1) &quot;hrandfield&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @slow</span><br><span class="line">105) 1) &quot;zdiff&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) movablekeys</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line">106) 1) &quot;zrevrangebyscore&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line">107) 1) &quot;zadd&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line">108) 1) &quot;append&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @fast</span><br><span class="line">109) 1) &quot;sdiffstore&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @set</span><br><span class="line">        3) @slow</span><br><span class="line">110) 1) &quot;hstrlen&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @fast</span><br><span class="line">111) 1) &quot;linsert&quot;</span><br><span class="line">     2) (integer) 5</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @slow</span><br><span class="line">112) 1) &quot;zrevrank&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line">113) 1) &quot;watch&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) noscript</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">        4) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @fast</span><br><span class="line">        2) @transaction</span><br><span class="line">114) 1) &quot;hdel&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @fast</span><br><span class="line">115) 1) &quot;script&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) noscript</span><br><span class="line">        2) may_replicate</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @slow</span><br><span class="line">        2) @scripting</span><br><span class="line">116) 1) &quot;punsubscribe&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) pubsub</span><br><span class="line">        2) noscript</span><br><span class="line">        3) loading</span><br><span class="line">        4) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @pubsub</span><br><span class="line">        2) @slow</span><br><span class="line">117) 1) &quot;lolwut&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @fast</span><br><span class="line">118) 1) &quot;xinfo&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 2</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @slow</span><br><span class="line">119) 1) &quot;hgetall&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @slow</span><br><span class="line">120) 1) &quot;hexists&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @fast</span><br><span class="line">121) 1) &quot;multi&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) noscript</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">        4) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @fast</span><br><span class="line">        2) @transaction</span><br><span class="line">122) 1) &quot;lindex&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @list</span><br><span class="line">        3) @slow</span><br><span class="line">123) 1) &quot;strlen&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @string</span><br><span class="line">        3) @fast</span><br><span class="line">124) 1) &quot;zlexcount&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line">125) 1) &quot;xclaim&quot;</span><br><span class="line">     2) (integer) -6</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) random</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @fast</span><br><span class="line">126) 1) &quot;zcard&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line">127) 1) &quot;stralgo&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) movablekeys</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @string</span><br><span class="line">        3) @slow</span><br><span class="line">128) 1) &quot;host:&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @slow</span><br><span class="line">129) 1) &quot;scard&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @set</span><br><span class="line">        3) @fast</span><br><span class="line">130) 1) &quot;xgroup&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 2</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @slow</span><br><span class="line">131) 1) &quot;rpop&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @fast</span><br><span class="line">132) 1) &quot;unwatch&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) noscript</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">        4) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @fast</span><br><span class="line">        2) @transaction</span><br><span class="line">133) 1) &quot;spop&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) random</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @set</span><br><span class="line">        3) @fast</span><br><span class="line">134) 1) &quot;hget&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @fast</span><br><span class="line">135) 1) &quot;pubsub&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) pubsub</span><br><span class="line">        2) random</span><br><span class="line">        3) loading</span><br><span class="line">        4) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @pubsub</span><br><span class="line">        2) @slow</span><br><span class="line">136) 1) &quot;lrange&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @list</span><br><span class="line">        3) @slow</span><br><span class="line">137) 1) &quot;set&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @slow</span><br><span class="line">138) 1) &quot;renamenx&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @fast</span><br><span class="line">139) 1) &quot;hvals&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) sort_for_script</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @slow</span><br><span class="line">140) 1) &quot;bgsave&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line">141) 1) &quot;georadiusbymember_ro&quot;</span><br><span class="line">     2) (integer) -5</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @geo</span><br><span class="line">        3) @slow</span><br><span class="line">142) 1) &quot;setbit&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @bitmap</span><br><span class="line">        3) @slow</span><br><span class="line">143) 1) &quot;exists&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @read</span><br><span class="line">        3) @fast</span><br><span class="line">144) 1) &quot;readonly&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @fast</span><br><span class="line">145) 1) &quot;zrangebyscore&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line">146) 1) &quot;info&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) random</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @slow</span><br><span class="line">        2) @dangerous</span><br><span class="line">147) 1) &quot;xpending&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @slow</span><br><span class="line">148) 1) &quot;lpush&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @fast</span><br><span class="line">149) 1) &quot;scan&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @read</span><br><span class="line">        3) @slow</span><br><span class="line">150) 1) &quot;getbit&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @bitmap</span><br><span class="line">        3) @fast</span><br><span class="line">151) 1) &quot;geosearch&quot;</span><br><span class="line">     2) (integer) -7</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @geo</span><br><span class="line">        3) @slow</span><br><span class="line">152) 1) &quot;unsubscribe&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) pubsub</span><br><span class="line">        2) noscript</span><br><span class="line">        3) loading</span><br><span class="line">        4) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @pubsub</span><br><span class="line">        2) @slow</span><br><span class="line">153) 1) &quot;zinterstore&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) movablekeys</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line">154) 1) &quot;geohash&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @geo</span><br><span class="line">        3) @slow</span><br><span class="line">155) 1) &quot;bitfield&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @bitmap</span><br><span class="line">        3) @slow</span><br><span class="line">156) 1) &quot;bitop&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 2</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @bitmap</span><br><span class="line">        3) @slow</span><br><span class="line">157) 1) &quot;get&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @string</span><br><span class="line">        3) @fast</span><br><span class="line">158) 1) &quot;xread&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) movablekeys</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @slow</span><br><span class="line">        4) @blocking</span><br><span class="line">159) 1) &quot;bitfield_ro&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @bitmap</span><br><span class="line">        3) @fast</span><br><span class="line">160) 1) &quot;sunionstore&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @set</span><br><span class="line">        3) @slow</span><br><span class="line">161) 1) &quot;decrby&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @fast</span><br><span class="line">162) 1) &quot;sort&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) movablekeys</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @set</span><br><span class="line">        3) @sortedset</span><br><span class="line">        4) @list</span><br><span class="line">        5) @slow</span><br><span class="line">        6) @dangerous</span><br><span class="line">163) 1) &quot;hmget&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @fast</span><br><span class="line">164) 1) &quot;sdiff&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) sort_for_script</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @set</span><br><span class="line">        3) @slow</span><br><span class="line">165) 1) &quot;evalsha&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) noscript</span><br><span class="line">        2) skip_monitor</span><br><span class="line">        3) may_replicate</span><br><span class="line">        4) movablekeys</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @slow</span><br><span class="line">        2) @scripting</span><br><span class="line">166) 1) &quot;psetex&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @slow</span><br><span class="line">167) 1) &quot;client&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">        3) random</span><br><span class="line">        4) loading</span><br><span class="line">        5) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line">        4) @connection</span><br><span class="line">168) 1) &quot;sinter&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) sort_for_script</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @set</span><br><span class="line">        3) @slow</span><br><span class="line">169) 1) &quot;zpopmax&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line">170) 1) &quot;publish&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) pubsub</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">        4) fast</span><br><span class="line">        5) may_replicate</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @pubsub</span><br><span class="line">        2) @fast</span><br><span class="line">171) 1) &quot;subscribe&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) pubsub</span><br><span class="line">        2) noscript</span><br><span class="line">        3) loading</span><br><span class="line">        4) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @pubsub</span><br><span class="line">        2) @slow</span><br><span class="line">172) 1) &quot;xadd&quot;</span><br><span class="line">     2) (integer) -5</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) random</span><br><span class="line">        4) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @fast</span><br><span class="line">173) 1) &quot;swapdb&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @fast</span><br><span class="line">        4) @dangerous</span><br><span class="line">174) 1) &quot;lrem&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @slow</span><br><span class="line">175) 1) &quot;llen&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @list</span><br><span class="line">        3) @fast</span><br><span class="line">176) 1) &quot;select&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) loading</span><br><span class="line">        2) stale</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @fast</span><br><span class="line">177) 1) &quot;wait&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) noscript</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @slow</span><br><span class="line">178) 1) &quot;time&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) random</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">        4) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @fast</span><br><span class="line">179) 1) &quot;brpoplpush&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) noscript</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @slow</span><br><span class="line">        4) @blocking</span><br><span class="line">180) 1) &quot;setex&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @slow</span><br><span class="line">181) 1) &quot;touch&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @read</span><br><span class="line">        3) @fast</span><br><span class="line">182) 1) &quot;hlen&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @fast</span><br><span class="line">183) 1) &quot;echo&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @fast</span><br><span class="line">        2) @connection</span><br><span class="line">184) 1) &quot;sismember&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @set</span><br><span class="line">        3) @fast</span><br><span class="line">185) 1) &quot;command&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) random</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @slow</span><br><span class="line">        2) @connection</span><br><span class="line">186) 1) &quot;xlen&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @fast</span><br><span class="line">187) 1) &quot;xdel&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @fast</span><br><span class="line">188) 1) &quot;slowlog&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) random</span><br><span class="line">        3) loading</span><br><span class="line">        4) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line">189) 1) &quot;bzpopmax&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) noscript</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line">        4) @blocking</span><br><span class="line">190) 1) &quot;hsetnx&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @fast</span><br><span class="line">191) 1) &quot;expire&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @write</span><br><span class="line">        3) @fast</span><br><span class="line">192) 1) &quot;ping&quot;</span><br><span class="line">     2) (integer) -1</span><br><span class="line">     3) 1) stale</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @fast</span><br><span class="line">        2) @connection</span><br><span class="line">193) 1) &quot;bzpopmin&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) noscript</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -2</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line">        4) @blocking</span><br><span class="line">194) 1) &quot;memory&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) random</span><br><span class="line">        3) movablekeys</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @slow</span><br><span class="line">195) 1) &quot;xrevrange&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @slow</span><br><span class="line">196) 1) &quot;pfadd&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @hyperloglog</span><br><span class="line">        3) @fast</span><br><span class="line">197) 1) &quot;config&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">        3) loading</span><br><span class="line">        4) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line">198) 1) &quot;hmset&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @fast</span><br><span class="line">199) 1) &quot;acl&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">        3) loading</span><br><span class="line">        4) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line">200) 1) &quot;xrange&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @slow</span><br><span class="line">201) 1) &quot;zpopmin&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @fast</span><br><span class="line">202) 1) &quot;lpushx&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @list</span><br><span class="line">        3) @fast</span><br><span class="line">203) 1) &quot;auth&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) noscript</span><br><span class="line">        2) loading</span><br><span class="line">        3) stale</span><br><span class="line">        4) fast</span><br><span class="line">        5) no_auth</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @fast</span><br><span class="line">        2) @connection</span><br><span class="line">204) 1) &quot;pfmerge&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @hyperloglog</span><br><span class="line">        3) @slow</span><br><span class="line">205) 1) &quot;getrange&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @string</span><br><span class="line">        3) @slow</span><br><span class="line">206) 1) &quot;bitcount&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @bitmap</span><br><span class="line">        3) @slow</span><br><span class="line">207) 1) &quot;getex&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @fast</span><br><span class="line">208) 1) &quot;psubscribe&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) pubsub</span><br><span class="line">        2) noscript</span><br><span class="line">        3) loading</span><br><span class="line">        4) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @pubsub</span><br><span class="line">        2) @slow</span><br><span class="line">209) 1) &quot;smembers&quot;</span><br><span class="line">     2) (integer) 2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) sort_for_script</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @set</span><br><span class="line">        3) @slow</span><br><span class="line">210) 1) &quot;cluster&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) random</span><br><span class="line">        3) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line">211) 1) &quot;zremrangebyrank&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @sortedset</span><br><span class="line">        3) @slow</span><br><span class="line">212) 1) &quot;pfcount&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) readonly</span><br><span class="line">        2) may_replicate</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @hyperloglog</span><br><span class="line">        3) @slow</span><br><span class="line">213) 1) &quot;bitpos&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @bitmap</span><br><span class="line">        3) @slow</span><br><span class="line">214) 1) &quot;latency&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">        3) loading</span><br><span class="line">        4) stale</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line">215) 1) &quot;hincrbyfloat&quot;</span><br><span class="line">     2) (integer) 4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @fast</span><br><span class="line">216) 1) &quot;mset&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 2</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @slow</span><br><span class="line">217) 1) &quot;asking&quot;</span><br><span class="line">     2) (integer) 1</span><br><span class="line">     3) 1) fast</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @keyspace</span><br><span class="line">        2) @fast</span><br><span class="line">218) 1) &quot;xtrim&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) random</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @stream</span><br><span class="line">        3) @slow</span><br><span class="line">219) 1) &quot;hset&quot;</span><br><span class="line">     2) (integer) -4</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @hash</span><br><span class="line">        3) @fast</span><br><span class="line">220) 1) &quot;sinterstore&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) -1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @set</span><br><span class="line">        3) @slow</span><br><span class="line">221) 1) &quot;module&quot;</span><br><span class="line">     2) (integer) -2</span><br><span class="line">     3) 1) admin</span><br><span class="line">        2) noscript</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @admin</span><br><span class="line">        2) @slow</span><br><span class="line">        3) @dangerous</span><br><span class="line">222) 1) &quot;eval&quot;</span><br><span class="line">     2) (integer) -3</span><br><span class="line">     3) 1) noscript</span><br><span class="line">        2) skip_monitor</span><br><span class="line">        3) may_replicate</span><br><span class="line">        4) movablekeys</span><br><span class="line">     4) (integer) 0</span><br><span class="line">     5) (integer) 0</span><br><span class="line">     6) (integer) 0</span><br><span class="line">     7) 1) @slow</span><br><span class="line">        2) @scripting</span><br><span class="line">223) 1) &quot;getset&quot;</span><br><span class="line">     2) (integer) 3</span><br><span class="line">     3) 1) write</span><br><span class="line">        2) denyoom</span><br><span class="line">        3) fast</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @write</span><br><span class="line">        2) @string</span><br><span class="line">        3) @fast</span><br><span class="line">224) 1) &quot;georadius_ro&quot;</span><br><span class="line">     2) (integer) -6</span><br><span class="line">     3) 1) readonly</span><br><span class="line">     4) (integer) 1</span><br><span class="line">     5) (integer) 1</span><br><span class="line">     6) (integer) 1</span><br><span class="line">     7) 1) @read</span><br><span class="line">        2) @geo</span><br><span class="line">        3) @slow</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.13.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the total number of Redis commands</p></blockquote><h4 id="1-11-10-COMMAND-COUNT"><a href="#1-11-10-COMMAND-COUNT" class="headerlink" title="1.11.10 COMMAND COUNT"></a>1.11.10 <strong><a id="COMMAND COUNT">COMMAND COUNT</a></strong></h4><p>Redis Command Count 命令用于统计 redis 命令的个数。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; COMMAND COUNT</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 支持的命令类型总数。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; COMMAND COUNT</span><br><span class="line">(integer) 224</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.13.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-11-11-COMMAND-GETKEYS"><a href="#1-11-11-COMMAND-GETKEYS" class="headerlink" title="1.11.11 COMMAND GETKEYS"></a>1.11.11 <strong><a id="COMMAND GETKEYS">COMMAND GETKEYS</a></strong></h4><p>以数据的形式检测一个 Redis 命令 中的 key。</p><p>COMMAND GETKEYS是一个辅助命令，让你可以从 Redis 命令中找到key。</p><p>COMMAND显示了某些命令拥有可变位置的key，这意味着必须分析完整的命令才能找到要存储或者检索的 key。 你可以使用COMMAND GETKEYS直接从 Redis 解析命令的方式来发现 key 的位置。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; COMMAND GETKEYS</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>数组: 命令参数中的 key。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; COMMAND GETKEYS MSET a b c d e f</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">3) &quot;e&quot;</span><br><span class="line">127.0.0.1:6379&gt; COMMAND GETKEYS EVAL &quot;not consulted&quot; 3 key1 key2 key3 arg1 arg2 arg3 argN</span><br><span class="line">1) &quot;key1&quot;</span><br><span class="line">2) &quot;key2&quot;</span><br><span class="line">3) &quot;key3&quot;</span><br><span class="line">127.0.0.1:6379&gt; COMMAND GETKEYS SORT mylist ALPHA STORE outlist</span><br><span class="line">1) &quot;mylist&quot;</span><br><span class="line">2) &quot;outlist&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.13.</strong></p><p><strong>时间复杂度:</strong> O(N) where N is the number of arguments to the command</p></blockquote><h4 id="1-11-12-TIME"><a href="#1-11-12-TIME" class="headerlink" title="1.11.12 TIME"></a>1.11.12 <strong><a id="TIME">TIME</a></strong></h4><p>TIME 命令返回当前服务器的时间，包含两个条目 Unix 时间戳和这一秒已经过去的微秒数。基本上，该接口非常相似 gettimeofday。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; TIME</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>:</p><p>返回内容包含两个元素</p><ul><li>UNIX时间戳（单位：秒）</li><li>微秒</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; TIME</span><br><span class="line">1) &quot;1653066894&quot;</span><br><span class="line">2) &quot;387030&quot;</span><br><span class="line">127.0.0.1:6379&gt; TIME</span><br><span class="line">1) &quot;1653066896&quot;</span><br><span class="line">2) &quot;328152&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.6.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-11-13-COMMAND-INFO"><a href="#1-11-13-COMMAND-INFO" class="headerlink" title="1.11.13 COMMAND INFO"></a>1.11.13 <strong><a id="COMMAND INFO">COMMAND INFO</a></strong></h4><p>以数组的形式返回多个Redis命令的详细信息。</p><p>此命令返回的结果与<code>COMMAND</code>相同，但是你可以指定返回哪些命令。</p><p>如果你指定了一些不存在的命令，那么在它们的返回位置将会是nil。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; COMMAND INFO command-name [command-name ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 命令信息</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; COMMAND INFO get set eval</span><br><span class="line">1) 1) &quot;get&quot;</span><br><span class="line">   2) (integer) 2</span><br><span class="line">   3) 1) readonly</span><br><span class="line">      2) fast</span><br><span class="line">   4) (integer) 1</span><br><span class="line">   5) (integer) 1</span><br><span class="line">   6) (integer) 1</span><br><span class="line">   7) 1) @read</span><br><span class="line">      2) @string</span><br><span class="line">      3) @fast</span><br><span class="line">2) 1) &quot;set&quot;</span><br><span class="line">   2) (integer) -3</span><br><span class="line">   3) 1) write</span><br><span class="line">      2) denyoom</span><br><span class="line">   4) (integer) 1</span><br><span class="line">   5) (integer) 1</span><br><span class="line">   6) (integer) 1</span><br><span class="line">   7) 1) @write</span><br><span class="line">      2) @string</span><br><span class="line">      3) @slow</span><br><span class="line">3) 1) &quot;eval&quot;</span><br><span class="line">   2) (integer) -3</span><br><span class="line">   3) 1) noscript</span><br><span class="line">      2) skip_monitor</span><br><span class="line">      3) may_replicate</span><br><span class="line">      4) movablekeys</span><br><span class="line">   4) (integer) 0</span><br><span class="line">   5) (integer) 0</span><br><span class="line">   6) (integer) 0</span><br><span class="line">   7) 1) @slow</span><br><span class="line">      2) @scripting</span><br><span class="line">127.0.0.1:6379&gt; COMMAND INFO foo evalsha config bar</span><br><span class="line">1) (nil)</span><br><span class="line">2) 1) &quot;evalsha&quot;</span><br><span class="line">   2) (integer) -3</span><br><span class="line">   3) 1) noscript</span><br><span class="line">      2) skip_monitor</span><br><span class="line">      3) may_replicate</span><br><span class="line">      4) movablekeys</span><br><span class="line">   4) (integer) 0</span><br><span class="line">   5) (integer) 0</span><br><span class="line">   6) (integer) 0</span><br><span class="line">   7) 1) @slow</span><br><span class="line">      2) @scripting</span><br><span class="line">3) 1) &quot;config&quot;</span><br><span class="line">   2) (integer) -2</span><br><span class="line">   3) 1) admin</span><br><span class="line">      2) noscript</span><br><span class="line">      3) loading</span><br><span class="line">      4) stale</span><br><span class="line">   4) (integer) 0</span><br><span class="line">   5) (integer) 0</span><br><span class="line">   6) (integer) 0</span><br><span class="line">   7) 1) @admin</span><br><span class="line">      2) @slow</span><br><span class="line">      3) @dangerous</span><br><span class="line">4) (nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.13.</strong></p><p><strong>时间复杂度:</strong> O(N) when N is number of commands to look up</p></blockquote><h4 id="1-11-14-CONFIG-GET"><a href="#1-11-14-CONFIG-GET" class="headerlink" title="1.11.14 CONFIG GET"></a>1.11.14 <strong><a id="CONFIG GET">CONFIG GET</a></strong></h4><p>Redis <code>Config Get</code> 命令用于获取 redis 服务的配置参数。</p><p>在 Redis 2.4 版本中， 有部分参数没有办法用 CONFIG GET 访问，但是在最新的 Redis 2.6 版本中，所有配置参数都已经可以用 CONFIG GET 访问了。</p><blockquote><p><code>CONFIG GET</code>对应的是修改运行时参数的命令 <code>CONFIG SET</code>.</p><p><code>CONFIG GET</code>命令只接受一个 glob 风格的正则参数，所有配置参数都采用key-value的形式。 例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; config get *max-*-entries*</span><br><span class="line">1) &quot;hash-max-zipmap-entries&quot;</span><br><span class="line">2) &quot;512&quot;</span><br><span class="line">3) &quot;list-max-ziplist-entries&quot;</span><br><span class="line">4) &quot;512&quot;</span><br><span class="line">5) &quot;set-max-intset-entries&quot;</span><br><span class="line">6) &quot;512&quot;</span><br></pre></td></tr></table></figure><p>通过 <code>redis-cli</code> 提示符下输入 CONFIG GET * 可以查看 Redis 所有支持的参数。</p><p>所有支持的参数都与 <a href="http://github.com/redis/redis/raw/2.8/redis.conf">redis.conf</a> 里面的一样，除了如下的重要差异：</p><ul><li><code>10kb</code> 、 <code>2gb</code> 这些在配置文件中所使用的储存单位缩写，不可以用在 <code>CONFIG</code> 命令中， <code>CONFIG SET</code> 的值只能通过数字值显式地设定。像 <code>CONFIG SET xxx 1k</code> 这样的命令是错误的，正确的格式是 <code>CONFIG SET xxx 1000</code> 。</li><li><code>save</code> 选项在 redis.conf 中是用多行文字储存的，但在 <code>CONFIG GET</code>命令中，它只打印一行文字。</li></ul><p>例如，redis.conf 里面的有如下配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br></pre></td></tr></table></figure><p>它的意思是：如果900秒内有一个数据发生变化，或者300秒内有10个数据发生变化则执行 <code>SAVE</code> ，那么使用 <code>CONFIG GET</code>查看时将会看到 “900 1 300 10”。</p></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET parameter</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>数组</strong>: 给定配置参数的值。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get *max-*-entries* </span><br><span class="line">1) &quot;hash-max-ziplist-entries&quot;</span><br><span class="line">2) &quot;512&quot;</span><br><span class="line">3) &quot;set-max-intset-entries&quot;</span><br><span class="line">4) &quot;512&quot;</span><br><span class="line">5) &quot;zset-max-ziplist-entries&quot;</span><br><span class="line">6) &quot;128&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p></blockquote><h4 id="1-11-15-CONFIG-REWRITE"><a href="#1-11-15-CONFIG-REWRITE" class="headerlink" title="1.11.15 CONFIG REWRITE"></a>1.11.15 <strong><a id="CONFIG REWRITE">CONFIG REWRITE</a></strong></h4><p>Redis CONFIG REWRITE 命令对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写。<br>CONFIG SET 命令可以对服务器的当前配置进行修改， 而修改后的配置可能和 redis.conf 文件中所描述的配置不一样， CONFIG REWRITE 的作用就是通过尽可能少的修改， 将服务器当前所使用的配置记录到 <code>redis.conf</code> 文件中。</p><blockquote><ol><li><p><strong>重写以非常保守的方式执行</strong>：</p><ul><li>注释和原始 redis.conf 文件的整体结构会尽可能的保留下来。</li><li>如果一个选项在旧的 redis.conf 文件中已经存在，那么它会在相同的位置（行号）被重写。</li><li>如果某个选项在配置文件中尚不存在，但被设置为了该选项的默认值，那么他将不会被重写进程写入配置文件。</li><li>如果某个选项在配置文件中尚不存在，但被设置了一个非默认值，那么它会被追加到文件的末尾。</li><li>未使用的行将会留空。例如，如果你之前在配置文件中有多个 <code>save</code> 配置项，但由于你禁用了 RDB 持久化，当前的 <code>save</code> 配置变少了或者变为空，那么所有的那些行将会是空行。</li></ul><p>如果原始文件由于某些原因不再存在，CONFIG REWRITE 也能够从头开始重写配置文件。但是，如果服务器启动的时候没有指定任何配置文件，则 CONFIG REWRITE 将只会返回一个错误。</p></li><li><p><strong>原子重写过程</strong></p><p>为了保证redis.conf文件始终是一致的，也即，在异常或者崩溃的时候，你的配置文件要么是旧的文件，或者是重写完的新文件。重写是通过一次具有足够内容的<code>write(2)</code>调用来执行的，至少和旧的文件一样大。有时会以注释的形式添加额外的padding，以确保生成的文件足够大，稍后文件会被截断以删除末尾的padding。</p></li></ol></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG REWRITE parameter</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 当配置被正确重写时返回<code>OK</code>，否则返回错误。</p></li><li><p><strong>实例：</strong></p><p>以下是执行 CONFIG REWRITE 前， 被载入到 Redis 服务器的 redis.conf 文件中关于 appendonly 选项的设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">... 其他选项</span></span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">... 其他选项</span></span><br></pre></td></tr></table></figure><p>在执行以下命令之后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET appendonly       # appendonly 处于关闭状态</span><br><span class="line">1) &quot;appendonly&quot;</span><br><span class="line">2) &quot;no&quot;</span><br><span class="line">127.0.0.1:6379&gt; CONFIG SET appendonly yes   # 打开 appendonly</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; CONFIG GET appendonly</span><br><span class="line">1) &quot;appendonly&quot;</span><br><span class="line">2) &quot;yes&quot;</span><br><span class="line">127.0.0.1:6379&gt; CONFIG REWRITE        # 将 appendonly 的修改写入到 redis.conf 中</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>重写后的 redis.conf 文件中的 appendonly 选项将被改写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">... 其他选项</span></span><br><span class="line"></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">... 其他选项</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.0.</strong></p></blockquote><h4 id="1-11-16-CONFIG-SET"><a href="#1-11-16-CONFIG-SET" class="headerlink" title="1.11.16 CONFIG SET"></a>1.11.16 <strong><a id="CONFIG SET">CONFIG SET</a></strong></h4><p><a href="https://redis.com.cn/commands/config-set.html">CONFIG SET</a> 命令用于在服务器运行期间重写某些配置，而不用重启 Redis。可以使用此命令更改不重要的参数或从一个参数切换到另一个持久性选项。</p><p>可以通过 <code>CONFIG GET *</code> 获得<code>CONFIG SET</code>命令支持的配置参数列表，该命令是用于获取有关正在运行的 Redis 实例的配置信息的对称命令。</p><blockquote><p>所有使用<code>CONFIG SET</code>设置的配置参数将会立即被 Redis 加载，并从下一个执行的命令开始生效。</p><p>所有支持的参数与 [redis.conf][hgcarr22rc] 文件中使用的等效配置参数具有相同含义，但有以下重要区别：</p><ul><li>在指定字节或其他数量的选项中，不能使用在<code>redis.conf</code>中使用的简写形式（如<code>10k</code>，<code>2gb</code>等），所有内容都应该指定为格式良好的64位整数，以配置指令的基本单位表示。但从Redis3.0以及更高版本开始，可以将<code>CONFIG SET</code>与内存单元一起用于<code>maxmemory</code>、客户端输出缓冲以及复制积压大小（repl-backlog-size）指定内存单位。</li><li>save参数是一个以空格分隔的整数字符串。每对整数代表一个秒/修改阈值。</li></ul><p>例如在 <code>redis.conf</code> 中看起来像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br></pre></td></tr></table></figure><p>这意味着，如果数据集有 1 个以上变更，则在 900 秒后保存；如果有 10 个以上变更，则在 300 秒后就保存，应使用<code>CONFIG SET SAVE</code> “900 1 300 10” 来设置。</p><p>可以使用<code>CONFIG SET</code>命令将持久化从 RDB 快照切换到 AOF 文件（或其他相似的方式）。 有关如何执行此操作的详细信息，请查看<a href="https://redis.com.cn/topics/persistence">persistencepage</a>。</p><p>一般来说，你应该知道将 <code>appendonly</code> 参数设置为 <code>yes</code> 将启动后台进程以保存初始 AOF 文件（从内存数据集中获取），并将所有后续命令追加到 AOF 文件，从而达到了与一个 Redis 服务器从一开始就开启了 AOF 选项相同的效果。</p><p>如果你愿意，可以同时开启 AOF 和 RDB 快照，这两个选项不是互斥的。</p></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG Set parameter value</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 当配置被正确设置时返回<code>OK</code>，否则将返回错误。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET slowlog-max-len</span><br><span class="line">1) &quot;slowlog-max-len&quot;</span><br><span class="line">2) &quot;128&quot;</span><br><span class="line">127.0.0.1:6379&gt; CONFIG SET slowlog-max-len 10086</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; CONFIG GET slowlog-max-len</span><br><span class="line">1) &quot;slowlog-max-len&quot;</span><br><span class="line">2) &quot;10086&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p></blockquote><h4 id="1-11-17-CONFIG-RESETSTAT"><a href="#1-11-17-CONFIG-RESETSTAT" class="headerlink" title="1.11.17 CONFIG RESETSTAT"></a>1.11.17 <strong><a id="CONFIG RESETSTAT">CONFIG RESETSTAT</a></strong></h4><p>Redis <a href="https://redis.com.cn/commands/config-resetstat.html">CONFIG RESETSTAT</a> 命令用于重置 <a href="https://redis.com.cn/commands/info.html">INFO</a> 命令中的某些统计数据，包括：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- Keyspace hits (键空间命中次数)</span><br><span class="line">- Keyspace misses (键空间不命中次数)</span><br><span class="line">- Number of commands processed (执行命令的次数)</span><br><span class="line">- Number of connections received (连接服务器的次数)</span><br><span class="line">- Number of expired keys (过期key的数量)</span><br><span class="line">- Number of rejected connections (被拒绝的连接数量)</span><br><span class="line">- Latest fork(2) time(最后执行 fork(2) 的时间)</span><br><span class="line">- The aof_delayed_fsync counter(aof_delayed_fsync 计数器的值)</span><br></pre></td></tr></table></figure><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG RESETSTAT</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>字符串: <code>OK</code>.</p></li><li><p><strong>实例：</strong></p><p>重置前 INFO 命令输出信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INFO</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Server</span></span><br><span class="line">redis_version:6.2.6</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:eac5b3c736e2a107</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 3.10.0-1160.el7.x86_64 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:4.8.5</span><br><span class="line">process_id:17277</span><br><span class="line">process_supervised:no</span><br><span class="line">run_id:4884ead059e4a0ad9cb88e2231856af69ff9ac7e</span><br><span class="line">tcp_port:6379</span><br><span class="line">server_time_usec:1653069721652249</span><br><span class="line">uptime_in_seconds:128889</span><br><span class="line">uptime_in_days:1</span><br><span class="line">hz:10</span><br><span class="line">configured_hz:10</span><br><span class="line">lru_clock:8902553</span><br><span class="line">executable:/opt/software/redis-6.2.6/./src/redis-server</span><br><span class="line">config_file:/opt/software/redis-6.2.6/./redis.conf</span><br><span class="line">io_threads_active:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Clients</span></span><br><span class="line">connected_clients:1</span><br><span class="line">cluster_connections:0</span><br><span class="line">maxclients:10000</span><br><span class="line">client_recent_max_input_buffer:0</span><br><span class="line">client_recent_max_output_buffer:0</span><br><span class="line">blocked_clients:0</span><br><span class="line">tracking_clients:0</span><br><span class="line">clients_in_timeout_table:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Memory</span></span><br><span class="line">used_memory:879352</span><br><span class="line">used_memory_human:858.74K</span><br><span class="line">used_memory_rss:3055616</span><br><span class="line">used_memory_rss_human:2.91M</span><br><span class="line">used_memory_peak:977792</span><br><span class="line">used_memory_peak_human:954.88K</span><br><span class="line">used_memory_peak_perc:89.93%</span><br><span class="line">used_memory_overhead:811872</span><br><span class="line">used_memory_startup:810112</span><br><span class="line">used_memory_dataset:67480</span><br><span class="line">used_memory_dataset_perc:97.46%</span><br><span class="line">allocator_allocated:988920</span><br><span class="line">allocator_active:1265664</span><br><span class="line">allocator_resident:3502080</span><br><span class="line">total_system_memory:1019572224</span><br><span class="line">total_system_memory_human:972.34M</span><br><span class="line">used_memory_lua:43008</span><br><span class="line">used_memory_lua_human:42.00K</span><br><span class="line">used_memory_scripts:248</span><br><span class="line">used_memory_scripts_human:248B</span><br><span class="line">number_of_cached_scripts:2</span><br><span class="line">maxmemory:0</span><br><span class="line">maxmemory_human:0B</span><br><span class="line">maxmemory_policy:noeviction</span><br><span class="line">allocator_frag_ratio:1.28</span><br><span class="line">allocator_frag_bytes:276744</span><br><span class="line">allocator_rss_ratio:2.77</span><br><span class="line">allocator_rss_bytes:2236416</span><br><span class="line">rss_overhead_ratio:0.87</span><br><span class="line">rss_overhead_bytes:-446464</span><br><span class="line">mem_fragmentation_ratio:3.75</span><br><span class="line">mem_fragmentation_bytes:2239976</span><br><span class="line">mem_not_counted_for_evict:0</span><br><span class="line">mem_replication_backlog:0</span><br><span class="line">mem_clients_slaves:0</span><br><span class="line">mem_clients_normal:0</span><br><span class="line">mem_aof_buffer:0</span><br><span class="line">mem_allocator:jemalloc-5.1.0</span><br><span class="line">active_defrag_running:0</span><br><span class="line">lazyfree_pending_objects:0</span><br><span class="line">lazyfreed_objects:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Persistence</span></span><br><span class="line">loading:0</span><br><span class="line">current_cow_size:0</span><br><span class="line">current_cow_size_age:0</span><br><span class="line">current_fork_perc:0.00</span><br><span class="line">current_save_keys_processed:0</span><br><span class="line">current_save_keys_total:0</span><br><span class="line">rdb_changes_since_last_save:0</span><br><span class="line">rdb_bgsave_in_progress:0</span><br><span class="line">rdb_last_save_time:1653062505</span><br><span class="line">rdb_last_bgsave_status:ok</span><br><span class="line">rdb_last_bgsave_time_sec:0</span><br><span class="line">rdb_current_bgsave_time_sec:-1</span><br><span class="line">rdb_last_cow_size:475136</span><br><span class="line">aof_enabled:0</span><br><span class="line">aof_rewrite_in_progress:0</span><br><span class="line">aof_rewrite_scheduled:0</span><br><span class="line">aof_last_rewrite_time_sec:1</span><br><span class="line">aof_current_rewrite_time_sec:-1</span><br><span class="line">aof_last_bgrewrite_status:ok</span><br><span class="line">aof_last_write_status:ok</span><br><span class="line">aof_last_cow_size:561152</span><br><span class="line">module_fork_in_progress:0</span><br><span class="line">module_fork_last_cow_size:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Stats</span></span><br><span class="line">total_connections_received:95</span><br><span class="line">total_commands_processed:933</span><br><span class="line">instantaneous_ops_per_sec:0</span><br><span class="line">total_net_input_bytes:36763</span><br><span class="line">total_net_output_bytes:432050</span><br><span class="line">instantaneous_input_kbps:0.00</span><br><span class="line">instantaneous_output_kbps:0.00</span><br><span class="line">rejected_connections:0</span><br><span class="line">sync_full:0</span><br><span class="line">sync_partial_ok:0</span><br><span class="line">sync_partial_err:0</span><br><span class="line">expired_keys:0</span><br><span class="line">expired_stale_perc:0.00</span><br><span class="line">expired_time_cap_reached_count:0</span><br><span class="line">expire_cycle_cpu_milliseconds:6902</span><br><span class="line">evicted_keys:0</span><br><span class="line">keyspace_hits:194</span><br><span class="line">keyspace_misses:13</span><br><span class="line">pubsub_channels:0</span><br><span class="line">pubsub_patterns:0</span><br><span class="line">latest_fork_usec:668</span><br><span class="line">total_forks:76</span><br><span class="line">migrate_cached_sockets:0</span><br><span class="line">slave_expires_tracked_keys:0</span><br><span class="line">active_defrag_hits:0</span><br><span class="line">active_defrag_misses:0</span><br><span class="line">active_defrag_key_hits:0</span><br><span class="line">active_defrag_key_misses:0</span><br><span class="line">tracking_total_keys:0</span><br><span class="line">tracking_total_items:0</span><br><span class="line">tracking_total_prefixes:0</span><br><span class="line">unexpected_error_replies:0</span><br><span class="line">total_error_replies:84</span><br><span class="line">dump_payload_sanitizations:0</span><br><span class="line">total_reads_processed:944</span><br><span class="line">total_writes_processed:931</span><br><span class="line">io_threaded_reads_processed:0</span><br><span class="line">io_threaded_writes_processed:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:5747e010248e99df63f6fc7132cd4f5e778e4c23</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CPU</span></span><br><span class="line">used_cpu_sys:250.581855</span><br><span class="line">used_cpu_user:278.320178</span><br><span class="line">used_cpu_sys_children:0.452773</span><br><span class="line">used_cpu_user_children:0.073380</span><br><span class="line">used_cpu_sys_main_thread:250.516158</span><br><span class="line">used_cpu_user_main_thread:278.278268</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Modules</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Errorstats</span></span><br><span class="line">errorstat_ERR:count=51</span><br><span class="line">errorstat_NOAUTH:count=13</span><br><span class="line">errorstat_NOTBUSY:count=3</span><br><span class="line">errorstat_WRONGPASS:count=4</span><br><span class="line">errorstat_WRONGTYPE:count=13</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cluster</span></span><br><span class="line">cluster_enabled:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Keyspace</span></span><br><span class="line">db0:keys=21,expires=0,avg_ttl=0</span><br><span class="line">db1:keys=5,expires=0,avg_ttl=0</span><br><span class="line">db2:keys=3,expires=0,avg_ttl=0</span><br></pre></td></tr></table></figure><p>重置后查看 INFO 命令输出信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置操作</span></span><br><span class="line">127.0.0.1:6379&gt; CONFIG RESETSTAT</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置后查看 INFO 命令输出信息：</span></span><br><span class="line">127.0.0.1:6379&gt; INFO</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Server</span></span><br><span class="line">redis_version:6.2.6</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:eac5b3c736e2a107</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 3.10.0-1160.el7.x86_64 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:4.8.5</span><br><span class="line">process_id:17277</span><br><span class="line">process_supervised:no</span><br><span class="line">run_id:4884ead059e4a0ad9cb88e2231856af69ff9ac7e</span><br><span class="line">tcp_port:6379</span><br><span class="line">server_time_usec:1653069741529106</span><br><span class="line">uptime_in_seconds:128909</span><br><span class="line">uptime_in_days:1</span><br><span class="line">hz:10</span><br><span class="line">configured_hz:10</span><br><span class="line">lru_clock:8902573</span><br><span class="line">executable:/opt/software/redis-6.2.6/./src/redis-server</span><br><span class="line">config_file:/opt/software/redis-6.2.6/./redis.conf</span><br><span class="line">io_threads_active:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Clients</span></span><br><span class="line">connected_clients:1</span><br><span class="line">cluster_connections:0</span><br><span class="line">maxclients:10000</span><br><span class="line">client_recent_max_input_buffer:24</span><br><span class="line">client_recent_max_output_buffer:0</span><br><span class="line">blocked_clients:0</span><br><span class="line">tracking_clients:0</span><br><span class="line">clients_in_timeout_table:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Memory</span></span><br><span class="line">used_memory:879048</span><br><span class="line">used_memory_human:858.45K</span><br><span class="line">used_memory_rss:3051520</span><br><span class="line">used_memory_rss_human:2.91M</span><br><span class="line">used_memory_peak:977792</span><br><span class="line">used_memory_peak_human:954.88K</span><br><span class="line">used_memory_peak_perc:89.90%</span><br><span class="line">used_memory_overhead:832376</span><br><span class="line">used_memory_startup:810112</span><br><span class="line">used_memory_dataset:46672</span><br><span class="line">used_memory_dataset_perc:67.70%</span><br><span class="line">allocator_allocated:1026488</span><br><span class="line">allocator_active:1343488</span><br><span class="line">allocator_resident:3624960</span><br><span class="line">total_system_memory:1019572224</span><br><span class="line">total_system_memory_human:972.34M</span><br><span class="line">used_memory_lua:43008</span><br><span class="line">used_memory_lua_human:42.00K</span><br><span class="line">used_memory_scripts:248</span><br><span class="line">used_memory_scripts_human:248B</span><br><span class="line">number_of_cached_scripts:2</span><br><span class="line">maxmemory:0</span><br><span class="line">maxmemory_human:0B</span><br><span class="line">maxmemory_policy:noeviction</span><br><span class="line">allocator_frag_ratio:1.31</span><br><span class="line">allocator_frag_bytes:317000</span><br><span class="line">allocator_rss_ratio:2.70</span><br><span class="line">allocator_rss_bytes:2281472</span><br><span class="line">rss_overhead_ratio:0.84</span><br><span class="line">rss_overhead_bytes:-573440</span><br><span class="line">mem_fragmentation_ratio:3.65</span><br><span class="line">mem_fragmentation_bytes:2215232</span><br><span class="line">mem_not_counted_for_evict:0</span><br><span class="line">mem_replication_backlog:0</span><br><span class="line">mem_clients_slaves:0</span><br><span class="line">mem_clients_normal:20504</span><br><span class="line">mem_aof_buffer:0</span><br><span class="line">mem_allocator:jemalloc-5.1.0</span><br><span class="line">active_defrag_running:0</span><br><span class="line">lazyfree_pending_objects:0</span><br><span class="line">lazyfreed_objects:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Persistence</span></span><br><span class="line">loading:0</span><br><span class="line">current_cow_size:0</span><br><span class="line">current_cow_size_age:0</span><br><span class="line">current_fork_perc:0.00</span><br><span class="line">current_save_keys_processed:0</span><br><span class="line">current_save_keys_total:0</span><br><span class="line">rdb_changes_since_last_save:0</span><br><span class="line">rdb_bgsave_in_progress:0</span><br><span class="line">rdb_last_save_time:1653062505</span><br><span class="line">rdb_last_bgsave_status:ok</span><br><span class="line">rdb_last_bgsave_time_sec:0</span><br><span class="line">rdb_current_bgsave_time_sec:-1</span><br><span class="line">rdb_last_cow_size:475136</span><br><span class="line">aof_enabled:0</span><br><span class="line">aof_rewrite_in_progress:0</span><br><span class="line">aof_rewrite_scheduled:0</span><br><span class="line">aof_last_rewrite_time_sec:1</span><br><span class="line">aof_current_rewrite_time_sec:-1</span><br><span class="line">aof_last_bgrewrite_status:ok</span><br><span class="line">aof_last_write_status:ok</span><br><span class="line">aof_last_cow_size:561152</span><br><span class="line">module_fork_in_progress:0</span><br><span class="line">module_fork_last_cow_size:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Stats</span></span><br><span class="line">total_connections_received:0</span><br><span class="line">total_commands_processed:1</span><br><span class="line">instantaneous_ops_per_sec:0</span><br><span class="line">total_net_input_bytes:14</span><br><span class="line">total_net_output_bytes:5</span><br><span class="line">instantaneous_input_kbps:0.00</span><br><span class="line">instantaneous_output_kbps:0.00</span><br><span class="line">rejected_connections:0</span><br><span class="line">sync_full:0</span><br><span class="line">sync_partial_ok:0</span><br><span class="line">sync_partial_err:0</span><br><span class="line">expired_keys:0</span><br><span class="line">expired_stale_perc:0.00</span><br><span class="line">expired_time_cap_reached_count:0</span><br><span class="line">expire_cycle_cpu_milliseconds:0</span><br><span class="line">evicted_keys:0</span><br><span class="line">keyspace_hits:0</span><br><span class="line">keyspace_misses:0</span><br><span class="line">pubsub_channels:0</span><br><span class="line">pubsub_patterns:0</span><br><span class="line">latest_fork_usec:0</span><br><span class="line">total_forks:0</span><br><span class="line">migrate_cached_sockets:0</span><br><span class="line">slave_expires_tracked_keys:0</span><br><span class="line">active_defrag_hits:0</span><br><span class="line">active_defrag_misses:0</span><br><span class="line">active_defrag_key_hits:0</span><br><span class="line">active_defrag_key_misses:0</span><br><span class="line">tracking_total_keys:0</span><br><span class="line">tracking_total_items:0</span><br><span class="line">tracking_total_prefixes:0</span><br><span class="line">unexpected_error_replies:0</span><br><span class="line">total_error_replies:0</span><br><span class="line">dump_payload_sanitizations:0</span><br><span class="line">total_reads_processed:1</span><br><span class="line">total_writes_processed:1</span><br><span class="line">io_threaded_reads_processed:0</span><br><span class="line">io_threaded_writes_processed:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:5747e010248e99df63f6fc7132cd4f5e778e4c23</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CPU</span></span><br><span class="line">used_cpu_sys:250.620934</span><br><span class="line">used_cpu_user:278.359987</span><br><span class="line">used_cpu_sys_children:0.452773</span><br><span class="line">used_cpu_user_children:0.073380</span><br><span class="line">used_cpu_sys_main_thread:250.556253</span><br><span class="line">used_cpu_user_main_thread:278.316859</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Modules</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Errorstats</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cluster</span></span><br><span class="line">cluster_enabled:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Keyspace</span></span><br><span class="line">db0:keys=21,expires=0,avg_ttl=0</span><br><span class="line">db1:keys=5,expires=0,avg_ttl=0</span><br><span class="line">db2:keys=3,expires=0,avg_ttl=0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.0.0.</strong></p><p><strong>时间复杂度:</strong> O(1)</p></blockquote><h4 id="1-11-18-DBSIZE"><a href="#1-11-18-DBSIZE" class="headerlink" title="1.11.18 DBSIZE"></a>1.11.18 <strong><a id="DBSIZE">DBSIZE</a></strong></h4><p>Redis DBSIZE 返回当前数据库中 key 的数量。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DBSIZE</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>：当前数据库中 key 的数量。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DBSIZE</span><br><span class="line">(integer) 21</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加一个key，再看看效果</span></span><br><span class="line">127.0.0.1:6379&gt; SET new_key &quot;hello kungs&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DBSIZE</span><br><span class="line">(integer) 22</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-11-19-DEBUG-OBJECT"><a href="#1-11-19-DEBUG-OBJECT" class="headerlink" title="1.11.19 DEBUG OBJECT"></a>1.11.19 <strong><a id="DEBUG OBJECT">DEBUG OBJECT</a></strong></h4><p>Redis DEBUG OBJECT 是一个调试命令，它不应该被客户端所使用。<br>查看 OBJECT 命令获取更多信息。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DEBUG OBJECT key</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 当 <code>key</code> 存在时，返回有关信息。 当 <code>key</code> 不存在时，返回 (error) ERR no such key。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET new_key &quot;hello kungs&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DEBUG OBJECT new_key</span><br><span class="line">Value at:0x7fceb660e9e0 refcount:1 encoding:embstr serializedlength:12 lru:8902992 lru_seconds_idle:4</span><br><span class="line">127.0.0.1:6379&gt; DEBUG OBJECT new_key1</span><br><span class="line">(error) ERR no such key</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-11-20-DEBUG-SEGFAULT"><a href="#1-11-20-DEBUG-SEGFAULT" class="headerlink" title="1.11.20 DEBUG SEGFAULT"></a>1.11.20 <strong><a id="DEBUG SEGFAULT">DEBUG SEGFAULT</a></strong></h4><p>DEBUG SEGFAULT 执行一个不合法的内存访问从而让 Redis 崩溃，仅在开发时用于模拟 BUG 。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DEBUG SEGFAULT</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong></p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DEBUG SEGFAULT</span><br><span class="line">Error: Server closed the connection</span><br><span class="line">(0.69s)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-11-21-FLUSHALL"><a href="#1-11-21-FLUSHALL" class="headerlink" title="1.11.21 FLUSHALL"></a>1.11.21 <strong><a id="FLUSHALL">FLUSHALL</a></strong></h4><p>清空整个 Redis 中的数据(清空所有数据库的所有 key，不仅仅是当前 select 的数据库 )。</p><p>此命令不会失败。</p><blockquote><p><strong><code>FLUSHALL ASYNC</code> (Redis 4.0.0 or greater)</strong>：</p><p>支持在后台单独的线程执行删除 key 的操作而不阻塞 Redis。</p><p><a href="https://redis.com.cn/commands/flushall.html">FLUSHALL</a> 和<code>FLUSHDB</code> 增加了<code>ASYNC</code> 来使整个数据集或单个数据库异步释放。</p><p>异步<code>FLUSHALL</code> 和<code>FLUSHDB</code> 命令仅仅删除它们被调用时已经存在的 key。命令调用之后，删除 key 的过程中新建的 key 不受影响。</p></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FLUSHALL</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: <code>OK</code></p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0 号数据库的 key 数量</span></span><br><span class="line">127.0.0.1:6379&gt; DBSIZE</span><br><span class="line">(integer) 22</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 1 号数据库</span></span><br><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1 号数据库的 key 数量</span></span><br><span class="line">127.0.0.1:6379[1]&gt; DBSIZE</span><br><span class="line">(integer) 5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清空所有数据库的所有 key</span></span><br><span class="line">127.0.0.1:6379[1]&gt; FLUSHALL</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不但 1 号数据库被清空了</span></span><br><span class="line">127.0.0.1:6379[1]&gt; DBSIZE</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0 号数据库(以及其他所有数据库)也一样</span></span><br><span class="line">127.0.0.1:6379[1]&gt; SELECT 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DBSIZE</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p>时间复杂度是 O(N), N 代表所有数据库中 key 的总数。</p></blockquote><h4 id="1-11-22-FLUSHDB"><a href="#1-11-22-FLUSHDB" class="headerlink" title="1.11.22 FLUSHDB"></a>1.11.22 <strong><a id="FLUSHDB">FLUSHDB</a></strong></h4><p>清空当前 <code>select</code> 数据库中的所有 key。此命令不会失败。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: <code>OK</code></p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清空前的 key 数量</span></span><br><span class="line">127.0.0.1:6379&gt; DBSIZE</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清空后的 key 数量</span></span><br><span class="line">redis 127.0.0.1:6379&gt; DBSIZE</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p><p>时间复杂度是 O(N), N 代表当前数据库中 key 的总数。</p></blockquote><h4 id="1-11-23-INFO"><a href="#1-11-23-INFO" class="headerlink" title="1.11.23 INFO"></a>1.11.23 <strong><a id="INFO">INFO</a></strong></h4><p><code>INFO</code>命令以一种易于理解和阅读的格式，返回关于Redis服务器的各种信息和统计数值。</p><blockquote><p>通过给定可选的参数 section ，可以让命令只返回某一部分的信息:</p><ul><li><code>server</code>: 查看 Redis 服务器信息，如 Redis 的版本</li><li><code>clients</code>: 客户端的连接部分</li><li><code>memory</code>: 内存消耗相关信息</li><li><code>persistence</code>: RDB和AOF相关信息</li><li><code>stats</code>: 一般统计</li><li><code>replication</code>: 主/从复制信息</li><li><code>cpu</code>: 统计CPU的消耗</li><li><code>commandstats</code>: Redis命令统计</li><li><code>cluster</code>: Redis集群信息</li><li><code>keyspace</code>: 数据库的相关统计</li><li><code>modules</code>: Module 相关信息</li></ul><p>它也可以采取以下值:</p><ul><li><code>all</code>: 返回所有信息</li><li><code>default</code>: 值返回默认设置的信息</li><li><code>everything</code>: 包括 <code>all</code> 和 <code>modules</code></li></ul><p>如果没有使用任何参数时，默认为<code>default</code>。</p><p><strong>注意</strong>:</p><p>请注意不同Redis版本会添加或者删除一些字段。一个健壮的客户端应用解析该命令的结果时，应该跳过未知的字段，并且优雅的处理缺少的字段。</p><p>以下是Redis &gt;= 2.4的字段说明。</p><p>下面是所有 <strong>server</strong> 相关的信息:</p><ul><li><code>redis_version</code>: Redis 服务器版本</li><li><code>redis_git_sha1</code>: Git SHA1</li><li><code>redis_git_dirty</code>: Git dirty flag</li><li><code>redis_build_id</code>: 构建ID</li><li><code>redis_mode</code>: 服务器模式（standalone，sentinel或者cluster）</li><li><code>os</code>: Redis 服务器的宿主操作系统</li><li><code>arch_bits</code>: 架构（32 或 64 位）</li><li><code>multiplexing_api</code>: Redis 所使用的事件处理机制</li><li><code>atomicvar_api</code>: Redis使用的Atomicvar API</li><li><code>gcc_version</code>: 编译 Redis 时所使用的 GCC 版本</li><li><code>process_id</code>: 服务器进程的 PID</li><li><code>run_id</code>: Redis 服务器的随机标识符（用于 Sentinel 和集群）</li><li><code>tcp_port</code>: TCP/IP 监听端口</li><li><code>uptime_in_seconds</code>: 自 Redis 服务器启动以来，经过的秒数</li><li><code>uptime_in_days</code>: 自 Redis 服务器启动以来，经过的天数</li><li><code>hz</code>: 服务器的频率设置</li><li><code>lru_clock</code>: 以分钟为单位进行自增的时钟，用于 LRU 管理</li><li><code>executable</code>: 服务器的可执行文件路径</li><li><code>config_file</code>: 配置文件路径</li></ul><p>下面是所有 <strong>clients</strong> 相关的信息:</p><ul><li><code>connected_clients</code>: 已连接客户端的数量（不包括通过从属服务器连接的客户端）</li><li><code>client_longest_output_list</code>: 当前连接的客户端当中，最长的输出列表</li><li><code>client_biggest_input_buf</code>: 当前连接的客户端当中，最大输入缓存</li><li><code>blocked_clients</code>: 正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量</li></ul><p>下面是所有 <strong>memory</strong> 相关的信息:</p><ul><li><code>used_memory</code>: 由 Redis 分配器分配的内存总量，以字节（byte）为单位</li><li><code>used_memory_human</code>: 以人类可读的格式返回 Redis 分配的内存总量</li><li><code>used_memory_rss</code>: 从操作系统的角度，返回 Redis 已分配的内存总量（俗称常驻集大小）。这个值和 top 、 ps 等命令的输出一致。</li><li><code>used_memory_peak</code>: Redis 的内存消耗峰值（以字节为单位）</li><li><code>used_memory_peak_human</code>: 以人类可读的格式返回 Redis 的内存消耗峰值</li><li><code>used_memory_peak_perc</code>: 使用内存占峰值内存的百分比</li><li><code>used_memory_overhead</code>: 服务器为管理其内部数据结构而分配的所有开销的总和（以字节为单位）</li><li><code>used_memory_startup</code>: Redis在启动时消耗的初始内存大小（以字节为单位）</li><li><code>used_memory_dataset</code>: 以字节为单位的数据集大小（used<em>memory减去used</em>memory_overhead）</li><li><code>used_memory_dataset_perc</code>: used<em>memory</em>dataset占净内存使用量的百分比（used<em>memory减去used</em>memory_startup）</li><li><code>total_system_memory</code>: Redis主机具有的内存总量</li><li><code>total_system_memory_human</code>: 以人类可读的格式返回 Redis主机具有的内存总量</li><li><code>used_memory_lua</code>: Lua 引擎所使用的内存大小（以字节为单位）</li><li><code>used_memory_lua_human</code>: 以人类可读的格式返回 Lua 引擎所使用的内存大小</li><li><code>maxmemory</code>: maxmemory配置指令的值</li><li><code>maxmemory_human</code>: 以人类可读的格式返回 maxmemory配置指令的值</li><li><code>maxmemory_policy</code>: maxmemory-policy配置指令的值</li><li><code>mem_fragmentation_ratio</code>: <code>used_memory_rss</code> 和 <code>used_memory</code>之间的比率</li><li><code>mem_allocator</code>: 在编译时指定的， Redis 所使用的内存分配器。可以是 libc 、 jemalloc 或者 tcmalloc 。</li><li><code>active_defrag_running</code>: 指示活动碎片整理是否处于活动状态的标志</li><li><code>lazyfree_pending_objects</code>: 等待释放的对象数（由于使用ASYNC选项调用UNLINK或FLUSHDB和FLUSHALL）</li></ul><p>在理想情况下， used<em>memory</em>rss 的值应该只比 used_memory 稍微高一点儿。</p><p>当 rss &gt; used ，且两者的值相差较大时，表示存在（内部或外部的）内存碎片。</p><p>内存碎片的比率可以通过 mem<em>fragmentation</em>ratio 的值看出。</p><p>当 used &gt; rss 时，表示 Redis 的部分内存被操作系统换出到交换空间了，在这种情况下，操作可能会产生明显的延迟。</p><p>由于Redis无法控制其分配的内存如何映射到内存页，因此常住内存（used<em>memory</em>rss）很高通常是内存使用量激增的结果。</p><p>当 Redis 释放内存时，内存将返回给分配器，分配器可能会，也可能不会，将内存返还给操作系统。</p><p>如果 Redis 释放了内存，却没有将内存返还给操作系统，那么 used_memory 的值可能和操作系统显示的 Redis 内存占用并不一致。</p><p>查看 used<em>memory</em>peak 的值可以验证这种情况是否发生。</p><p>要获得有关服务器内存的其他内省信息，可以参考<code>MEMORY STATS</code>和<code>MEMORY DOCTOR</code>。</p><p>下面是所有 <strong>persistence</strong> 相关的信息:</p><ul><li><code>loading</code>: 指示转储文件（dump）的加载是否正在进行的标志</li><li><code>rdb_changes_since_last_save</code>: 自上次转储以来的更改次数</li><li><code>rdb_bgsave_in_progress</code>: 指示RDB文件是否正在保存的标志</li><li><code>rdb_last_save_time</code>: 上次成功保存RDB的基于纪年的时间戳</li><li><code>rdb_last_bgsave_status</code>: 上次RDB保存操作的状态</li><li><code>rdb_last_bgsave_time_sec</code>: 上次RDB保存操作的持续时间（以秒为单位）</li><li><code>rdb_current_bgsave_time_sec</code>: 正在进行的RDB保存操作的持续时间（如果有）</li><li><code>rdb_last_cow_size</code>: 上次RDB保存操作期间copy-on-write分配的字节大小</li><li><code>aof_enabled</code>: 表示AOF记录已激活的标志</li><li><code>aof_rewrite_in_progress</code>: 表示AOF重写操作正在进行的标志</li><li><code>aof_rewrite_scheduled</code>: 表示一旦进行中的RDB保存操作完成，就会安排进行AOF重写操作的标志</li><li><code>aof_last_rewrite_time_sec</code>: 上次AOF重写操作的持续时间，以秒为单位</li><li><code>aof_current_rewrite_time_sec</code>: 正在进行的AOF重写操作的持续时间（如果有）</li><li><code>aof_last_bgrewrite_status</code>: 上次AOF重写操作的状态</li><li><code>aof_last_write_status</code>: 上一次AOF写入操作的状态</li><li><code>aof_last_cow_size</code>: 上次AOF重写操作期间copy-on-write分配的字节大小</li></ul><p><code>changes_since_last_save</code>指的是从上次调用<code>SAVE</code>或者<code>BGSAVE</code>以来，在数据集中产生某种变化的操作的数量。</p><p>如果启用了AOF，则会添加以下这些额外的字段：</p><ul><li><code>aof_current_size</code>: 当前的AOF文件大小</li><li><code>aof_base_size</code>: 上次启动或重写时的AOF文件大小</li><li><code>aof_pending_rewrite</code>: 指示AOF重写操作是否会在当前RDB保存操作完成后立即执行的标志。</li><li><code>aof_buffer_length</code>: AOF缓冲区大小</li><li><code>aof_rewrite_buffer_length</code>: AOF重写缓冲区大小</li><li><code>aof_pending_bio_fsync</code>: 在后台IO队列中等待fsync处理的任务数</li><li><code>aof_delayed_fsync</code>: 延迟fsync计数器</li></ul><p>如果正在执行加载操作，将会添加这些额外的字段：</p><ul><li><code>loading_start_time</code>: 加载操作的开始时间（基于纪元的时间戳）</li><li><code>loading_total_bytes</code>: 文件总大小</li><li><code>loading_loaded_bytes</code>: 已经加载的字节数</li><li><code>loading_loaded_perc</code>: 已经加载的百分比</li><li><code>loading_eta_seconds</code>: 预计加载完成所需的剩余秒数</li></ul><p>下面是所有 <strong>stats</strong> 相关的信息:</p><ul><li><code>total_connections_received</code>: 服务器接受的连接总数</li><li><code>total_commands_processed</code>: 服务器处理的命令总数</li><li><code>instantaneous_ops_per_sec</code>: 每秒处理的命令数</li><li><code>rejected_connections</code>: 由于<code>maxclients</code>限制而拒绝的连接数</li><li><code>expired_keys</code>: key到期事件的总数</li><li><code>evicted_keys</code>: 由于<code>maxmemory</code>限制而导致被驱逐的key的数量</li><li><code>keyspace_hits</code>: 在主字典中成功查找到key的次数</li><li><code>keyspace_misses</code>: 在主字典中查找key失败的次数</li><li><code>pubsub_channels</code>: 拥有客户端订阅的全局pub/sub通道数</li><li><code>pubsub_patterns</code>: 拥有客户端订阅的全局pub/sub模式数</li><li><code>latest_fork_usec</code>: 最新fork操作的持续时间，以微秒为单位</li></ul><p>下面是所有 <strong>replication</strong> 相关的信息:</p><ul><li><code>role</code>: 如果实例不是任何节点的从节点，则值是”master”，如果实例从某个节点同步数据，则是”slave”。 请注意，一个从节点可以是另一个从节点的主节点（菊花链）。</li></ul><p>如果实例是从节点，则会提供以下这些额外字段：</p><ul><li><code>master_host</code>: 主节点的Host名称或IP地址</li><li><code>master_port</code>: 主节点监听的TCP端口</li><li><code>master_link_status</code>: 连接状态（up或者down）</li><li><code>master_last_io_seconds_ago</code>: 自上次与主节点交互以来，经过的秒数</li><li><code>master_sync_in_progress</code>: 指示主节点正在与从节点同步</li></ul><p>如果SYNC操作正在进行，则会提供以下这些字段：</p><ul><li><code>master_sync_left_bytes</code>: 同步完成前剩余的字节数</li><li><code>master_sync_last_io_seconds_ago</code>: 在SYNC操作期间自上次传输IO以来的秒数</li></ul><p>如果主从节点之间的连接断开了，则会提供一个额外的字段：</p><ul><li><code>master_link_down_since_seconds</code>: 自连接断开以来，经过的秒数</li></ul><p>以下字段将始终提供：</p><ul><li><code>connected_slaves</code>: 已连接的从节点数</li></ul><p>对每个从节点，将会添加以下行：</p><ul><li><code>slaveXXX</code>: id，地址，端口号，状态</li></ul><p>下面是所有 <strong>cpu</strong> 相关的信息:</p><ul><li><code>used_cpu_sys</code>: 由Redis服务器消耗的系统CPU</li><li><code>used_cpu_user</code>: 由Redis服务器消耗的用户CPU</li><li><code>used_cpu_sys_children</code>: 由后台进程消耗的系统CPU</li><li><code>used_cpu_user_children</code>: 由后台进程消耗的用户CPU</li></ul><p><strong>commandstats</strong>部分提供基于命令类型的统计，包含调用次数，这些命令消耗的总CPU时间，以及每个命令执行所消耗的平均CPU。</p><p>对于每一个命令类型，添加以下行：</p><ul><li><code>cmdstat_XXX</code>: <code>calls=XXX,usec=XXX,usec_per_call=XXX</code></li></ul><p><strong>cluster</strong>部分当前只包含一个唯一的字段：</p><ul><li><code>cluster_enabled</code>: 表示已启用Redis集群</li></ul><p><strong>keyspace</strong>部分提供有关每个数据库的主字典的统计，统计信息是key的总数和带有过期key的总数。</p><p>对于每个数据库，提供以下行：</p><ul><li><code>dbXXX</code>: <code>keys=XXX,expires=XXX</code></li></ul></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>多行字符串</strong>: 文本行的合集</p><p>每一行包含了包含一种信息或者属性（从#字符开始）。 所有的属性都是以字段:值（<code>field:value</code>）的形式，以<code>\r\n</code>结尾。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INFO</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Server</span></span><br><span class="line">redis_version:6.2.6</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:eac5b3c736e2a107</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 3.10.0-1160.el7.x86_64 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:4.8.5</span><br><span class="line">process_id:19069</span><br><span class="line">process_supervised:no</span><br><span class="line">run_id:94c6005986e59722cbf438a37cf5513236a5d841</span><br><span class="line">tcp_port:6379</span><br><span class="line">server_time_usec:1653071002486948</span><br><span class="line">uptime_in_seconds:449</span><br><span class="line">uptime_in_days:0</span><br><span class="line">hz:10</span><br><span class="line">configured_hz:10</span><br><span class="line">lru_clock:8903834</span><br><span class="line">executable:/opt/software/redis-6.2.6/src/redis-server</span><br><span class="line">config_file:/opt/software/redis-6.2.6/./redis.conf</span><br><span class="line">io_threads_active:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Clients</span></span><br><span class="line">connected_clients:1</span><br><span class="line">cluster_connections:0</span><br><span class="line">maxclients:10000</span><br><span class="line">client_recent_max_input_buffer:0</span><br><span class="line">client_recent_max_output_buffer:0</span><br><span class="line">blocked_clients:0</span><br><span class="line">tracking_clients:0</span><br><span class="line">clients_in_timeout_table:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Memory</span></span><br><span class="line">used_memory:873840</span><br><span class="line">used_memory_human:853.36K</span><br><span class="line">used_memory_rss:3063808</span><br><span class="line">used_memory_rss_human:2.92M</span><br><span class="line">used_memory_peak:935096</span><br><span class="line">used_memory_peak_human:913.18K</span><br><span class="line">used_memory_peak_perc:93.45%</span><br><span class="line">used_memory_overhead:810112</span><br><span class="line">used_memory_startup:810112</span><br><span class="line">used_memory_dataset:63728</span><br><span class="line">used_memory_dataset_perc:100.00%</span><br><span class="line">allocator_allocated:1032136</span><br><span class="line">allocator_active:1355776</span><br><span class="line">allocator_resident:3592192</span><br><span class="line">total_system_memory:1019572224</span><br><span class="line">total_system_memory_human:972.34M</span><br><span class="line">used_memory_lua:37888</span><br><span class="line">used_memory_lua_human:37.00K</span><br><span class="line">used_memory_scripts:0</span><br><span class="line">used_memory_scripts_human:0B</span><br><span class="line">number_of_cached_scripts:0</span><br><span class="line">maxmemory:0</span><br><span class="line">maxmemory_human:0B</span><br><span class="line">maxmemory_policy:noeviction</span><br><span class="line">allocator_frag_ratio:1.31</span><br><span class="line">allocator_frag_bytes:323640</span><br><span class="line">allocator_rss_ratio:2.65</span><br><span class="line">allocator_rss_bytes:2236416</span><br><span class="line">rss_overhead_ratio:0.85</span><br><span class="line">rss_overhead_bytes:-528384</span><br><span class="line">mem_fragmentation_ratio:3.78</span><br><span class="line">mem_fragmentation_bytes:2253680</span><br><span class="line">mem_not_counted_for_evict:0</span><br><span class="line">mem_replication_backlog:0</span><br><span class="line">mem_clients_slaves:0</span><br><span class="line">mem_clients_normal:0</span><br><span class="line">mem_aof_buffer:0</span><br><span class="line">mem_allocator:jemalloc-5.1.0</span><br><span class="line">active_defrag_running:0</span><br><span class="line">lazyfree_pending_objects:0</span><br><span class="line">lazyfreed_objects:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Persistence</span></span><br><span class="line">loading:0</span><br><span class="line">current_cow_size:0</span><br><span class="line">current_cow_size_age:0</span><br><span class="line">current_fork_perc:0.00</span><br><span class="line">current_save_keys_processed:0</span><br><span class="line">current_save_keys_total:0</span><br><span class="line">rdb_changes_since_last_save:0</span><br><span class="line">rdb_bgsave_in_progress:0</span><br><span class="line">rdb_last_save_time:1653070888</span><br><span class="line">rdb_last_bgsave_status:ok</span><br><span class="line">rdb_last_bgsave_time_sec:0</span><br><span class="line">rdb_current_bgsave_time_sec:-1</span><br><span class="line">rdb_last_cow_size:180224</span><br><span class="line">aof_enabled:0</span><br><span class="line">aof_rewrite_in_progress:0</span><br><span class="line">aof_rewrite_scheduled:0</span><br><span class="line">aof_last_rewrite_time_sec:-1</span><br><span class="line">aof_current_rewrite_time_sec:-1</span><br><span class="line">aof_last_bgrewrite_status:ok</span><br><span class="line">aof_last_write_status:ok</span><br><span class="line">aof_last_cow_size:0</span><br><span class="line">module_fork_in_progress:0</span><br><span class="line">module_fork_last_cow_size:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Stats</span></span><br><span class="line">total_connections_received:2</span><br><span class="line">total_commands_processed:11</span><br><span class="line">instantaneous_ops_per_sec:0</span><br><span class="line">total_net_input_bytes:237</span><br><span class="line">total_net_output_bytes:20373</span><br><span class="line">instantaneous_input_kbps:0.00</span><br><span class="line">instantaneous_output_kbps:0.00</span><br><span class="line">rejected_connections:0</span><br><span class="line">sync_full:0</span><br><span class="line">sync_partial_ok:0</span><br><span class="line">sync_partial_err:0</span><br><span class="line">expired_keys:0</span><br><span class="line">expired_stale_perc:0.00</span><br><span class="line">expired_time_cap_reached_count:0</span><br><span class="line">expire_cycle_cpu_milliseconds:21</span><br><span class="line">evicted_keys:0</span><br><span class="line">keyspace_hits:0</span><br><span class="line">keyspace_misses:0</span><br><span class="line">pubsub_channels:0</span><br><span class="line">pubsub_patterns:0</span><br><span class="line">latest_fork_usec:245</span><br><span class="line">total_forks:1</span><br><span class="line">migrate_cached_sockets:0</span><br><span class="line">slave_expires_tracked_keys:0</span><br><span class="line">active_defrag_hits:0</span><br><span class="line">active_defrag_misses:0</span><br><span class="line">active_defrag_key_hits:0</span><br><span class="line">active_defrag_key_misses:0</span><br><span class="line">tracking_total_keys:0</span><br><span class="line">tracking_total_items:0</span><br><span class="line">tracking_total_prefixes:0</span><br><span class="line">unexpected_error_replies:0</span><br><span class="line">total_error_replies:0</span><br><span class="line">dump_payload_sanitizations:0</span><br><span class="line">total_reads_processed:12</span><br><span class="line">total_writes_processed:11</span><br><span class="line">io_threaded_reads_processed:0</span><br><span class="line">io_threaded_writes_processed:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:6a79d6f2d97cb3525136444bb32aae6dd41d07e1</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CPU</span></span><br><span class="line">used_cpu_sys:1.938793</span><br><span class="line">used_cpu_user:1.406728</span><br><span class="line">used_cpu_sys_children:0.002974</span><br><span class="line">used_cpu_user_children:0.000991</span><br><span class="line">used_cpu_sys_main_thread:1.937100</span><br><span class="line">used_cpu_user_main_thread:1.407383</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Modules</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Errorstats</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cluster</span></span><br><span class="line">cluster_enabled:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Keyspace</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-11-24-LASTSAVE"><a href="#1-11-24-LASTSAVE" class="headerlink" title="1.11.24 LASTSAVE"></a>1.11.24 <strong><a id="LASTSAVE">LASTSAVE</a></strong></h4><p>以 UNIX 时间戳格式返回最近一次 Redis 成功将数据保存到磁盘上的时间。</p><p><code>LASTSAVE</code> 通常被用来检查 <code>BGSAVE</code> 命令是否执行完成。通常是每隔几秒钟看一下 <code>LASTSAVE</code> 的是是否有变化。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LASTSAVE</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>: 一个 UNIX 时间戳。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LASTSAVE</span><br><span class="line">(integer) 1653070888</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-11-25-MONITOR"><a href="#1-11-25-MONITOR" class="headerlink" title="1.11.25 MONITOR"></a>1.11.25 <strong><a id="MONITOR">MONITOR</a></strong></h4><p>Redis <code>MONITOR</code> 命令用于实时打印出 Redis 服务器接收到的命令，调试用。</p><p><code>MONITOR</code> 用来帮助我们知道数库正在做什么。可以通过 <code>redis-cli</code> 和 <code>telnet</code> 调用 <code>MONITOR</code>。</p><p>当 Redis 用做数据库或者分布式缓存时，<code>MONITOR</code> 可以帮助我们发现程序中的 bug 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-6.2.6]# ./src/redis-cli -a yanpenggong</span><br><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; set x 6</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get x</span><br><span class="line">&quot;6&quot;</span><br><span class="line">127.0.0.1:6379&gt; del x</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; GET x</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; QUIT</span><br><span class="line">[root@localhost redis-6.2.6]# </span><br></pre></td></tr></table></figure><p>通过 <code>redis-cli</code> 运行 <code>MONITOR</code> 时，可以发送 <code>SIGINT</code> (Ctrl+C) 信号来停止退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MONITOR</span><br><span class="line">OK</span><br><span class="line">+1339518083.107412 [0 127.0.0.1:60866] &quot;keys&quot; &quot;*&quot;</span><br><span class="line">+1339518087.877697 [0 127.0.0.1:60866] &quot;dbsize&quot;</span><br><span class="line">+1339518090.420270 [0 127.0.0.1:60866] &quot;set&quot; &quot;x&quot; &quot;6&quot;</span><br><span class="line">+1339518096.506257 [0 127.0.0.1:60866] &quot;get&quot; &quot;x&quot;</span><br><span class="line">+1339518099.363765 [0 127.0.0.1:60866] &quot;del&quot; &quot;x&quot;</span><br><span class="line">+1339518100.544926 [0 127.0.0.1:60866] &quot;get&quot; &quot;x&quot;</span><br><span class="line">QUIT</span><br><span class="line">+OK</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><p>通过 <code>telnet</code> 运行 <code>MONITOR</code> 时，可以发送 <code>QUIT</code>来停止退出。</p><blockquote><ol><li><p><strong>MONITOR 不记录的命令</strong>:</p><p>处于安全方面的考虑，所有的管理相关的命令不会记录到 <code>MONITOR</code>的输出者。</p><p>下面几个命令也不会记录：</p><ul><li><code>AUTH</code></li><li><code>EXEC</code></li><li><code>HELLO</code></li><li><code>QUIT</code></li></ul></li><li><p><strong>MONITOR 的消耗</strong>:</p><p>因为 <code>MONITOR</code>流返回所有命令，所以用起来会有一定的消耗。 下面是一个基准测试对比：</p><p>不带 <code>MONITOR</code>命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-benchmark -c 10 -n 100000 -q</span><br><span class="line">PING_INLINE: 101936.80 requests per second</span><br><span class="line">PING_BULK: 102880.66 requests per second</span><br><span class="line">SET: 95419.85 requests per second</span><br><span class="line">GET: 104275.29 requests per second</span><br><span class="line">INCR: 93283.58 requests per second</span><br></pre></td></tr></table></figure><p>带 <code>MONITOR</code>命令 (<code>redis-cli monitor &gt; /dev/null</code>):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-benchmark -c 10 -n 100000 -q</span><br><span class="line">PING_INLINE: 58479.53 requests per second</span><br><span class="line">PING_BULK: 59136.61 requests per second</span><br><span class="line">SET: 41823.50 requests per second</span><br><span class="line">GET: 45330.91 requests per second</span><br><span class="line">INCR: 41771.09 requests per second</span><br></pre></td></tr></table></figure><p>通过上面的例子可以看到运行一个 <code>MONITOR</code>命令降低了超过 50% 的吞吐量。 运行多个 <code>MONITOR</code>会进一步降低性能。</p></li></ol></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MONITOR</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>输出Redis服务器处理的指令流直到退出。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MONITOR</span><br><span class="line">OK</span><br><span class="line">+1339518083.107412 [0 127.0.0.1:60866] &quot;keys&quot; &quot;*&quot;</span><br><span class="line">+1339518087.877697 [0 127.0.0.1:60866] &quot;dbsize&quot;</span><br><span class="line">+1339518090.420270 [0 127.0.0.1:60866] &quot;set&quot; &quot;x&quot; &quot;6&quot;</span><br><span class="line">+1339518096.506257 [0 127.0.0.1:60866] &quot;get&quot; &quot;x&quot;</span><br><span class="line">+1339518099.363765 [0 127.0.0.1:60866] &quot;del&quot; &quot;x&quot;</span><br><span class="line">+1339518100.544926 [0 127.0.0.1:60866] &quot;get&quot; &quot;x&quot;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-11-26-ROLE"><a href="#1-11-26-ROLE" class="headerlink" title="1.11.26 ROLE"></a>1.11.26 <strong><a id="ROLE">ROLE</a></strong></h4><p>Redis ROLE 命令返回实例在复制中担任的角色， 这个角色可以是 <code>master</code> 、 <code>slave</code> 或者 <code>sentinel</code> 。 </p><blockquote><p>除了角色之外， 命令还会返回与该角色相关的其他信息， 其中：</p><ul><li>主服务器将返回属下从服务器的 IP 地址和端口。</li><li>从服务器将返回自己正在复制的主服务器的 IP 地址、端口、连接状态以及复制偏移量。</li><li>Sentinel 将返回自己正在监视的主服务器列表。</li></ul></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ROLE</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>数组：第一个参数是 master, slave, sentinel 三个中的一个。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ROLE</span><br><span class="line">1) &quot;master&quot;</span><br><span class="line">2) (integer) 0</span><br><span class="line">3) (empty array)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.12.</strong></p></blockquote><h4 id="1-11-27-SAVE"><a href="#1-11-27-SAVE" class="headerlink" title="1.11.27 SAVE"></a>1.11.27 <strong><a id="SAVE">SAVE</a></strong></h4><p>Redis <code>SAVE</code> 命令用于执行<strong>同步</strong>保存操作，把 Redis 实例中某一时点的所有数据的快照以 RDB 文件的形式保存到磁盘上。</p><p>生产环境不要执行 <code>SAVE</code> 命令，因为这会阻塞所有其它的客户端。</p><p>可以使用 <code>BGSAVE</code> 代替。尽管如此，<code>BGSAVE</code> 也有执行失败的危险，<code>SAVE</code> 是转存最新数据集的最好也是最后一个方法。</p><p>详细参考 <a href="https://redis.com.cn/topics/persistence.html">persistence documentation</a> 。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SAVE</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 成功时返回 “OK”。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SAVE </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-11-28-SHUTDOWN"><a href="#1-11-28-SHUTDOWN" class="headerlink" title="1.11.28 SHUTDOWN"></a>1.11.28 <strong><a id="SHUTDOWN">SHUTDOWN</a></strong></h4><p>SHUTDOWN 命令执行如下操作:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 停止所有客户端</span><br><span class="line">- 如果配置了save 策略 则执行一个阻塞的save命令</span><br><span class="line">- 如果开启了AOF，则刷新aof文件</span><br><span class="line">- 关闭redis服务进程（redis-server）</span><br></pre></td></tr></table></figure><p>如果配置了持久化策略，那么这个命令将能够保证在关闭redis服务进程的时候数据不会丢失。</p><p>如果仅仅在客户端执行 <code>QUIT</code> 命令,然后 执行 <code>QUIT</code> 命令，那么数据的完整性将不会被保证，因为其他客户端可能在执行这两个命令的期间修改数据库的数据。</p><p>注意: 一个没有配置持久化策略的redis实例 (没有aof配置, 没有 “save” 命令) 将不会在执行<code>SHUTDOWN</code>命令的时候转存一个rdb文件，可以提高关闭的速度，例如仅用来做缓存的 redis 不需要配置持久化转存。</p><blockquote><ol><li><p><strong>SAVE 和 NOSAVE 修饰符</strong></p><p>通过指定一个可选的修饰符可以改变这个命令的表现形式，比如:</p><ul><li><strong>SHUTDOWN SAVE</strong> 能够在即使没有配置持久化的情况下强制数据库存储。</li><li><strong>SHUTDOWN NOSAVE</strong> 能够在配置一个或者多个持久化策略的情况下阻止数据库存储. (你可以假想它为一个中断服务的 <strong>ABORT</strong> 命令)。</li></ul></li><li><p><strong>SHUTDOWN 关闭失败的情况</strong></p><p>当配置了 AOF 时，shutdown 可能会失败由于系统处于不允许立刻执行磁盘持久化操纵。</p><p>当有一个AOF的子进程在执行AOF重写时，Redis 会简单的kill 该子进程。有两种列外的情况，<strong>SHUTDOWN</strong> 会返回失败：</p><ul><li>AOF 刚刚打开，首次进行 AOF rewrite 创建初始的 AOF 文件。这种情况下停止redis将会丢失所有数据：一旦停止 redis时，虽然开启了AOF，但是还没有创建任何AOF文件。</li><li>复制节点打开了 AOF，向 master 发起重连，执行数据全同步，然后重起AOF，创建初始AOF文件。可能会丢失复制自master节点的数据。 </li></ul><p>如果我们只是想立刻关闭redis，而不管其它情况。正确的做法是先发送<strong>CONFIG appendonly no</strong> ，然后执行<strong>SHUTDOWN NOSAVE</strong>.。前一个命令关闭 AOF（如果打开AOF），终止可能存在的 AOF 重写子进程，这样后一个命令关闭不会失败。</p></li></ol></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SHUTDOWN [NOSAVE] [SAVE] </span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: 当发生错误的时候返回状态码 . 当成功的时候不返回任何值，因为服务退出，链接关闭。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PING</span><br><span class="line">Error: Server closed the connection</span><br><span class="line">127.0.0.1:6379&gt; PING</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; SHUTDOWN</span><br><span class="line">not connected&gt; redis</span><br><span class="line">Could not connect to Redis at 127.0.0.1:6379: Connection refused</span><br><span class="line">not connected&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-11-29-SLAVEOF"><a href="#1-11-29-SLAVEOF" class="headerlink" title="1.11.29 SLAVEOF"></a>1.11.29 <strong><a id="SLAVEOF">SLAVEOF</a></strong></h4><p>Redis SLAVEOF 命令可以将当前服务器转变为指定服务器的从属服务器(slave server)。</p><p><strong>注意</strong>: 从 Redis 5 起使用 <code>REPLICAOF</code> 替代 <code>SLAVEOF</code>。当然，为了向后兼容 SLAVEOF 命令仍然可用。</p><p><code>SLAVEOF</code> 命令可以临时修改从节点的复制配置。如果当前服务器已经是某个主服务器(master server)的从属服务器，<code>SLAVEOF</code> NO ONE 命令会停止复制，把节点改为主节点。</p><p><code>SLAVEOF</code> hostname port 可以使正在复制其它节点的 Redis 改为复制新的 hostname 和 port。</p><p><code>SLAVEOF</code> hostname port 将会停止从旧的主节点复制，丢弃已经同步的旧的数据，并开始从新的节点同步数据。</p><p><code>SLAVEOF</code> NO ONE 用来停止复制，把从节点改为主节点，但是不会丢弃已复制的数据。所以，当 Master 主节点出现问题时，可以把从节点变成 Master 主节点，使应用读/写新的主节点。当原来的主节点修复之后，可以把新的 Master 节点重新配置为从节点。</p><p>利用『 SLAVEOF NO ONE 不会丢弃同步所得数据集』这个特性，可以在主服务器失败的时候，将从属服务器用作新的主服务器，从而实现无间断运行。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SLAVEOF host port</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>：总是返回 OK 。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SLAVEOF 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SLAVEOF NO ONE</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h4 id="1-11-30-SLOWLOG"><a href="#1-11-30-SLOWLOG" class="headerlink" title="1.11.30 SLOWLOG"></a>1.11.30 <strong><a id="SLOWLOG">SLOWLOG</a></strong></h4><p>Redis slowlog 是 Redis 用来记录查询执行时间的日志系统。</p><p>查询执行时间指的是不包括像客户端响应(talking)、发送回复等 IO 操作，而单单是执行一个查询命令所耗费的时间。</p><p>另外，slow log 保存在内存里面，读写速度非常快，因此你可以放心地使用它，不必担心因为开启 slow log 而损害 Redis 的速度。</p><blockquote><ol><li><p><strong>读取 slow log</strong></p><p>慢日志记录在内存中，不会写到文件上。所以即使记录所有执行的命令到慢日志中性能开销也很小。</p><p>读取慢日志命令：</p><p><strong>SLOWLOG GET</strong> 返回每一条慢日志。</p><p><strong>SLOWLOG GET n</strong> 返回最新的n条慢日志。</p><p>注意：请使用新版 redis-cli 以便能解析慢日志输出，较老版本的 redis-cli 不支持多行嵌套。</p></li><li><p><strong>响应输出格式</strong></p><ol><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; slowlog get 2</span><br><span class="line">1) 1) (integer) 14</span><br><span class="line">   2) (integer) 1309448221</span><br><span class="line">   3) (integer) 15</span><br><span class="line">   4) 1) &quot;ping&quot;</span><br><span class="line">2) 1) (integer) 13</span><br><span class="line">   2) (integer) 1309448128</span><br><span class="line">   3) (integer) 30</span><br><span class="line">   4) 1) &quot;slowlog&quot;</span><br><span class="line">      2) &quot;get&quot;</span><br><span class="line">      3) &quot;100&quot;</span><br></pre></td></tr></table></figure></li></ol><p>Redis 4.0 及之后版本新增域：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5) &quot;127.0.0.1:58217&quot;</span><br><span class="line">6) &quot;worker-123&quot;</span><br></pre></td></tr></table></figure><p>每条慢日志由 4 或 6 部分组成:</p><ul><li>每条慢日志有一个递增的唯一 ID。</li><li>记录慢日志的 Unix 时间戳。</li><li>执行这个命令花费的时间，单位是微妙。</li><li>数组形式的命令参数。</li><li>客户端 ip 和端口 (4.0 only)。</li><li>通过 <a href="https://redis.com.cn/commands/client-setname.html">CLIENT SETNAME</a> 命令设置的客户端名字 (4.0 only)。</li></ul><p>可以用唯一 ID 来避免慢日志被处理多次（例如你有一个每当产生新的慢日志发送报警的脚本）。</p><p>ID 在 Redis 运行期间不会重置，Redis 重启之后会重置 ID。</p></li><li><p><strong>查询当前 slowlog 的长度</strong></p><p><strong>SLOWLOG LEN </strong>获取 slow log 的长度。</p></li><li><p><strong>重置 slow log</strong></p><p><strong>SLOWLOG RESET</strong> 命令用来重置 slowlog。一旦删除 slowlog 不可恢复。</p></li></ol></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SLOWLOG subcommand [argument]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p>取决于不同命令，返回不同的值。</p></li><li><p><strong>实例：</strong></p><p>查看日志信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; slowlog get 2</span><br><span class="line">1) 1) (integer) 14</span><br><span class="line">   2) (integer) 1309448221</span><br><span class="line">   3) (integer) 15</span><br><span class="line">   4) 1) &quot;ping&quot;</span><br><span class="line">2) 1) (integer) 13</span><br><span class="line">   2) (integer) 1309448128</span><br><span class="line">   3) (integer) 30</span><br><span class="line">   4) 1) &quot;slowlog&quot;</span><br><span class="line">      2) &quot;get&quot;</span><br><span class="line">      3) &quot;100&quot;</span><br></pre></td></tr></table></figure><p>查看当前日志的数量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SLOWLOG LEN</span><br><span class="line">(integer) 14</span><br></pre></td></tr></table></figure><p>使用命令 SLOWLOG RESET 可以清空 slow log 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SLOWLOG LEN</span><br><span class="line">(integer) 14</span><br><span class="line">127.0.0.1:6379&gt; SLOWLOG RESET</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SLOWLOG LEN</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>可用版本&gt;= 2.2.12.</p></blockquote><h4 id="1-11-31-SYNC"><a href="#1-11-31-SYNC" class="headerlink" title="1.11.31 SYNC"></a>1.11.31 <strong><a id="SYNC">SYNC</a></strong></h4><p>从主服务节点初始化流复制。</p><p>Redis 从节点调用 <code>SYNC</code> 来从主节点启动流复制。在 redis 新版本中已经被 <code>PSYNC</code> 代替。</p><p>更多信息可以参考 <a href="#Redis复制">Redis 复制</a>。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SYNC</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>非标准数据</strong>, bulk 数据 + PING + 来自master的写请求。</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SYNC</span><br><span class="line">Entering replica output mode...  (press Ctrl-C to quit)</span><br><span class="line">SYNC with master, discarding 175 bytes of bulk transfer...</span><br><span class="line">SYNC done. Logging commands from master.</span><br><span class="line">&quot;ping&quot;</span><br><span class="line">&quot;ping&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 1.0.0.</strong></p></blockquote><h3 id="1-12-Redis-HyperLogLog"><a href="#1-12-Redis-HyperLogLog" class="headerlink" title="1.12  Redis HyperLogLog"></a>1.12  Redis HyperLogLog</h3><h4 id="1-12-1-PFADD"><a href="#1-12-1-PFADD" class="headerlink" title="1.12.1 PFADD"></a>1.12.1 <strong><a id="PFADD">PFADD</a></strong></h4><p>Redis <code>Pfadd</code> 命令将所有元素参数添加到 HyperLogLog 数据结构中。</p><p>作为这个命令的副作用， HyperLogLog 内部可能会被更新， 以便反映一个不同的唯一元素估计数量（也即是集合的基数）。</p><p>如果 HyperLogLog 估计的近似基数（approximated cardinality）在命令执行之后出现了变化， 那么命令返回 <code>1</code> ， 否则返回 <code>0</code> 。 如果命令执行时给定的键不存在， 那么程序将先创建一个空的 HyperLogLog 结构， 然后再执行命令。</p><blockquote><p>调用 <code>PFADD</code> 命令时可以只给定键名而不给定元素：</p><ul><li>如果给定键已经是一个 HyperLogLog ， 那么这种调用不会产生任何效果；</li><li>但如果给定的键不存在， 那么命令会创建一个空的 HyperLogLog ， 并向客户端返回 <code>1</code> 。</li></ul><p>要了解更多关于 HyperLogLog 数据结构的介绍知识， 请查阅 <code>PFCOUNT</code>命令的文档。</p></blockquote><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD key element [element ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>, specifically:</p><ul><li>如果 HyperLogLog 的内部储存被修改了， 那么返回 1 ， 否则返回 0 。</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD myset a b c d e f g</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT myset</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.9.</strong></p><p><strong>时间复杂度:</strong> O(1) to add every element.</p></blockquote><h4 id="1-12-2-PFCOUNT"><a href="#1-12-2-PFCOUNT" class="headerlink" title="1.12.2 PFCOUNT"></a>1.12.2 <strong><a id="PFCOUNT">PFCOUNT</a></strong></h4><p>Redis <code>PFCOUNT</code> 命令返回给定 HyperLogLog 的基数估算值。<br>当 <code>PFCOUNT</code> 命令作用于单个键时， 返回储存在给定键的 HyperLogLog 的近似基数， 如果键不存在， 那么返回 0 。<br>当 <code>PFCOUNT</code> 命令作用于多个键时， 返回所有给定 HyperLogLog 的并集的近似基数， 这个近似基数是通过将所有给定 HyperLogLog 合并至一个临时 HyperLogLog 来计算得出的。<br>通过 HyperLogLog 数据结构， 用户可以使用少量固定大小的内存， 来储存集合中的唯一元素 （每个 HyperLogLog 只需使用 12k 字节内存，以及几个字节的内存来储存键本身）。<br>命令返回的可见集合（observed set）基数并不是精确值， 而是一个带有 0.81% 标准错误（standard error）的近似值。<br>举个例子， 为了记录一天会执行多少次各不相同的搜索查询， 一个程序可以在每次执行搜索查询时调用一次 <code>PFADD</code>， 并通过调用 <code>PFCOUNT</code>命令来获取这个记录的近似结果。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFCOUNT key [key ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>整数</strong>, specifically:</p><ul><li>给定 HyperLogLog 包含的唯一元素的近似数量。</li></ul></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD myset kungs1 kungs2 kungs3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD myset kungs1 kungs2 kungs4</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD myset kungs1 kungs1 kungs1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; PFADD myset kungs1 kungs2</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT myset</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; PFADD myset-other a b c</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT myset myset-other</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.9.</strong></p><p><strong>时间复杂度:</strong> O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.</p></blockquote><h4 id="1-12-3-PFMERGE"><a href="#1-12-3-PFMERGE" class="headerlink" title="1.12.3 PFMERGE"></a>1.12.3 <strong><a id="PFMERGE">PFMERGE</a></strong></h4><p>Redis <code>PFMERGE</code> 命令将多个 HyperLogLog 合并为一个 HyperLogLog ，合并后的 HyperLogLog 的基数估算值是通过对所有 给定 HyperLogLog 进行并集计算得出的。</p><p>合并得出的 HyperLogLog 会被储存在 <code>destkey</code> 键里面， 如果该键并不存在， 那么命令在执行之前， 会先为该键创建一个空的 HyperLogLog 。</p><ul><li><p><strong>语法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFMERGE destkey sourcekey [sourcekey ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值：</strong></p><p><strong>字符串</strong>: <code>OK</code>.</p></li><li><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD myset kungs1 kungs2 kungs3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD myset-other a b c</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFMERGE out  myset myset-other</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT out</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>可用版本&gt;= 2.8.9.</strong></p><p><strong>时间复杂度:</strong> O(N) to merge N HyperLogLogs, but with high constant times.</p></blockquote><h1 id="Redis协议详细规范"><a href="#Redis协议详细规范" class="headerlink" title="Redis协议详细规范"></a><a id="Redis协议详细规范">Redis协议详细规范</a></h1><p>Redis客户端和服务器端通信使用名为 <strong>RESP</strong> (REdis Serialization Protocol) 的协议。虽然这个协议是专门为Redis设计的，它也可以用在其它 client-server 通信模式的软件上。</p><p>RESP 是下面条件的折中：</p><ul><li>实现起来简单。</li><li>解析速度快。</li><li>有可读性。</li></ul><p>RESP 能序列化不同的数据类型，例如整型(integers)、字符串(strings)、数组(arrays)。额外还有特殊的错误类型。请求从客户端以字符串数组的形式发送到redis服务器，这些字符串表示要执行的命令的参数。Redis用特定于命令的数据类型回复。</p><p>RESP 是二进制安全的，并且不需要处理从一个进程发到另外一个进程的批量数据，因为它使用前缀长度来传输批量数据。</p><p> 注意：这里概述的协议仅用于客户机-服务器通信。Redis集群使用不同的二进制协议在节点之间交换消息。</p><h2 id="1-网络层"><a href="#1-网络层" class="headerlink" title="1. 网络层"></a>1. 网络层</h2><p>连到Redis服务器的客户端建立了一个到6379端口的TCP连接。</p><p>虽然RESP在技术上不特定于TCP，但是在Redis的上下文中，该协议仅用于TCP连接（或类似的面向流的连接，如unix套接字）。</p><h2 id="2-请求-响应模型"><a href="#2-请求-响应模型" class="headerlink" title="2. 请求-响应模型"></a>2. 请求-响应模型</h2><p>Redis接受由不同参数组成的命令。一旦收到命令，就会对其进行处理，并将应答发送回客户端。</p><p>这是最简单的模型，但是有两个例外：</p><ul><li>Redis 支持管道pipelining。所以，客户端可以一次发送多个命令，然后再等待应答。</li><li>当一个Redis客户端订阅一个频道，那么协议会改变语义并变成<em>push</em>protocol, 也就是说，客户客户端不再需要发送命令，因为服务器端会一收到新消息，就会自动发送给客户端。</li></ul><p>除了上面两个例外情况，Redis协议是一个简单的请求-响应协议。</p><h2 id="3-RESP-协议解释"><a href="#3-RESP-协议解释" class="headerlink" title="3. RESP 协议解释"></a>3. RESP 协议解释</h2><p>RESP 协议在Redis1.2被引入，直到Redis2.0才成为和Redis服务器通信的标准。这个协议需要在你的Redis客户端实现。</p><p>RESP 是一个支持多种数据类型的序列化协议：简单字符串（Simple Strings）,错误（ Errors）,整型（ Integers）, 大容量字符串（Bulk Strings）和数组（Arrays）。</p><p>RESP在Redis中作为一个请求-响应协议以如下方式使用：</p><ul><li>客户端以大容量字符串RESP数组的方式发送命令给服务器端。</li><li>服务器端根据命令的具体实现返回某一种RESP数据类型。</li></ul><p>在 RESP 中，数据的类型依赖于首字节：</p><ul><li><strong>单行字符串（Simple Strings）：</strong> 响应的首字节是 “+”</li><li><strong>错误（Errors）： 响应的首字节是</strong> “-“</li><li><strong>整型（Integers）： 响应的首字节是</strong> “:”</li><li><strong>多行字符串（Bulk Strings）： 响应的首字节是</strong>“$“</li><li><strong>数组（Arrays）：</strong> 响应的首字节是 “<code>*</code>“</li></ul><p>另外，RESP可以使用大容量字符串或者数组类型的特殊变量表示空值，下面会具体解释。RESP协议的不同部分总是以 “\r\n” (CRLF) 结束。</p><h2 id="4-RESP-单行字符串"><a href="#4-RESP-单行字符串" class="headerlink" title="4. RESP 单行字符串"></a>4. RESP 单行字符串</h2><p>单行字符串编码方法: 加号后面跟着一个不包含回车或换行字符的字符串 (不允许出现换行)，以CRLF(“\r\n”)结尾。</p><p>单行字符串通常被用来传输非二进制安全字符串并且消耗极小。例如，许多redis命令在成功时回复”OK”，即简单字符串用以下5个字节编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;+OK\r\n&quot;</span><br></pre></td></tr></table></figure><p>为了发送二进制安全的字符串，需要使用RESP的多行字符串（Bulk Strings）替代。</p><p>当Redis返回单行字符串（Simple String）时，客户端lib应该返回去掉首字符加号和结尾CRLF字符的字符串给调用者。</p><h2 id="5-RESP-错误"><a href="#5-RESP-错误" class="headerlink" title="5. RESP 错误"></a>5. RESP 错误</h2><p>RESP 有特殊类型来处理错误。errors类型除了首字符是减号 ‘-‘不是加号以外，其它跟简单字符串一样。RESP中简单字符和错误的真正区别是：错误被客户端当作异常处理，组成错误类型的字符串是错误消息自身。</p><p>基本格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;-Error message\r\n&quot;</span><br></pre></td></tr></table></figure><p>错误应答只在发生异常时发送，例如，要执行命令的参数数据类型不匹配或者命令不存在等。当收到错误返回时，客户端lib应该抛出一个异常。</p><p>错误返回例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-ERR unknown command &#x27;foobar&#x27;</span><br><span class="line">-WRONGTYPE Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure><p>从”-“后面第一个单词起，直到第一个空格或者换行，表示返回的错误类型。这是Redis的一种约定，并不是RESP协议的要求。</p><p><code>ERR</code> 是一个通用错误, 而 <code>WRONGTYPE</code> 是表示更具体的错误，意味着客户端在错误的数据类型上执行操作。这被叫做错误前缀（<strong>Error Prefix），</strong> 使客户端不用依赖具体错误消息就知道返回的错误类型，错误消息可能会随着时间而变化。</p><p>客户端实现可能会对不同异常返回不同类型的错误，或者可能提供一种通用的方式来捕获错误，通过以字符串的形式直接返回错误名给调用者。</p><p>尽管如此，这种特性不能认为很重要，因为它很少被使用。一小部分客户端的实现可能会返回通用错误条件，例如<code>false。</code></p><h2 id="6-RESP-整数"><a href="#6-RESP-整数" class="headerlink" title="6. RESP 整数"></a>6. <a id="RESP整数">RESP 整数</a></h2><p>整数类型是由以冒号开头，CRLF结尾，中间是字符串形式表示的数字。 例如 “:0\r\n”, 或 “:1000\r\n” 都是整数回复。</p><p>很多Redis命令返回RESP整数，像 <a href="http://www.redis.com.cn/commands/incr">INCR</a>, <a href="http://www.redis.com.cn/commands/llen">LLEN</a> 和 <a href="http://www.redis.com.cn/commands/lastsave">LASTSAVE</a>.</p><p>返回的整数并没有特别的意义， <a href="http://www.redis.com.cn/commands/incr">INCR</a> 返回的是一个递增的数字， <a href="http://www.redis.com.cn/commands/lastsave">LASTSAVE</a> 返回的是Unix时间戳等。返回的整数有效值需要在有符号64位整数范围内。</p><p>整数返回也被广泛的用来返回 true 或 false。比如 <a href="http://www.redis.com.cn/commands/exists">EXISTS</a> 或 <a href="http://www.redis.com.cn/commands/sismember">SISMEMBER</a> 命令返回1表示true，返回0表示false。</p><p>其它命令像 <a href="http://www.redis.com.cn/commands/sadd">SADD</a>, <a href="http://www.redis.com.cn/commands/srem">SREM</a> 和 <a href="http://www.redis.com.cn/commands/setnx">SETNX</a> 如果操作被执行则返回1，否则返回0。</p><p>返回整数回复的命令： <a href="http://www.redis.com.cn/commands/setnx">SETNX</a>, <a href="http://www.redis.com.cn/commands/del">DEL</a>, <a href="http://www.redis.com.cn/commands/exists">EXISTS</a>, <a href="http://www.redis.com.cn/commands/incr">INCR</a>, <a href="http://www.redis.com.cn/commands/incrby">INCRBY</a>, <a href="http://www.redis.com.cn/commands/decr">DECR</a>, <a href="http://www.redis.com.cn/commands/decrby">DECRBY</a>, <a href="http://www.redis.com.cn/commands/dbsize">DBSIZE</a>, <a href="http://www.redis.com.cn/commands/lastsave">LASTSAVE</a>, <a href="http://www.redis.com.cn/commands/renamenx">RENAMENX</a>, <a href="http://www.redis.com.cn/commands/move">MOVE</a>, <a href="http://www.redis.com.cn/commands/llen">LLEN</a>, <a href="http://www.redis.com.cn/commands/sadd">SADD</a>, <a href="http://www.redis.com.cn/commands/srem">SREM</a>, <a href="http://www.redis.com.cn/commands/sismember">SISMEMBER</a>, <a href="http://www.redis.com.cn/commands/scard">SCARD</a>.</p><h2 id="6-RESP-多行字符串"><a href="#6-RESP-多行字符串" class="headerlink" title="6. RESP 多行字符串"></a>6. <a id="多行字符串">RESP 多行字符串</a></h2><p>多行字符串被用来表示最大512MB长的二进制安全字符串。</p><p>多行字符串编码方式：</p><ul><li>美元符 “$“ 后面跟着组成字符串的字节数(前缀长度)，并以 CRLF 结尾。</li><li>实际的字符串数据。</li><li>结尾是 CRLF。</li></ul><p>所以，字符串 “foobar” 编码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;$6\r\nfoobar\r\n&quot;</span><br></pre></td></tr></table></figure><p>空字符串编码格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;$0\r\n\r\n&quot;</span><br></pre></td></tr></table></figure><p>RESP 多行字符串（Bulk Strings） 也可以使用一个特殊的用来表示空值的格式表示不存在的值。在这种格式里长度值为-1，数据部分不存在，所以空（Null）用如下方式表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;$-1\r\n&quot;</span><br></pre></td></tr></table></figure><p>叫做<strong>空的多行字符串Null Bulk String。</strong></p><p>客户端API库不应该返回空串，当服务器端响应一个空的多行字符串时，API库可以返回一个空对象给调用者。例如，Ruby库应该返回 ‘nil’ ，而C库应该返回NULL。 </p><h2 id="7-RESP-数组"><a href="#7-RESP-数组" class="headerlink" title="7. RESP 数组"></a>7. <a id="RESP 数组">RESP 数组</a></h2><p>客户端使用 RESP 数组发送命令到 Redis 服务端。同样地，某些命令的应答使用RESP数组返回元素的集合给Redis客户端。 <a href="http://www.redis.com.cn/commands/lrange">LRANGE</a> 命令返回元素列表就是一个例子。</p><p>RESP 数组使用如下格式发送：</p><ul><li>以星号<code>* 为首字符，接着是表示数组中元素个数的十进制数</code>，最后以 CRLF 结尾。</li><li>外加数组中每个 RESP 类型的元素。</li></ul><p>空数组表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;*0\r\n&quot;</span><br></pre></td></tr></table></figure><p>有两个 RESP 多行字符串”foo” 和”bar”元素的 RESP 数组 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;*2\r\n$3\r\nfoo\r\n$3\r\nbar\r\n&quot;</span><br></pre></td></tr></table></figure><p>在前缀 <code>*&lt;count&gt;CRLF</code> 的后面，组成数组的其它数据类型一个接在另一个后面。 例如包含三个整数的数组编码方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;*3\r\n:1\r\n:2\r\n:3\r\n&quot;</span><br></pre></td></tr></table></figure><p>数组可以包含混合类型，不一定必须是同一种类型。例如，4个整型和1个多行字符串编码方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*5\r\n</span><br><span class="line">:1\r\n</span><br><span class="line">:2\r\n</span><br><span class="line">:3\r\n</span><br><span class="line">:4\r\n</span><br><span class="line">$6\r\n</span><br><span class="line">foobar\r\n</span><br></pre></td></tr></table></figure><p>(为了方便阅读，应答分成多行来展示)</p><p>第一个行表示 <code>*5\r\n</code> 说明后面有5个应答。这些应答组成一个大的应答一起发送。</p><p>空数组的概念也是存在的，另一个表示空值的方式(通常使用多行空字符串，历史遗留导致有这两种格式)。</p><p>例如，当 <a href="http://www.redis.com.cn/commands/blpop">BLPOP</a> 命令超时，它会返回一个空数组，数组的计数器是-1 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;*-1\r\n&quot;</span><br></pre></td></tr></table></figure><p>当 Redis 返回一个空数组的时候，Redis客户端库API应该返回一个空对象而不是返回一个空数组。 这对区分空列表和其它不同情况（像 <a href="http://www.redis.com.cn/commands/blpop">BLPOP</a> 命令超时情况）是必要的。</p><p>数组的数组也是可行的。例如，一个含有两个数组元素的数组编码方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*2\r\n</span><br><span class="line">*3\r\n</span><br><span class="line">:1\r\n</span><br><span class="line">:2\r\n</span><br><span class="line">:3\r\n</span><br><span class="line">*2\r\n</span><br><span class="line">+Foo\r\n</span><br><span class="line">-Bar\r\n</span><br></pre></td></tr></table></figure><p>(为了方便阅读，分成多行来展示).</p><p>上面的 RESP 数据类型包含两个数组，一个数组包含三个整数1, 2, 3 ，另一个是简单字符串和一个错误类型。</p><h2 id="8-数组中的空元素"><a href="#8-数组中的空元素" class="headerlink" title="8. 数组中的空元素"></a>8. 数组中的空元素</h2><p>数组中可以有为空的元素。主要使用在Redis应答中，为了表示这个元素丢失并且不是一个空的字符串。当SORT命令使用GET 模式选项，并且特定的key丢失的时会出现这种应答。 含有有空元素的应答数组例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*3\r\n</span><br><span class="line">$3\r\n</span><br><span class="line">foo\r\n</span><br><span class="line">$-1\r\n</span><br><span class="line">$3\r\n</span><br><span class="line">bar\r\n</span><br></pre></td></tr></table></figure><p>第二个元素是空，客户端库应该返回像下面这样的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;foo&quot;,nil,&quot;bar&quot;]</span><br></pre></td></tr></table></figure><p>这不是前面提到的异常情况，这只是说明协议的一个例子。</p><h2 id="9-发送命令到Redis服务器"><a href="#9-发送命令到Redis服务器" class="headerlink" title="9. 发送命令到Redis服务器"></a>9. 发送命令到Redis服务器</h2><p>至此，我们已经很熟悉RESP序列化格式，写一个Redis客户端库的实现会变得很容易。我们可以进一步说明客户端和服务端如何交互工作：</p><ul><li>客户端发送包含只有多行字符串的数组给Redis服务器。</li><li>Redis 服务器给客户端发送任意有效的 RESP 数据类型作为应答。</li></ul><p>下面是一个典型的交互过程例子：</p><p>客户端发送命令 <strong>LLEN mylist</strong> 来获取存储在 <em>mylist</em> 键中列表的长读，然后服务器端返回整数应答(C: 代表客户端, S: 代表服务器端).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C: *2\r\n</span><br><span class="line">C: $4\r\n</span><br><span class="line">C: LLEN\r\n</span><br><span class="line">C: $6\r\n</span><br><span class="line">C: mylist\r\n</span><br><span class="line"></span><br><span class="line">S: :48293\r\n</span><br></pre></td></tr></table></figure><p>为了方便理解我们用换行把协议分成不同部分，实际上客户端发送的是一个整体没有换行：<code>*2\r\n$4\r\nLLEN\r\n$6\r\nmylist\r\n</code> as a whole.</p><h2 id="10-管道和多个命令"><a href="#10-管道和多个命令" class="headerlink" title="10. 管道和多个命令"></a>10. 管道和多个命令</h2><p>客户端可以使用同一个连接发送多个命令。通过管道客户端可以一次写操作发送多个命令，发送下一个命令前不需要等待前一个命令的应答。所有应答可以在最后被读取。</p><p>关于管道详细参考 <a href="http://www.redis.com.cn/topics/pipelining">page about Pipelining</a>.</p><h2 id="11-内联命令"><a href="#11-内联命令" class="headerlink" title="11. 内联命令"></a>11. 内联命令</h2><p>有时你手边只能操作<code>telnet</code> 并且需要给Redis 服务器端发送命令。虽然Redis协议是容易实现的，但并不适合用在交互会话。<code>redis-cli</code> 也不是随时都能可用。因此，redis还以一种特殊的方式接受为人类设计的命令，称为内联命令格式。</p><p> 以下是使用内联命令进行服务器/客户端聊天的示例（服务器聊天以s开头，客户端聊天以c开头）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C: PING</span><br><span class="line">S: +PONG</span><br></pre></td></tr></table></figure><p>以下是返回整数的内联命令的另一个示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C: EXISTS somekey</span><br><span class="line">S: :0</span><br></pre></td></tr></table></figure><p>基本上，您只需在telnet会话中编写空格分隔的参数。由于统一请求协议中没有以*开头的命令，因此Redis能够检测到这种情况并解析您的命令。</p><h2 id="12-Redis-协议的高性能解析器"><a href="#12-Redis-协议的高性能解析器" class="headerlink" title="12. Redis 协议的高性能解析器"></a>12. Redis 协议的高性能解析器</h2><p>虽然redis协议是非常容易被人阅读和实现的，但是它可以以类似于二进制协议的性能来实现。</p><p>RESP 使用带前缀的长度来传输批量数据，因此不需要像使用json那样扫描有效负载以查找特殊字符，也不需要引用需要发送到服务器的有效负载。</p><p>批量和多批量长度可以使用代码进行处理，代码对每个字符执行单个操作，同时扫描CR字符，如以下C代码：</p><p>RESP 使用带前缀的长度来传输多行数据，因此不需要像使用json那样扫描有效负载以查找特殊字符，也不需要引用需要发送到服务器的有效负载。</p><p>多行和多个多行长度可以使用代码进行处理，代码对每个字符执行单个操作，同时扫描CR字符，如以下C代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *p = <span class="string">&quot;$123\r\n&quot;</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    p++;</span><br><span class="line">    <span class="keyword">while</span>(*p != <span class="string">&#x27;\r&#x27;</span>) &#123;</span><br><span class="line">        len = (len*<span class="number">10</span>)+(*p - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Now p points at &#x27;\r&#x27;, and the len is in bulk_len. */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在识别出第一个CR之后，可以跳过它和下面的LF，而不需要任何处理。然后，可以使用不以任何方式检查有效负载的单个读取操作读取大容量数据。最后，剩余的CR和LF字符将被丢弃，而不进行任何处理。</p><p>Redis协议有着与二进制协议可比的性能，更重要的是易于在大多数高级语言中实现，从而减少了客户端软件中的错误数量。</p><h1 id="Redis键空间通知"><a href="#Redis键空间通知" class="headerlink" title="Redis键空间通知"></a><a id="Redis键空间通知">Redis键空间通知</a></h1><p><strong>重要：</strong>键空间通知功能自2.8.0版本开始可用。</p><h2 id="1-功能概述"><a href="#1-功能概述" class="headerlink" title="1. 功能概述"></a>1. 功能概述</h2><p>键空间通知允许客户端订阅发布/订阅频道，以便以某种方式接收影响Redis数据集的事件。可能接收的事件示例如下：</p><ul><li>所有影响给定键的命令。</li><li>所有接收LPUSH操作的键。</li><li>所有在数据库0中到期的键。</li></ul><p>事件使用Redis的普通发布/订阅层传递，因此实现了发布/订阅的客户端无需修改即可使用此功能。由于Redis的发布/订阅是<em>fire and forget</em>，因此如果你的应用要求<strong>可靠的事件通知</strong>，目前还不能使用这个功能，也就是说，如果你的发布/订阅客户端断开连接，并在稍后重连，那么所有在客户端断开期间发送的事件将会丢失。将来有计划允许更可靠的事件传递，但可能会在更一般的层面上解决，要么为发布/订阅本身带来可靠性，要么允许Lua脚本拦截发布/订阅的消息以执行推送等操作，就像往队列里推送事件一样。</p><h2 id="2-事件类型"><a href="#2-事件类型" class="headerlink" title="2. 事件类型"></a>2. 事件类型</h2><p>键空间通知的实现是为每一个影响Redis数据空间的操作发送两个不同类型的事件。例如，在数据库<code>0</code>中名为<code>mykey</code>的键上执行<code>DEL</code>操作，将触发两条消息的传递，完全等同于下面两个<code>PUBLISH</code>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH __keyspace@0__:mykey del</span><br><span class="line">PUBLISH __keyevent@0__:del mykey</span><br></pre></td></tr></table></figure><p>以上很容易看到，一个频道允许监听所有以键<code>mykey</code>为目标的所有事件，以及另一个频道允许获取有关所有<code>DEL</code>操作目标键的信息。第一种事件，在频道中使用<code>keyspace</code>前缀的被叫做<strong>键空间通知</strong>，第二种，使用<code>keyevent</code>前缀的，被叫做<strong>键事件通知</strong>。在以上例子中，为键<code>mykey</code>生成了一个<code>del</code>事件。 会发生什么：</p><ul><li>键空间频道接收到的消息是事件的名称。</li><li>键事件频道接收到的消息是键的名称。</li></ul><p>可以只启用其中一种通知，以便只传递我们感兴趣的事件子集。</p><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><p>默认情况下，键空间事件通知是不启用的，因为虽然不太明智，但该功能会消耗一些CPU。可以使用redis.conf中的<code>notify-keyspace-events</code>或者使用<strong>CONFIG SET</strong>命令来开启通知。将参数设置为空字符串会禁用通知。 为了开启通知功能，使用了一个非空字符串，由多个字符组成，每一个字符都有其特殊的含义，具体参见下表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">K     键空间事件，以__keyspace@&lt;db&gt;__前缀发布。</span><br><span class="line">E     键事件事件，以__keyevent@&lt;db&gt;__前缀发布。</span><br><span class="line">g     通用命令（非类型特定），如DEL，EXPIRE，RENAME等等</span><br><span class="line">$     字符串命令</span><br><span class="line">l     列表命令</span><br><span class="line">s     集合命令</span><br><span class="line">h     哈希命令</span><br><span class="line">z     有序集合命令</span><br><span class="line">x     过期事件（每次键到期时生成的事件）</span><br><span class="line">e     被驱逐的事件（当一个键由于达到最大内存而被驱逐时产生的事件）</span><br><span class="line">A     g$lshzxe的别名，因此字符串AKE表示所有的事件。</span><br></pre></td></tr></table></figure><p>字符串中应当至少存在<code>K</code>或者<code>E</code>，否则将不会传递事件，不管字符串中其余部分是什么。例如，要为列表开启键空间事件，则配置参数必须设置为<code>Kl</code>，以此类推。字符串<code>KEA</code>可以用于开启所有可能的事件。</p><h2 id="4-不同的命令生成的事件"><a href="#4-不同的命令生成的事件" class="headerlink" title="4. 不同的命令生成的事件"></a>4. 不同的命令生成的事件</h2><p>根据以下列表，不同的命令产生不同种类的事件。</p><ul><li><code>DEL</code>命令为每一个删除的key生成一个<code>del</code>事件。</li><li><code>RENAME</code>生成两个事件，一个是为源key生成的<code>rename_from</code>事件，一个是为目标key生成的<code>rename_to</code>事件。</li><li><code>EXPIRE</code>在给一个键设置有效期时，会生成一个<code>expire</code>事件，或者每当设置有效期导致键被删除时，生成<code>expired</code>事件（请查阅<code>EXPIRE</code>文档以获取更多信息）。</li><li><code>SORT</code>会在使用<code>STORE</code>选项将结果存储到新键时，生成一个<code>sortstore</code>事件。如果结果列表为空，且使用了<code>STORE</code>选项，并且已经存在具有该名称的键时，那个键将被删除，因此在这种场景下会生成一个<code>del</code>事件。</li><li><code>SET</code>以及所有其变种（<a href="https://redis.com.cn/commands/setex.html">SETEX</a>，<a href="https://redis.com.cn/commands/setnx.html">SETNX</a>，<a href="https://redis.com.cn/commands/getset.html">GETSET</a>）生成<code>set</code>事件。但是<code>SETEX</code>还会生成一个<code>expire</code>事件。</li><li><code>MSET</code>为每一个key生成一个<code>set</code>事件。</li><li><code>SETRANGE</code>生成一个<code>setrange</code>事件。</li><li><a href="https://redis.com.cn/commands/incr.html">INCR</a>、<a href="https://redis.com.cn/commands/decr.html">DECR</a>、<a href="https://redis.com.cn/commands/incrby.html">INCRBY</a>、<code>DECRBY</code>命令都生成<code>incrby</code>事件。</li><li><code>INCRBYFLOAT</code>生成一个<code>incrbyfloat</code>事件。</li><li><code>APPEND</code>生成一个<code>append</code>事件。</li><li><code>LPUSH</code>和<code>LPUSHX</code>生成一个<code>lpush</code>事件，即使在可变参数情况下也是如此。</li><li><code>RPUSH</code>和<code>RPUSHX</code>生成一个<code>rpush</code>事件，即使在可变参数情况下也是如此。</li><li><code>RPOP</code>生成<code>rpop</code>事件。此外，如果键由于列表中的最后一个元素弹出而被删除，则会生成一个<code>del</code>事件。</li><li><code>LPOP</code>生成<code>lpop</code>事件。此外，如果键由于列表中的最后一个元素弹出而被删除，则会生成一个<code>del</code>事件。</li><li><code>LINSERT</code>生成一个<code>linsert</code>事件。</li><li><code>LSET</code>生成一个<code>lset</code>事件。</li><li><code>LTRIM</code>生成<code>ltrim</code>事件，此外，如果结果列表为空或者键被移除，将会生成一个<code>del</code>事件。</li><li><code>RPOPLPUSH</code>和<code>BRPOPLPUSH</code>生成<code>rpop</code>事件和<code>lpush</code>事件。这两种情况下，顺序都将得到保证（<code>lpush</code>事件将总是在<code>rpop</code>事件之后传递）。此外，如果结果列表长度为零且键被删除，则会生成一个<code>del</code>事件。</li><li><a href="https://redis.com.cn/commands/hset.html">HSET</a>、<code>HSETNX</code>以及<code>HMSET</code>都生成一个<code>hset</code>事件。</li><li><code>HINCRBY</code>生成一个<code>hincrby</code>事件。</li><li><code>HINCRBYFLOAT</code>生成一个<code>hincrbyfloat</code>事件。</li><li><code>HDEL</code>生成一个<code>hdel</code>事件，此外，如果结果哈希集为空或者键被移除，将生成一个<code>del</code>事件。</li><li><code>SADD</code>生成一个<code>sadd</code>事件，即使在可变参数情况下也是如此。</li><li><code>SREM</code>生成一个<code>srem</code>事件，此外，如果结果集合为空或者键被移除，将生成一个<code>del</code>事件。</li><li><code>SMOVE</code>为每一个源key生成一个<code>srem</code>事件，以及为每一个目标key生成一个<code>sadd</code>事件。</li><li><code>SPOP</code>生成一个<code>spop</code>事件，此外，如果结果集合为空或者键被移除，将生成一个<code>del</code>事件。</li><li><a href="https://redis.com.cn/commands/sinterstore.html">SINTERSTORE</a>、<a href="https://redis.com.cn/commands/sunionstore.html">SUNIONSTORE</a>、<code>SDIFFSTORE</code>分别生成<code>sinterstore</code>、<code>sunionostore</code>、<code>sdiffstore</code>事件。在特殊情况下，结果集是空的，并且存储结果的键已经存在，因为删除了键，所以会生成<code>del</code>事件。</li><li><code>ZINCR</code>生成一个<code>zincr</code>事件。</li><li><code>ZADD</code>生成一个<code>zadd</code>事件，即使添加了多个元素。</li><li><code>ZREM</code>生成一个<code>zrem</code>事件，即使删除了多个元素。当结果有序集合为空且生成了键，则会生成额外的<code>del</code>事件。</li><li><code>ZREMBYSCORE</code>生成一个<code>zrembyscore</code>事件。当结果有序集合为空且生成了键，则会生成额外的<code>del</code>事件。</li><li><code>ZREMBYRANK</code>生成一个<code>zrembyrank</code>事件。当结果有序集合为空且生成了键，则会生成额外的<code>del</code>事件。</li><li><code>ZINTERSTORE</code>和<code>ZUNIONSTORE</code>分别生成<code>zinterstore</code>和<code>zunionstore</code>事件。在特殊情况下，结果有序集合是空的，并且存储结果的键已经存在，因为删除了键，所以会生成<code>del</code>事件。</li><li>每次一个拥有过期时间的键由于过期而从数据集中移除时，将生成一个<code>expired</code>事件。</li><li>每次一个键由于<code>maxmemory</code>策略而被从数据集中驱逐，以便释放内存时，将生成一个<code>evicted</code>事件。</li></ul><p><strong>重要</strong> 所有命令仅在真正修改目标键时才生成事件。例如，使用<code>SREM</code>命令从集合中删除一个不存在的元素将不会改变键的值，因此不会生成任何事件。如果对某个命令如何生成事件有疑问，最简单的方法是自己观察：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli config set notify-keyspace-events KEA</span><br><span class="line">$ redis-cli --csv psubscribe &#x27;__key*__:*&#x27;</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">&quot;psubscribe&quot;,&quot;__key*__:*&quot;,1</span><br></pre></td></tr></table></figure><p>此时，在另外一个终端使用<code>redis-cli</code>发送命令到Redis服务器，并观察生成的事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;pmessage&quot;,&quot;__key*__:*&quot;,&quot;__keyspace@0__:foo&quot;,&quot;set&quot;</span><br><span class="line">&quot;pmessage&quot;,&quot;__key*__:*&quot;,&quot;__keyevent@0__:set&quot;,&quot;foo&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="5-过期事件的时间安排"><a href="#5-过期事件的时间安排" class="headerlink" title="5. 过期事件的时间安排"></a>5. 过期事件的时间安排</h2><p>设置了生存时间的键由Redis以两种方式过期：</p><ul><li>当命令访问键时，发现键已过期。</li><li>通过后台系统在后台逐步查找过期的键，以便能够收集那些从未被访问的键。</li></ul><p>当通过以上系统之一访问键且发现键已经过期时，将生成<code>expired</code>事件。因此无法保证Redis服务器在键过期的那一刻同时生成<code>expired</code>事件。如果没有命令不断地访问键，并且有很多键都有关联的TTL，那么在键的生存时间降至零到生成<code>expired</code>事件之间，将会有明显的延迟。基本上，<strong><code>expired</code>事件是在Redis服务器删除键的时候生成的</strong>，而不是在理论上生存时间达到零值时生成的。</p><h1 id="Redis复制"><a href="#Redis复制" class="headerlink" title="Redis复制"></a><a id="Redis复制">Redis复制</a></h1><p>在 Redis 复制的基础上，使用和配置主从复制非常简单，能使得从 Redis 服务器（下文称 slave）能精确得复制主 Redis 服务器（下文称 master）的内容。每次当 slave 和 master 之间的连接断开时， slave 会自动重连到 master 上，并且无论这期间 master 发生了什么， slave 都将尝试让自身成为 master 的精确副本。</p><p>这个系统的运行依靠三个主要的机制：</p><ul><li>当一个 master 实例和一个 slave 实例连接正常时， master 会发送一连串的命令流来保持对 slave 的更新，以便于将自身数据集的改变复制给 slave ， ：包括客户端的写入、key 的过期或被逐出等等。</li><li>当 master 和 slave 之间的连接断开之后，因为网络问题、或者是主从意识到连接超时， slave 重新连接上 master 并会尝试进行部分重同步：这意味着它会尝试只获取在断开连接期间内丢失的命令流。</li><li>当无法进行部分重同步时， slave 会请求进行全量重同步。这会涉及到一个更复杂的过程，例如 master 需要创建所有数据的快照，将之发送给 slave ，之后在数据集更改时持续发送命令流到 slave 。</li></ul><p>Redis使用默认的异步复制，其特点是低延迟和高性能，是绝大多数 Redis 用例的自然复制模式。但是，从 Redis 服务器会异步地确认其从主 Redis 服务器周期接收到的数据量。</p><p>客户端可以使用 <a href="http://www.redis.com.cn/commands/wait">WAIT</a> 命令来请求同步复制某些特定的数据。但是，WAIT 命令只能确保在其他 Redis 实例中有指定数量的已确认的副本：在故障转移期间，由于不同原因的故障转移或是由于 Redis 持久性的实际配置，故障转移期间确认的写入操作可能仍然会丢失。你可以查看 Sentinel 或 Redis 集群文档，了解关于高可用性和故障转移的更多信息。本文的其余部分主要描述 Redis 基本复制功能的基本特性。</p><p>接下来的是一些关于 Redis 复制的非常重要的事实：</p><ul><li>Redis 使用异步复制，slave 和 master 之间异步地确认处理的数据量</li><li>一个 master 可以拥有多个 slave</li><li>slave 可以接受其他 slave 的连接。除了多个 slave 可以连接到同一个 master 之外， slave 之间也可以像层叠状的结构（cascading-like structure）连接到其他 slave 。自 Redis 4.0 起，所有的 sub-slave 将会从 master 收到完全一样的复制流。</li><li>Redis 复制在 master 侧是非阻塞的。这意味着 master 在一个或多个 slave 进行初次同步或者是部分重同步时，可以继续处理查询请求。</li><li>复制在 slave 侧大部分也是非阻塞的。当 slave 进行初次同步时，它可以使用旧数据集处理查询请求，假设你在 redis.conf 中配置了让 Redis 这样做的话。否则，你可以配置如果复制流断开， Redis slave 会返回一个 error 给客户端。但是，在初次同步之后，旧数据集必须被删除，同时加载新的数据集。 slave 在这个短暂的时间窗口内（如果数据集很大，会持续较长时间），会阻塞到来的连接请求。自 Redis 4.0 开始，可以配置 Redis 使删除旧数据集的操作在另一个不同的线程中进行，但是，加载新数据集的操作依然需要在主线程中进行并且会阻塞 slave 。</li><li>复制既可以被用在可伸缩性，以便只读查询可以有多个 slave 进行（例如 O(N) 复杂度的慢操作可以被下放到 slave ），或者仅用于数据安全。</li><li>可以使用复制来避免 master 将全部数据集写入磁盘造成的开销：一种典型的技术是配置你的 master Redis.conf 以避免对磁盘进行持久化，然后连接一个 slave ，其配置为不定期保存或是启用 AOF。但是，这个设置必须小心处理，因为重新启动的 master 程序将从一个空数据集开始：如果一个 slave 试图与它同步，那么这个 slave 也会被清空。</li></ul><h2 id="1-当-master-关闭持久化时，复制的安全性"><a href="#1-当-master-关闭持久化时，复制的安全性" class="headerlink" title="1. 当 master 关闭持久化时，复制的安全性"></a>1. 当 master 关闭持久化时，复制的安全性</h2><p>在使用 Redis 复制功能时的设置中，强烈建议在 master 和在 slave 中启用持久化。当不可能启用时，例如由于非常慢的磁盘性能而导致的延迟问题，<strong>应该配置实例来避免重置后自动重启</strong>。</p><p>为了更好地理解为什么关闭了持久化并配置了自动重启的 master 是危险的，检查以下故障模式，这些故障模式中数据会从 master 和所有 slave 中被删除：</p><ol><li>我们设置节点 A 为 master 并关闭它的持久化设置，节点 B 和 C 从 节点 A 复制数据。</li><li>节点 A 崩溃，但是他有一些自动重启的系统可以重启进程。但是由于持久化被关闭了，节点重启后其数据集合为空。</li><li>节点 B 和 节点 C 会从节点 A 复制数据，但是节点 A 的数据集是空的，因此复制的结果是它们会销毁自身之前的数据副本。</li></ol><p>当 Redis Sentinel 被用于高可用并且 master 关闭持久化，这时如果允许自动重启进程也是很危险的。例如， master 可以重启的足够快以致于 Sentinel 没有探测到故障，因此上述的故障模式也会发生。</p><p>任何时候数据安全性都是很重要的，所以如果 master 使用复制功能的同时未配置持久化，那么自动重启进程这项应该被禁用。</p><h2 id="2-Redis-复制功能是如何工作的"><a href="#2-Redis-复制功能是如何工作的" class="headerlink" title="2. Redis 复制功能是如何工作的"></a>2. Redis 复制功能是如何工作的</h2><p>每一个 Redis master 都有一个 replication ID ：这是一个较大的伪随机字符串，标记了一个给定的数据集。每个 master 也持有一个偏移量，master 将自己产生的复制流发送给 slave 时，发送多少个字节的数据，自身的偏移量就会增加多少，目的是当有新的操作修改自己的数据集时，它可以以此更新 slave 的状态。复制偏移量即使在没有一个 slave 连接到 master 时，也会自增，所以基本上每一对给定的</p><blockquote><p>Replication ID, offset</p></blockquote><p>都会标识一个 master 数据集的确切版本。</p><p>当 slave 连接到 master 时，它们使用 PSYNC 命令来发送它们记录的旧的 master replication ID 和它们至今为止处理的偏移量。通过这种方式， master 能够仅发送 slave 所需的增量部分。但是如果 master 的缓冲区中没有足够的命令积压缓冲记录，或者如果 slave 引用了不再知道的历史记录（replication ID），则会转而进行一个全量重同步：在这种情况下， slave 会得到一个完整的数据集副本，从头开始。</p><p>下面是一个全量同步的工作细节：</p><p>master 开启一个后台保存进程，以便于生产一个 RDB 文件。同时它开始缓冲所有从客户端接收到的新的写入命令。当后台保存完成时， master 将数据集文件传输给 slave， slave将之保存在磁盘上，然后加载文件到内存。再然后 master 会发送所有缓冲的命令发给 slave。这个过程以指令流的形式完成并且和 Redis 协议本身的格式相同。</p><p>你可以用 telnet 自己进行尝试。在服务器正在做一些工作的同时连接到 Redis 端口并发出 <a href="http://www.redis.com.cn/commands/sync">SYNC</a> 命令。你将会看到一个批量传输，并且之后每一个 master 接收到的命令都将在 telnet 回话中被重新发出。事实上 SYNC 是一个旧协议，在新的 Redis 实例中已经不再被使用，但是其仍然向后兼容：但它不允许部分重同步，所以现在 <strong>PSYNC</strong> 被用来替代 SYNC。</p><p>之前说过，当主从之间的连接因为一些原因崩溃之后， slave 能够自动重连。如果 master 收到了多个 slave 要求同步的请求，它会执行一个单独的后台保存，以便于为多个 slave 服务。</p><h2 id="3-无需磁盘参与的复制"><a href="#3-无需磁盘参与的复制" class="headerlink" title="3. 无需磁盘参与的复制"></a>3. 无需磁盘参与的复制</h2><p>正常情况下，一个全量重同步要求在磁盘上创建一个 RDB 文件，然后将它从磁盘加载进内存，然后 slave以此进行数据同步。</p><p>如果磁盘性能很低的话，这对 master 是一个压力很大的操作。Redis 2.8.18 是第一个支持无磁盘复制的版本。在此设置中，子进程直接发送 RDB 文件给 slave，无需使用磁盘作为中间储存介质。</p><h2 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h2><p>配置基本的 Redis 复制功能是很简单的：只需要将以下内容加进 slave 的配置文件：</p><blockquote><p>slaveof 192.168.1.1 6379</p></blockquote><p>当然你需要用你自己的 master IP 地址（或者主机名）和端口替换掉 192.168.1.1 6379。另一种方法，你也可以使用 <a href="http://www.redis.com.cn/commands/slaveof">SLAVEOF</a> 命令， master 会开启一个跟 slave 间的同步。</p><p>还有一些参数用于调节内存中保存的缓冲积压部分（replication backlog），以便执行部分重同步。详见 redis.conf 和 Redis Distribution 了解更多信息。</p><p>无磁盘复制可以使用 repl-diskless-sync 配置参数。repl-diskless-sync-delay 参数可以延迟启动数据传输，目的可以在第一个 slave就绪后，等待更多的 slave就绪。可以在 Redis Distribution 例子中的 redis.conf 中看到更多细节信息。</p><h2 id="5-只读性质的-slave"><a href="#5-只读性质的-slave" class="headerlink" title="5. 只读性质的 slave"></a>5. 只读性质的 slave</h2><p>自从 Redis 2.6 之后， slave 支持只读模式且默认开启。redis.conf 文件中的 slave-read-only 变量控制这个行为，且可以在运行时使用 <a href="http://www.redis.com.cn/commands/config-set">CONFIG SET</a> 来随时开启或者关闭。</p><p>只读模式下的 slave 将会拒绝所有写入命令，因此实践中不可能由于某种出错而将数据写入 slave 。但这并不意味着该特性旨在将一个 slave 实例暴露到 Internet ，或者更广泛地说，将之暴露在存在不可信客户端的网络，因为像 <strong>DEBUG</strong> 或者 <strong>CONFIG</strong> 这样的管理员命令仍在启用。但是，在 redis.conf 文件中使用 rename-command 指令可以禁用上述管理员命令以提高只读实例的安全性。</p><p>您也许想知道为什么可以还原只读设置，并有可以通过写入操作来设置 slave 实例。如果 slave 跟 master 在同步或者 slave 在重启，那么这些写操作将会无效，但是将短暂数据存储在 writable slave 中还是有一些合理的用例的。</p><p>例如，计算 slow Set 或者 Sorted Set 的操作并将它们存储在本地 key 中是多次观察到的使用 writable slave 的用例。</p><p>但是注意，4.0 版本之前的 writable slaves 不能用生存时间来淘汰 key 。这意味着，如果你使用 <a href="http://www.redis.com.cn/commands/expire">EXPIRE</a> 或者其他命令为 key 设置了最大 TTL 的话，你将会在键值计数（count of keys）中看到这个 key ，并且它还在内存中。所以总的来说，将 writable slaves 和设置过 TTL 的 key 混用将会导致问题。</p><p>Redis 4.0 RC3 及更高版本彻底解决了这个问题，现在 writable slaves 能够像 master 一样驱逐 TTL 设置过的 key 了，但 DB 编号大于 63（但默认情况下，Redis实例只有16个数据库）的 key 除外。</p><p>另请注意，由于 Redis 4.0 writable slaves 仅能本地，并且不会将数据传播到与该实例相连的 sub-slave 上。sub-slave 将总是接收与最顶层 master 向 intermediate slaves 发送的复制流相同的复制流。所以例如在以下设置中：</p><blockquote><p>A —-&gt; B ——&gt; C</p></blockquote><p>及时节点 B 是可写的，C 也不会看到 B 的写入，而是将拥有和 master 实例 A 相同的数据集。</p><h2 id="6-设置一个-slave-对-master-进行验证"><a href="#6-设置一个-slave-对-master-进行验证" class="headerlink" title="6. 设置一个 slave 对 master 进行验证"></a>6. 设置一个 slave 对 master 进行验证</h2><p>如果你的 master 通过 requirepass 设置了密码，则在所有同步操作中配置 slave 使用该密码是很简单的。</p><p>要在正在运行的实例上执行此操作，请使用 redis-cli 并输入：</p><blockquote><p>config set masterauth <password></p></blockquote><p>要永久设置的话，请将其添加到您的配置文件中：</p><blockquote><p>masterauth <password></p></blockquote><h2 id="7-允许只写入-N-个附加的副本"><a href="#7-允许只写入-N-个附加的副本" class="headerlink" title="7. 允许只写入 N 个附加的副本"></a>7. 允许只写入 N 个附加的副本</h2><p>从Redis 2.8开始，只有当至少有 N 个 slave 连接到 master 时，才有可能配置 Redis master 接受写查询。</p><p>但是，由于 Redis 使用异步复制，因此无法确保 slave 是否实际接收到给定的写命令，因此总会有一个数据丢失窗口。</p><p>以下是该特性的工作原理：</p><ul><li>Redis slave 每秒钟都会 ping master，确认已处理的复制流的数量。</li><li>Redis master 会记得上一次从每个 slave 都收到 ping 的时间。</li><li>用户可以配置一个最小的 slave 数量，使得它滞后 &lt;= 最大秒数。</li></ul><p>如果至少有 N 个 slave ，并且滞后小于 M 秒，则写入将被接受。</p><p>你可能认为这是一个尽力而为的数据安全机制，对于给定的写入来说，不能保证一致性，但至少数据丢失的时间窗限制在给定的秒数内。一般来说，绑定的数据丢失比不绑定的更好。</p><p>如果条件不满足，master 将会回复一个 error 并且写入将不被接受。</p><p>这个特性有两个配置参数：</p><ul><li>min-slaves-to-write <slave 数量></li><li>min-slaves-max-lag &lt;秒数&gt;</li></ul><p>有关更多信息，请查看随 Redis 源代码发行版一起提供的示例 redis.conf 文件。</p><h2 id="8-Redis-复制如何处理-key-的过期"><a href="#8-Redis-复制如何处理-key-的过期" class="headerlink" title="8. Redis 复制如何处理 key 的过期"></a>8. Redis 复制如何处理 key 的过期</h2><p>Redis 的过期机制可以限制 key 的生存时间。此功能取决于 Redis 实例计算时间的能力，但是，即使使用 Lua 脚本更改了这些 key，Redis slaves 也能正确地复制具有过期时间的 key。</p><p>为了实现这样的功能，Redis 不能依靠主从使用同步时钟，因为这是一个无法解决的并且会导致 race condition 和数据集不一致的问题，所以 Redis 使用三种主要的技术使过期的 key 的复制能够正确工作：</p><ul><li>slave 不会让 key 过期，而是等待 master 让 key 过期。当一个 master 让一个 key 到期（或由于 LRU 算法将之驱逐）时，它会合成一个 DEL 命令并传输到所有的 slave。</li><li>但是，由于这是 master 驱动的 key 过期行为，master 无法及时提供 DEL 命令，所以有时候 slave 的内存中仍然可能存在在逻辑上已经过期的 key 。为了处理这个问题，slave 使用它的逻辑时钟以报告只有在不违反数据集的一致性的读取操作（从主机的新命令到达）中才存在 key。用这种方法，slave 避免报告逻辑过期的 key 仍然存在。在实际应用中，使用 slave 程序进行缩放的 HTML 碎片缓存，将避免返回已经比期望的时间更早的数据项。</li><li>在Lua脚本执行期间，不执行任何 key 过期操作。当一个Lua脚本运行时，从概念上讲，master 中的时间是被冻结的，这样脚本运行的时候，一个给定的键要么存在要么不存在。这可以防止 key 在脚本中间过期，保证将相同的脚本发送到 slave ，从而在二者的数据集中产生相同的效果。</li></ul><p>一旦一个 slave 被提升为一个 master ，它将开始独立地过期 key，而不需要任何旧 master 的帮助。</p><h2 id="9-在-Docker-和-NAT-中配置复制"><a href="#9-在-Docker-和-NAT-中配置复制" class="headerlink" title="9. 在 Docker 和 NAT 中配置复制"></a>9. 在 Docker 和 NAT 中配置复制</h2><p>当使用 Docker 或其他类型的容器使用端口转发或网络地址转换时，Redis 复制需要特别小心，特别是在使用 Redis Sentinel 或其他系统（其中扫描 master INFO 或 ROLE 命令的输出情况以便于发现 slave 地址的）。</p><p>问题是 ROLE 命令和 INFO 输出的复制部分在发布到 master 实例中时，将显示 slave 具有的用于连接到 master 的 IP 地址，而在使用 NAT 的环境中，和 slave 实例的逻辑地址（客户机用来连接 slave 的地址）相比较可能会不同。</p><p>类似地，slaves 将以 redis.conf 文件中监听的端口为序列出，在重新映射端口的情况下，该端口可能与转发的端口不同。</p><p>为了解决这两个问题，从 Redis 3.2.2 开始，可以强制一个 slave 向 master 通告一对任意的 IP 和端口。使用的两个配置指令是：</p><blockquote><p>slave-announce-ip 5.5.5.5</p><p>slave-announce-port 1234</p></blockquote><p>在近期 Redis distributions 中的 redis.conf 的样例中可以找到记录。</p><h2 id="10-INFO-和-ROLE-命令"><a href="#10-INFO-和-ROLE-命令" class="headerlink" title="10. INFO 和 ROLE 命令"></a>10. INFO 和 ROLE 命令</h2><p>有两个 Redis 命令可以提供有关主从实例当前复制参数的很多信息。一个是INFO。如果使用复制参数像 INFO replication 调用该命令，，则只显示与复制相关的信息。另一个更加 computer-friendly 的命令是 ROLE，它提供 master 和 slave 的复制状态以及它们的复制偏移量，连接的 slaves 列表等等。</p><h2 id="11-重新启动和故障转移后的部分重同步"><a href="#11-重新启动和故障转移后的部分重同步" class="headerlink" title="11. 重新启动和故障转移后的部分重同步"></a>11. 重新启动和故障转移后的部分重同步</h2><p>从 Redis 4.0 开始，当一个实例在故障转移后被提升为 master 时，它仍然能够与旧 master 的 slaves 进行部分重同步。为此，slave 会记住旧 master 的旧 replication ID 和复制偏移量，因此即使询问旧的 replication ID，其也可以将部分复制缓冲提供给连接的 slave 。</p><p>但是，升级的 slave 的新 replication ID 将不同，因为它构成了数据集的不同历史记录。例如，master 可以返回可用，并且可以在一段时间内继续接受写入命令，因此在被提升的 slave 中使用相同的 replication ID 将违反一对复制标识和偏移对只能标识单一数据集的规则。</p><p>另外，slave 在关机并重新启动后，能够在 RDB 文件中存储所需信息，以便与 master 进行重同步。这在升级的情况下很有用。当需要时，最好使用 SHUTDOWN 命令来执行 slave 的保存和退出操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div align=&quot;center&quot;&gt;
  &lt;font size=&#39;60&#39;&gt;Redis教程&lt;/font&gt;&lt;br&gt;
  &lt;font size=&#39;3&#39;&gt;
    &lt;B&gt;Author: &lt;/B&gt;&lt;a href=&quot;https://kungs8.github.io&quot;&gt;yanpenggon</summary>
      
    
    
    
    <category term="Redis" scheme="http://example.com/categories/Redis/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用Github搭建图床</title>
    <link href="http://example.com/2022/04/20/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <id>http://example.com/2022/04/20/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</id>
    <published>2022-04-20T09:13:48.000Z</published>
    <updated>2022-04-20T09:15:14.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center">  <font size='60'>使用Github搭建图床</font><br>  <font size='3'>    <B>Author: </B><a href="https://blog.csdn.net/yanpenggong">yanpenggong</a>&#x3000;&#x3000;&#x3000;&#x3000;&#x3000;&#x3000;    <B>Email: </B><a href="yanpenggong@163.com">yanpenggong@163.com</a><br>    <B>Github: </B><a href="https://github.com/kungs8">kungs8</a>    &#x3000;&#x3000;&#x3000;&#x3000;    <B>CSDN: </B><a href="https://blog.csdn.net/yanpenggong">https://blog.csdn.net/yanpenggong</a>  </font></div><p>[TOC]</p><h1 id="一、图床简介"><a href="#一、图床简介" class="headerlink" title="一、图床简介"></a>一、图床简介</h1><p>程序员应该都了解 Typora 是专注于编写 Markdown 格式的编辑软件，使用方便，支持多种格式导出。</p><p>PicGo 是一款免费的图床管理应用，支持拖拽上传，剪切板上传等方式。你可以用它快捷地将图片上传到图床并获得网络链接。</p><p>注意：请不要把 PicGo 安装到 C 盘 Program Files 下</p><h2 id="1-什么是图床"><a href="#1-什么是图床" class="headerlink" title="1. 什么是图床"></a>1. 什么是图床</h2><p>对于写博客的朋友们来讲，图床这个东西一定不会陌生，而且在一定程度上也给大家造成过一定困扰。</p><p>对于不清楚这个东西的朋友，我就在这儿大概说一下图床是个啥东西。所谓图床，其实可以就相当于我们手机上的相册，不过他是在线的，而且是对大家开放的，大家都可以访问查看，但是编辑删除这些功能仅限于拥有者，就相当于用百度云分享的公开照片，你可以查看，也可以下载下来编辑，但是拥有权还是属于分享者。</p><p>那你可能会疑惑，那这个东西和写博客的我们有啥关系呢？</p><p>你想想，我们写博客，是不是有很多图片需要插入，我们这些博客要保留在本地的时候你可以预览到图片，但一旦你要把它发布到网上，这时候问题来了！发现图片上传失败，那是因为你本地的图片都是存在本地的，平台不会自动给你上传，那这个时候就凸显出图床的重要性了。当然了，如果你是直接在平台进行编辑，那着一点就不用担心了，基本平台都会自动给你上传到它自己的服务器。<br>有了图床，我们在本地写好博客之后，就能够任意复制到其他平台，不用担心图片丢失问题了。</p><p>今天的文章就是给大家分享一个搭建免费图床的教程，既是方便自己后续的复习，也希望对大家也有所帮助。</p><h2 id="2-个人需要搭建自己图床的需求"><a href="#2-个人需要搭建自己图床的需求" class="headerlink" title="2. 个人需要搭建自己图床的需求"></a>2. 个人需要搭建自己图床的需求</h2><p>Markdown 可以理解为增强版的文本文档，语法简单，支持更多的风格样式，相比 word 更加轻便，文件大小更小，同时可导出为指定格式，目前大多是技术博客论坛已支持 Markdown 格式，基本上可以做到一次编写多处使用。当然 Markdown 也存在缺点，比如图片。</p><p>Markdown 文档编写时可使用本地图片，但是无法在网络上使用。图床的作用可以理解为将文档中的图片放到网络上，直接引用网络地址，这样可以做到无论在那个平台都可以使用统一的图片地址。</p><h2 id="3-个人搭建的图床必须具备的特性"><a href="#3-个人搭建的图床必须具备的特性" class="headerlink" title="3. 个人搭建的图床必须具备的特性"></a>3. 个人搭建的图床必须具备的特性</h2><p>存储的图片数据必须要安全存储；</p><p>访问速度要快；</p><p>尽可能是免费的，如果是收费，希望便宜些；</p><p>可以批量导出图片数据等……</p><h2 id="4-PicGo可以使用的图床"><a href="#4-PicGo可以使用的图床" class="headerlink" title="4. PicGo可以使用的图床"></a>4. PicGo可以使用的图床</h2><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_01.png" style="zoom:50%;" /></p><p>感觉比较靠谱的图床：</p><p>阿里云OSS、腾讯云COS、七牛图床、Github图床……</p><h2 id="5-github作为图床的优点"><a href="#5-github作为图床的优点" class="headerlink" title="5. github作为图床的优点"></a>5. github作为图床的优点</h2><ul><li><p>每一个 IT 人都会具备一个github账号，因此用其做为自己的图床很好。</p></li><li><p>虽然github打开会比较慢，但是用了cdn加速后，效果是非常ok的，高级。</p></li><li><p>使用gitbub作为图床可以进一步熟悉 github 和 git。</p></li></ul><h1 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h1><p>一个 Github 账号</p><h1 id="三、搭建过程"><a href="#三、搭建过程" class="headerlink" title="三、搭建过程"></a>三、搭建过程</h1><h2 id="1-登录github并创建仓库"><a href="#1-登录github并创建仓库" class="headerlink" title="1. 登录github并创建仓库"></a>1. 登录github并创建仓库</h2><p>登录自己的 Github并创建一个新的仓库：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_02.png" style="zoom:50%;" /></p><h2 id="2-填写仓库信息"><a href="#2-填写仓库信息" class="headerlink" title="2. 填写仓库信息"></a>2. 填写仓库信息</h2><p>填写仓库相关信息，一般只需要选一个合适的仓库名，然后确保仓库为 <code>public</code> 其他的保持默认就好；</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_03.png" style="zoom:50%;" /></p><p>自己本次填写信息：<code>blog_imgs</code></p><h2 id="3-查看创建好的仓库"><a href="#3-查看创建好的仓库" class="headerlink" title="3. 查看创建好的仓库"></a>3. 查看创建好的仓库</h2><p>一般创建成功之后，会出现如下界面，至此，我们的图床算是创建好了，接下来就是如何上传图片了；</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_04.png" style="zoom:50%;" /></p><h2 id="4-上传图片-配置-PicGo"><a href="#4-上传图片-配置-PicGo" class="headerlink" title="4. 上传图片(配置 PicGo )"></a>4. 上传图片(配置 PicGo )</h2><p>通过上面的步骤，我们的图床时搭建好了，但是通过传统的方法向 Github 上传图片太麻烦了，这里我们推荐使用一个开源图床工具 <a href="https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%3A%2F%2Fmolunerfinn.com%2FPicGo%2F">PicGo</a> 来作为我们的图片上传工具；</p><p>PicGo 的安装就不说了，去 <a href="https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%3A%2F%2Fmolunerfinn.com%2FPicGo%2F">官网</a> 下载对应版本进行安装即可，我们主要讲讲如何用它来上传图片。安装后，打开软件其主页面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_05.png" style="zoom:50%;" /></p><p>接下来就是配置 PicGo 的过程了。</p><ol><li><p><strong>先要去 Github 创建一个 token</strong></p><p>依次打开 <code>Settings -&gt; Developer settings -&gt; Personal access tokens</code>，最后点击 <code>generate new token</code></p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_41.png" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_42.png" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_43.png" style="zoom:50%;" /></p></li><li><p><strong>填写及勾选相关信息，然后点击 <code>Genetate token</code> 即可</strong></p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_44.png" style="zoom:50%;" /></p><p>==这里注意下：==</p><p>默认这个token有效期为30天，我们为了稳定性起见，可以直接改为<code>no expiration</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_45.png" style="zoom:50%;" /></p></li><li><p><strong><code>token</code> 生成</strong></p><p>注意它只会显示一次，所以你最好把它复制下来到你的备忘录存好，方便下次使用，否则下次有需要重新新建</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_46.png" style="zoom:50%;" /></p></li><li><p><strong>配置 PicGo，依次打开 图床设置 -&gt; Github 图床</strong></p><p>填写相关信息，最后点击 <code>确定</code>即可，要将其作为默认图床的话，点击设为默认图床；</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_47.png" style="zoom:50%;" /></p></li><li><p><strong>上传图片</strong></p><p>通过上传区上传即可（Ctrl V 或者将图片拖拽都可以），也可以通过快捷键的方式上传（默认上传键为 <code>Ctrl + Shift + P</code>）</p><p>首先这里我没有打开科学上网，观察下图片上传速度和在线查看md文件时图片的显示速度；</p><p>这里通过typora里配置了picgo，进行测试下效果：</p><p>查看typora配置的参数：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_48.png" style="zoom:50%;" /></p><p>点击严重突破上传选项，可以测试是否上传成功。</p><p>直接在 Typora 中粘贴图片后，再右击进行上传图片。上传完成，我们发现图像的路径变成 url 链接了。</p></li></ol><h2 id="5-加速访问"><a href="#5-加速访问" class="headerlink" title="5. 加速访问"></a>5. 加速访问</h2><p>大家可能会发现，我们上传到 Github 的图片有时候访问太慢了，有时候甚至直接加载不出来！那该咋办呢？<br>这时候我们就可以用 jsDelivr 进行免费加速，而设置的方法也很简单，只需要在我们 PicGo 图床配置中添加如下自定义域名即可；<br><a href="https://cdn.jsdelivr.net/gh/用户名/仓库名">https://cdn.jsdelivr.net/gh/用户名/仓库名</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.jsdelivr.com/?docs=gh</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_49.png" style="zoom:50%;" /></p><p><strong>比如我的就是: <code>https://cdn.jsdelivr.net/gh/kungs8/blog_imgs</code></strong></p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_50.png" style="zoom:50%;" /></p><p>现在我们再次测试下效果：</p><p>测试粘贴到typora里图片的上传速度、打开md文档时图片的显示速度：</p><p>此时本地 无科学上网：</p><p>=测试：上传 可能会耗时3-4s，但在其他终端打开md文档，里面图片的展示时间几乎是0ms，效果很不错；</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A_imgs_51.png" style="zoom:50%;" /></p><h2 id="6-图床推荐"><a href="#6-图床推荐" class="headerlink" title="6. 图床推荐"></a>6. 图床推荐</h2><p>除开用 Github 搭建的方式之后，我们也可以用 Gitee 进行搭建，搭建方式和本文大致相同。此外，我也推荐几个免费的图床给大家，大家可以根据自己的喜好进行选择；</p><ul><li><p><a href="https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%3A%2F%2Fimgchr.com%2F">路过图床</a></p></li><li><p><a href="https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%3A%2F%2Fsm.ms%2F">SM.MS</a></p></li><li><p><a href="https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttps%3A%2F%2Fimgur.com%2F">Imgur</a></p></li></ul><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 准备一个 Github 账号；</span><br><span class="line">2. 搭建图床仓库；</span><br><span class="line">3. 上传图片设置；</span><br><span class="line">4. 加速访问；</span><br><span class="line">5. 免费图床推荐；</span><br></pre></td></tr></table></figure><h1 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h1><ol><li><p><strong>禁止上传私密信息</strong></p><p>使用github作为自己的云笔记图床时，切记图片上不能包含一些隐私信息：例如密码等信息；</p></li><li><p><strong>上传同名文件时会报错</strong></p></li><li><p><strong>即使后期gitbub倒闭或者cdn加速失效时，也可以批量把文件给下载下来</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/kungs8/blog_imgs.git</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;div align=&quot;center&quot;&gt;
  &lt;font size=&#39;60&#39;&gt;使用Github搭建图床&lt;/font&gt;&lt;br&gt;
  &lt;font size=&#39;3&#39;&gt;
    &lt;B&gt;Author: &lt;/B&gt;&lt;a href=&quot;https://blog.csdn.net/yanpenggo</summary>
      
    
    
    
    <category term="图床" scheme="http://example.com/categories/%E5%9B%BE%E5%BA%8A/"/>
    
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
    <category term="图床" scheme="http://example.com/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>自我搭建博客</title>
    <link href="http://example.com/2022/04/20/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2022/04/20/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-04-20T09:10:20.000Z</published>
    <updated>2022-04-20T09:11:26.249Z</updated>
    
    <content type="html"><![CDATA[<div align="center">  <font size='60'>自我搭建博客</font><br>  <font size='3'>    <B>Author: </B><a href="https://blog.csdn.net/yanpenggong">yanpenggong</a>&#x3000;&#x3000;&#x3000;&#x3000;&#x3000;&#x3000;    <B>Email: </B><a href="yanpenggong@163.com">yanpenggong@163.com</a><br>    <B>Github: </B><a href="https://github.com/kungs8">kungs8</a>    &#x3000;&#x3000;&#x3000;&#x3000;    <B>CSDN: </B><a href="https://blog.csdn.net/yanpenggong">https://blog.csdn.net/yanpenggong</a>  </font></div><p>[TOC]</p><p>由于 NightTeam 的域名是 nightteam.cn，所以这里官方博客使用了二级域名 blog.nightteam.cn，官方主页使用了根域名 nightteam.cn，现在站点都已经稳定运行在 GitHub Pages 上面了，大家如果感兴趣可以去看一下。</p><p>•NightTeam HomePage：<a href="https://nightteam.cn/">https://nightteam.cn/</a></p><p>下面是两个站点的预览图：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_01.png" style="zoom:50%;" /></p><p>这个是个人搭建好的blog效果：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_02.png" alt=""></p><p>这里的主页就是用一个基本的静态页面搭建了，没有什么技术含量。博客相对复杂一点，使用了 Hexo 框架，采用了 Next 主题，在搭建的过程中我就顺手把搭建的流程大致记录下来了，在这里扩充一下形成一篇记录，毕竟好记性不如烂笔头。</p><p>于是，这篇《利用 GitHub 从零开始搭建一个博客》的文章就诞生了。</p><h1 id="一、准备条件"><a href="#一、准备条件" class="headerlink" title="一、准备条件"></a>一、准备条件</h1><p>在这里先跟大家说一些准备条件，有些同学可能一听到搭建博客就望而却步。弄个博客网站，不得有台服务器吗？不得搞数据库吗？不得注册域名吗？没事，如果都没有，那照样是能搭建一个博客的。</p><p>GitHub 是个好东西啊，它提供了 GitHub Pages 帮助我们来架设一个静态网站，这就解决了服务器的问题。</p><p>Hexo 这个博客框架没有那么重量级，它是 MarkDown 直接写文章的，然后 Hexo 可以直接将文章编译成静态网页文件并发布，所以这样文章的内容、标题、标签等信息就没必要存数据库里面了，是直接纯静态页面了，这就解决了数据库的问题。</p><p>GitHub Pages 允许每个账户创建一个名为 {username}.github.io 的仓库，另外它还会自动为这个仓库分配一个 github.io 的二级域名，这就解决了域名的问题，当然如果想要自定义域名的话，也可以支持。</p><p>所以说，基本上，先注册个 GitHub 账号就能搞了，下面我们来正式开始吧。</p><h1 id="二、新建项目"><a href="#二、新建项目" class="headerlink" title="二、新建项目"></a>二、新建项目</h1><p>首先在 GitHub 新建一个仓库（Repository），名称为 {username}.github.io，注意这个名比较特殊，必须要是 github.io 为后缀结尾的。比如 kungs8 的 GitHub 用户名就叫 yanpenggong，那我就新建一个 kungs8.github.io，新建完成之后就可以进行后续操作了。</p><p>另外如果 GitHub 没有配置 SSH 连接的建议配置一下，这样后面在部署博客的时候会更方便。</p><h1 id="三、安装环境"><a href="#三、安装环境" class="headerlink" title="三、安装环境"></a>三、安装环境</h1><h2 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1.安装 Node.js"></a>1.安装 Node.js</h2><p>首先在自己的电脑上安装 Node.js，下载地址：<a href="https://nodejs.org/zh-cn/download/，可以安装">https://nodejs.org/zh-cn/download/，可以安装</a> Stable 版本。</p><p>安装完毕之后，确保环境变量配置好，能正常使用 <code>npm</code> 命令。</p><h2 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2.安装 Hexo"></a>2.安装 Hexo</h2><p>接下来就需要安装 Hexo 了，这是一个博客框架，Hexo 官方还提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客，所以在这之前我们需要先安装 Hexo 的命令行工具。</p><p>命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完毕之后，确保环境变量配置好，能正常使用 <code>hexo</code> 命令。</p><h1 id="四、初始化项目"><a href="#四、初始化项目" class="headerlink" title="四、初始化项目"></a>四、初始化项目</h1><p>接下来我们使用 Hexo 的命令行创建一个项目，并将其在本地跑起来，整体跑通看看。</p><p>首先使用如下命令创建项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &#123;name&#125;</span><br></pre></td></tr></table></figure><p>这里的 name 就是项目名，我这里要创建 <code>yanpenggong</code> 的博客，我就把项目取名为 <code>yanpenggong</code> 了，用了纯小写，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init yanpenggong</span><br></pre></td></tr></table></figure><p>这样 yanpenggong 文件夹下就会出现 Hexo 的初始化文件，包括 themes、scaffolds、source 等文件夹，这些内容暂且先不用管是做什么的，我们先知道有什么，然后一步步走下去看看都发生了什么变化。</p><p>接下来我们首先进入新生成的文件夹里面，然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac GitBlogLearning % cd yanpenggong</span><br><span class="line">(base) kungs@kungsMac yanpenggong % npm install</span><br><span class="line">(base) kungs@kungsMac yanpenggong % hexo generate</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac GitBlogLearning % cd yanpenggong </span><br><span class="line">(base) kungs@kungsMac yanpenggong % npm install</span><br><span class="line">npm WARN deprecated source-map-url@0.4.1: See https://github.com/lydell/source-map-url#deprecated</span><br><span class="line">npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated</span><br><span class="line">npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated</span><br><span class="line">npm WARN deprecated source-map-resolve@0.5.3: See https://github.com/lydell/source-map-resolve#deprecated</span><br><span class="line"></span><br><span class="line">added 250 packages, and audited 251 packages in 40s</span><br><span class="line"></span><br><span class="line">18 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"></span><br><span class="line">found 0 vulnerabilities</span><br><span class="line">(base) kungs@kungsMac yanpenggong % hexo generate</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 148 ms</span><br><span class="line">(node:46252) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:46252) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:46252) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:46252) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:46252) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:46252) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: archives/2022/index.html</span><br><span class="line">INFO  Generated: archives/2022/04/index.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: js/script.js</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.css</span><br><span class="line">INFO  Generated: css/style.css</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff2</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.js</span><br><span class="line">INFO  Generated: js/jquery-3.4.1.min.js</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff</span><br><span class="line">INFO  Generated: css/fonts/FontAwesome.otf</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.ttf</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.eot</span><br><span class="line">INFO  Generated: 2022/04/20/hello-world/index.html</span><br><span class="line">INFO  Generated: css/images/banner.jpg</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.svg</span><br><span class="line">INFO  17 files generated in 486 ms</span><br></pre></td></tr></table></figure><p>可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。</p><p>然后我们利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo serve</span><br></pre></td></tr></table></figure><p>运行之后命令行输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>它告诉我们在本地 4000 端口上就可以查看博客站点了，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_03.png" style="zoom:50%;" /></p><p>这样一个博客的架子就出来了，我们只用了三个命令就完成了。</p><h1 id="五、部署设置"><a href="#五、部署设置" class="headerlink" title="五、部署设置"></a>五、部署设置</h1><p>接下来我们来将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。</p><p>那么怎么把这个页面部署到 GitHub Pages 上面呢，其实 Hexo 已经给我们提供一个命令，利用它我们可以直接将博客一键部署，不需要手动去配置服务器或进行其他的各项配置。</p><p>部署命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo deploy</span><br><span class="line">INFO  Validating config</span><br></pre></td></tr></table></figure><p>在部署之前，我们需要先知道博客的部署地址，它需要对应 GitHub 的一个 Repository 的地址，这个信息需要我们来配置一下。</p><p>打开根目录下的 _config.yml 文件，找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &#123;git repo ssh address&#125;</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>我的就修改为如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:kungs8/kungs8.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>另外我们还需要额外安装一个支持 Git 的部署插件，名字叫做 hexo-deployer-git，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer not found: git</span><br></pre></td></tr></table></figure><p>好，那就让我们安装下这个插件，在项目目录下执行安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装成功之后，执行部署命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo deploy</span><br></pre></td></tr></table></figure><p>运行结果类似如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo deploy                         </span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Setting up Git deployment...</span><br><span class="line">已初始化空的 Git 仓库于 /Users/kungs/GGG/GitLearning/GitBlogLearning/yanpenggong/.deploy_git/.git/</span><br><span class="line">[master（根提交） 9358c6b] First commit</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 placeholder</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">[master 2040ad5] Site updated: 2022-04-20 11:27:22</span><br><span class="line"> 18 files changed, 5174 insertions(+)</span><br><span class="line"> create mode 100644 2022/04/20/hello-world/index.html</span><br><span class="line"> create mode 100644 archives/2022/04/index.html</span><br><span class="line"> create mode 100644 archives/2022/index.html</span><br><span class="line"> create mode 100644 archives/index.html</span><br><span class="line"> create mode 100644 css/fonts/FontAwesome.otf</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.eot</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.svg</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.ttf</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.woff</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.woff2</span><br><span class="line"> create mode 100644 css/images/banner.jpg</span><br><span class="line"> create mode 100644 css/style.css</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.min.css</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.min.js</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line"> create mode 100644 js/jquery-3.4.1.min.js</span><br><span class="line"> create mode 100644 js/script.js</span><br><span class="line"> delete mode 100644 placeholder</span><br><span class="line">枚举对象中: 34, 完成.</span><br><span class="line">对象计数中: 100% (34/34), 完成.</span><br><span class="line">使用 4 个线程进行压缩</span><br><span class="line">压缩对象中: 100% (26/26), 完成.</span><br><span class="line">写入对象中: 100% (34/34), 882.40 KiB | 2.38 MiB/s, 完成.</span><br><span class="line">总共 34（差异 3），复用 0（差异 0），包复用 0</span><br><span class="line">remote: Resolving deltas: 100% (3/3), done.</span><br><span class="line">remote: </span><br><span class="line">remote: Create a pull request for &#x27;master&#x27; on GitHub by visiting:</span><br><span class="line">remote:      https://github.com/kungs8/kungs8.github.io/pull/new/master</span><br><span class="line">remote: </span><br><span class="line">To github.com:kungs8/kungs8.github.io.git</span><br><span class="line"> * [new branch]      HEAD -&gt; master</span><br><span class="line">分支 &#x27;master&#x27; 设置为跟踪来自 &#x27;git@github.com:kungs8/kungs8.github.io.git&#x27; 的远程分支 &#x27;master&#x27;。</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure><p>如果出现类似上面的内容，就证明我们的博客已经成功部署到 GitHub Pages 上面了，这时候我们访问一下 GitHub Repository 同名的链接，比如我的 kungs8 博客的 Repository 名称取的是 kungs8.github.io，那我就访问 <a href="http://kungs8.github.io，这时候我们就可以看到跟本地一模一样的博客内容了。">http://kungs8.github.io，这时候我们就可以看到跟本地一模一样的博客内容了。</a></p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_04.png" style="zoom:50%;" /></p><p>这时候我们去 GitHub 上面看看 Hexo 上传了什么内容，打开之后可以看到 master 分支有了这样的内容：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_05.png" style="zoom:50%;" /></p><p>仔细看看，这实际上是博客文件夹下面的 public 文件夹下的所有内容，Hexo 把编译之后的静态页面内容上传到 GitHub 的 master 分支上面去了。</p><p>这时候可能就有人有疑问了，那我博客的源码也想放到 GitHub 上面怎么办呢？其实很简单，新建一个其他的分支就好了，比如我这边就新建了一个 source 分支，代表博客源码的意思。</p><p>具体的添加过程就很简单了，参加如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git checkout -b source</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;init blog&quot;</span><br><span class="line">git remote add origin git@github.com:&#123;username&#125;/&#123;username&#125;.github.io.git</span><br><span class="line">git push origin source</span><br></pre></td></tr></table></figure><p>成功之后，可以到 GitHub 上再切换下默认分支，比如我就把默认的分支设置为了 source，当然不换也可以。</p><h2 id="1-配置站点信息"><a href="#1-配置站点信息" class="headerlink" title="1. 配置站点信息"></a>1. 配置站点信息</h2><p>完成如上内容之后，实际上我们只完成了博客搭建的一小步，因为我们仅仅是把初始化的页面部署成功了，博客里面还没有设置任何有效的信息。下面就让我们来进行一下博客的基本配置，另外换一个好看的主题，配置一些其他的内容，让博客真正变成属于我们自己的博客吧。</p><p>下面我就以自己的站点 NightTeam 为例，修改一些基本的配置，比如站点名、站点描述等等。</p><p>修改根目录下的 _config.yml 文件，找到 Site 区域，这里面可以配置站点标题 title、副标题 subtitle 等内容、关键字 keywords 等内容，比如我的就修改为如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">yanpenggong大数据实验室</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">一个专注于科研前线的大数据团队，致力于打造更好更牛的大数据平台</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">涉猎的主要编程语言为</span> <span class="string">Python、C++、Matlab、R，领域涵盖爬虫、数据挖掘、深度学习、良率分析、目标检测、工业异常检测、服务研发和对象存储等。</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">&quot;Python, C++, Matlab, R, 爬虫, 数据挖掘, 深度学习, 良率分析, 目标检测, 工业异常检测, 服务研发, 对象存储&quot;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">yanpenggong</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> </span><br></pre></td></tr></table></figure><p>这里大家可以参照格式把内容改成自己的。</p><p>另外还可以设置一下语言，如果要设置为汉语的话可以将 language 的字段设置为 zh-CN，修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure><p>这样就完成了站点基本信息的配置，完成之后可以看到一些基本信息就修改过来了，页面效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_06.png" style="zoom:50%;" /></p><h2 id="2-修改主题"><a href="#2-修改主题" class="headerlink" title="2. 修改主题"></a>2. 修改主题</h2><p>目前来看，整个页面的样式个人感觉并不是那么好看，想换一个风格，这就涉及到主题的配置了。目前 Hexo 里面应用最多的主题基本就是 Next 主题了，个人感觉这个主题还是挺好看的，另外它支持的插件和功能也极为丰富，配置了这个主题，我们的博客可以支持更多的扩展功能，比如阅览进度条、中英文空格排版、图片懒加载等等。</p><p>那么首先就让我们来安装下 Next 这个主题吧，目前 Next 主题已经更新到 7.x 版本了，我们可以直接到 Next 主题的 GitHub Repository 上把这个主题下载下来。</p><p>主题的 GitHub 地址是：<a href="https://github.com/theme-next/hexo-theme-next，我们可以直接把">https://github.com/theme-next/hexo-theme-next，我们可以直接把</a> master 分支 Clone 下来。</p><p>首先命令行进入到项目的根目录，执行如下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line">正克隆到 &#x27;themes/next&#x27;...</span><br><span class="line">remote: Enumerating objects: 12582, done.</span><br><span class="line">remote: Total 12582 (delta 0), reused 0 (delta 0), pack-reused 12582</span><br><span class="line">接收对象中: 100% (12582/12582), 8.03 MiB | 533.00 KiB/s, 完成.</span><br><span class="line">处理 delta 中: 100% (7990/7990), 完成.</span><br></pre></td></tr></table></figure><p>执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。</p><p>然后我们需要修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>然后本地重新开启服务，访问刷新下页面，就可以看到 next 主题就切换成功了，预览效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_07.png" style="zoom:50%;" /></p><h2 id="3-主题配置"><a href="#3-主题配置" class="headerlink" title="3. 主题配置"></a>3. 主题配置</h2><p>现在我们已经成功切换到 next 主题上面了，接下来我们就对主题进行进一步地详细配置吧，比如修改样式、增加其他各项功能的支持，下面逐项道来。</p><p>Next 主题内部也提供了一个配置文件，名字同样叫做 <code>_config.yml</code>，只不过位置不一样，它在 themes/next 文件夹下，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 <code>themes/next/_config.yml</code> 文件。</p><h3 id="3-1-样式"><a href="#3-1-样式" class="headerlink" title="3.1. 样式"></a>3.1. 样式</h3><p>Next 主题还提供了多种样式，风格都是类似黑白的搭配，但整个布局位置不太一样，通过修改配置文件的 scheme 字段即可，我选了 Pisces 样式，修改 <code>_config.yml</code> （注意是 <code>themes/next/_config.yml</code> 文件）如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br></pre></td></tr></table></figure><p>刷新页面之后就会变成这种样式，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_08.png" style="zoom:50%;" /></p><p>另外还有几个可选项，比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><p>大家可以自行根据喜好选择。</p><h3 id="3-2-favicon"><a href="#3-2-favicon" class="headerlink" title="3.2. favicon"></a>3.2. favicon</h3><p>favicon 就是站点标签栏的小图标，默认是用的 Hexo 的小图标，如果我们有站点 Logo 的图片的话，我们可以自己定制小图标。</p><p>但这并不意味着我们需要自己用 PS 自己来设计，已经有一个网站可以直接将图片转化为站点小图标，站点链接为：<a href="https://realfavicongenerator.net，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。">https://realfavicongenerator.net，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。</a></p><p>图标下载下来之后把它放在 themes/next/source/images 目录下面。</p><p>然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/safari-pinned-tab.svg</span></span><br></pre></td></tr></table></figure><p>配置完成之后刷新页面，整个页面的标签图标就被更新了。</p><h3 id="3-3-avatar"><a href="#3-3-avatar" class="headerlink" title="3.3. avatar"></a>3.3. avatar</h3><p>avatar 这个就类似站点的头像，如果设置了这个，会在站点的作者信息旁边额外显示一个头像，比如我这边有一张 cat.jpg 图片：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_cat.jpg" style="zoom:50%;" /></p><p>将其放置到 <code>themes/next/source/images/cat.jpg</code> 路径，然后在主题 <code>themes/next/_config.yml</code> 文件下编辑 avatar 的配置，修改为正确的路径即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/cat.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这里有 rounded 选项是是否显示圆形，rotated 是是否带有旋转效果，大家可以根据喜好选择是否开启。</p><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_09.png" style="zoom:50%;" /></p><p>配置完成之后就会显示头像。</p><h3 id="3-4-rss"><a href="#3-4-rss" class="headerlink" title="3.4. rss"></a>3.4. rss</h3><p>博客一般是需要 RSS 订阅的，如果要开启 RSS 订阅，这里需要安装一个插件，叫做 hexo-generator-feed，安装完成之后，站点会自动生成 RSS Feed 文件，安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在项目根目录下运行这个命令，安装完成之后不需要其他的配置，以后每次编译生成站点的时候就会自动生成 RSS Feed 文件了。</p><h3 id="3-5-code"><a href="#3-5-code" class="headerlink" title="3.5. code"></a>3.5. code</h3><p>作为程序猿，代码块的显示还是需要很讲究的，默认的代码块我个人不是特别喜欢，因此我把代码的颜色修改为黑色，并把复制按钮的样式修改为类似 Mac 的样式，修改 <code>themes/next/_config.yml</code> 文件的 codeblock 区块如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">bright</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure><p>修改前的代码样式：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_10.png" style="zoom:50%;" /></p><p>修改后的代码样式：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_11.png" style="zoom:50%;" /></p><p>嗯，个人觉得整体看起来逼格高了不少。</p><h3 id="3-6-top"><a href="#3-6-top" class="headerlink" title="3.6. top"></a>3.6. top</h3><p>我们在浏览网页的时候，如果已经看完了想快速返回到网站的上端，一般都是有一个按钮来辅助的，这里也支持它的配置，修改 <code>themes/next/_config.yml</code> 的 back2top 字段即可，我的设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>enable 默认为 true，即默认显示。sidebar 如果设置为 true，按钮会出现在侧栏下方，个人觉得并不是很好看，就取消了，scrollpercent 就是显示阅读百分比，个人觉得还不错，就将其设置为 true。</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_12.png" style="zoom:50%;" /></p><p>具体的效果大家可以设置后根据喜好选择。</p><h3 id="3-7-reading-process"><a href="#3-7-reading-process" class="headerlink" title="3.7. reading_process"></a>3.7. reading_process</h3><p>reading_process，阅读进度。大家可能注意到有些站点的最上侧会出现一个细细的进度条，代表页面加载进度和阅读进度，如果大家想设置的话也可以试试，我将其打开了，修改  <code>themes/next/_config.yml</code>  如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="attr">height: 2pxreading_progress:  enable:</span> <span class="literal">true</span>  <span class="comment"># Available values: top | bottom  position: top  color: &quot;#222&quot;  height: 2px</span></span><br></pre></td></tr></table></figure><p>设置之后显示效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_13.png" style="zoom:50%;" /></p><h3 id="3-8-bookmark"><a href="#3-8-bookmark" class="headerlink" title="3.8. bookmark"></a>3.8. bookmark</h3><p>书签，可以根据阅读历史记录，在下次打开页面的时候快速帮助我们定位到上次的位置，大家可以根据喜好开启和关闭，我的<code>themes/next/_config.yml</code> 配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><h3 id="3-9-github-banner"><a href="#3-9-github-banner" class="headerlink" title="3.9. github_banner"></a>3.9. github_banner</h3><p>在一些技术博客上，大家可能注意到在页面的右上角有个 GitHub 图标，点击之后可以跳转到其源码页面，可以为 GitHub Repository 引流，大家如果想显示的话可以自行选择打开，我的<code>themes/next/_config.yml</code> 配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/kungs8/kungs8.github.io/tree/master</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">kungs</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure><p>记得修改下链接 permalink 和标题 title，显示效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_14.png" style="zoom:50%;" /></p><p>可以看到在页面右上角显示了 GitHub 的图标，点击可以进去到 Repository 页面。</p><h3 id="3-10-gitalk"><a href="#3-10-gitalk" class="headerlink" title="3.10. gitalk"></a>3.10. gitalk</h3><p>由于 Hexo 的博客是静态博客，而且也没有连接数据库的功能，所以它的评论功能是不能自行集成的，但可以集成第三方的服务。</p><p>Next 主题里面提供了多种评论插件的集成，有 changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte 这些。</p><p>作为一名程序员，我个人比较喜欢 gitalk，它是利用 GitHub 的 Issue 来当评论，样式也比较不错。</p><p>首先需要在 GitHub 上面注册一个 OAuth Application，链接为：<a href="https://github.com/settings/applications/new，注册完毕之后拿到">https://github.com/settings/applications/new，注册完毕之后拿到</a> Client ID、Client Secret 就可以了。</p><p>首先需要在 _config.yml 文件的 comments 区域配置使用 gitalk：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">gitalk</span></span><br></pre></td></tr></table></figure><p>主要是 comments.active 字段选择对应的名称即可。</p><p>然后找打 gitalk 配置，添加它的各项配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># Demo: https://gitalk.github.io</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">NightTeam</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">nightteam.github.io</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> &#123;<span class="string">your</span> <span class="string">client</span> <span class="string">id</span>&#125; <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> &#123;<span class="string">your</span> <span class="string">client</span> <span class="string">secret</span>&#125; <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">germey</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><p>配置完成之后 gitalk 就可以使用了，点击进入文章页面。</p><p>GitHub 授权登录之后就可以使用了，评论的内容会自动出现在 Issue 里面。</p><h3 id="3-11-pangu"><a href="#3-11-pangu" class="headerlink" title="3.11. pangu"></a>3.11. pangu</h3><p>我个人有个强迫症，那就是写中文和英文的时候中间必须要留有间距，一个简单直接的方法就是中间加个空格，但某些情况下可能习惯性不加或者忘记加了，这就导致中英文混排并不是那么美观。</p><p>pangu 就是来解决这个问题的，我们只需要在主题里面开启这个选项，在编译生成页面的时候，中英文之间就会自动添加空格，看起来更加美观。</p><p>具体的<code>themes/next/_config.yml</code>修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pangu:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="3-12-math"><a href="#3-12-math" class="headerlink" title="3.12. math"></a>3.12. math</h3><p>可能在一些情况下我们需要写一个公式，比如演示一个算法推导过程，MarkDown 是支持公式显示的，Hexo 的 Next 主题同样是支持的。</p><p>Next 主题提供了两个渲染引擎，分别是 mathjax 和 katex，后者相对前者来说渲染速度更快，而且不需要 JavaScript 的额外支持，但后者支持的功能现在还不如前者丰富，具体的对比可以看官方文档：<a href="https://theme-next.org/docs/third-party-services/math-equations。">https://theme-next.org/docs/third-party-services/math-equations。</a></p><p>所以我这里选择了 mathjax，通过修改配置即可启用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>mathjax 的使用需要我们额外安装一个插件，叫做 hexo-renderer-kramed，另外也可以安装 hexo-renderer-pandoc，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % npm un hexo-renderer-marked --save</span><br><span class="line">(base) kungs@kungsMac yanpenggong % npm i hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>另外还有其他的插件支持，大家可以到官方文档查看。</p><h3 id="3-13-pjax"><a href="#3-13-pjax" class="headerlink" title="3.13. pjax"></a>3.13. pjax</h3><p>可能大家听说过 Ajax，没听说过 pjax，这个技术实际上就是利用 Ajax 技术实现了局部页面刷新，既可以实现 URL 的更换，有可以做到无刷新加载。</p><p>要开启这个功能需要先将 pjax 功能开启，然后安装对应的 pjax 依赖库，首先修改 <code>themes/next/_config.yml</code> 修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后安装依赖库，切换到 next 主题下，然后安装依赖库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % cd themes/next </span><br><span class="line">(base) kungs@kungsMac next % git clone https://github.com/theme-next/theme-next-pjax source/lib/pjax</span><br></pre></td></tr></table></figure><p>这样 pjax 就开启了，页面就可以实现无刷新加载了。</p><p>另外关于 Next 主题的设置还有挺多的，这里就介绍到这里了，更多的主题设置大家可以参考官方文档：<a href="https://theme-next.org/docs/。">https://theme-next.org/docs/。</a></p><h1 id="六、文章"><a href="#六、文章" class="headerlink" title="六、文章"></a>六、文章</h1><p>现在整个站点只有一篇文章，那么我们怎样来增加其他的文章呢？</p><p>这个很简单，只需要调用 Hexo 提供的命令即可，比如我们要新建一篇「HelloWorld」的文章，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo new hello-world</span><br></pre></td></tr></table></figure><p>创建的文章会出现在 <code>source/_posts</code> 文件夹下，是 MarkDown 格式。</p><p>在文章开头通过如下格式添加必要信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题 # 自动创建，如 hello-world</span><br><span class="line">date: 日期 # 自动创建，如 2022-04-20 15:54:14</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">-</span> 标签1</span><br><span class="line"><span class="bullet">-</span> 标签2</span><br><span class="line"><span class="bullet">-</span> 标签3</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> 分类1</span><br><span class="line"><span class="section">- 分类2</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>开头下方撰写正文，MarkDown 格式书写即可。</p><p>这样在下次编译的时候就会自动识别标题、时间、类别等等，另外还有其他的一些参数设置，可以参考文档：<a href="https://hexo.io/zh-cn/docs/writing.html。">https://hexo.io/zh-cn/docs/writing.html。</a></p><h2 id="1-标签页"><a href="#1-标签页" class="headerlink" title="1. 标签页"></a>1. 标签页</h2><p>现在我们的博客只有首页、文章页，如果我们想要增加标签页，可以自行添加，这里 Hexo 也给我们提供了这个功能，在根目录执行命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo new page tags</span><br></pre></td></tr></table></figure><p>执行这个命令之后会自动帮我们生成一个 source/tags/index.md 文件，内容就只有这样子的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line"><span class="section">date: 2022-04-20 15:55:41</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>我们可以上面的后面自行添加一个 type 字段来指定页面的类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type: tags</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><p>然后再在主题的 <code>themes/next/_config.yml</code> 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  #categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><p>这样重新本地启动看下页面状态，效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_15.png" style="zoom:50%;" /></p><p>可以看到左侧导航也出现了标签，点击之后右侧会显示标签的列表。</p><h2 id="2-分类页"><a href="#2-分类页" class="headerlink" title="2. 分类页"></a>2. 分类页</h2><p>分类功能和标签类似，一个文章可以对应某个分类，如果要增加分类页面可以使用如下命令创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo new page categories</span><br></pre></td></tr></table></figure><p>然后同样地，会生成一个 source/categories/index.md 文件。</p><p>我们可以自行添加一个 type 字段来指定页面的类型：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type: categories</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><p>然后再在主题的 <code>themes/next/_config.yml</code>文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span>  </span><br><span class="line"><span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span>  </span><br><span class="line"><span class="comment">#about: /about/ || user</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line"><span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>这样页面就会增加分类的支持，效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_16.png" style="zoom:50%;" /></p><h2 id="3-搜索页"><a href="#3-搜索页" class="headerlink" title="3. 搜索页"></a>3. 搜索页</h2><p>很多情况下我们需要搜索全站的内容，所以一个搜索功能的支持也是很有必要的。</p><p>如果要添加搜索的支持，需要先安装一个插件，叫做 hexo-generator-searchdb，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>然后在项目的 _config.yml 里面添加搜索设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>然后在主题的 <code>themes/next/_config.yml</code> 里面修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">5</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这里用的是 Local Search，如果想启用其他是 Search Service 的话可以参考官方文档：<a href="https://theme-next.org/docs/third-party-services/search-services。">https://theme-next.org/docs/third-party-services/search-services。</a></p><h2 id="4-404-页面"><a href="#4-404-页面" class="headerlink" title="4. 404 页面"></a>4. 404 页面</h2><p>另外还需要添加一个 404 页面，直接在根目录 source 文件夹新建一个 404.md 文件即可，内容可以仿照如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found</span><br><span class="line"><span class="section">date: 2022-04-20 16:15:02</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span><br><span class="line">对不起，您所访问的页面不存在或者已删除。</span><br><span class="line">您可以<span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://kungs8.github.io/archives/&gt;</span></span></span>&quot;&gt;点击此处<span class="language-xml"><span class="tag"><span class="string">&lt;/a&gt;</span></span></span>返回首页。</span><br><span class="line"><span class="language-xml"><span class="tag"><span class="string">&lt;/center&gt;</span></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag"><span class="string">&lt;blockquote class=&quot;</span><span class="attr">blockquote-center</span>&quot;&gt;</span></span></span><br><span class="line"><span class="code">    yanpenggong</span></span><br><span class="line"><span class="code">&lt;/blockquote&gt;</span></span><br></pre></td></tr></table></figure><p>这里面的一些相关信息和链接可以替换成自己的。</p><p>增加了这个 404 页面之后就可以</p><p>完成了上面的配置基本就完成了大半了，其实 Hexo 还有很多很多功能，这里就介绍不过来了，大家可以直接参考官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a> 查看更多的配置。</p><h1 id="七、部署脚本"><a href="#七、部署脚本" class="headerlink" title="七、部署脚本"></a>七、部署脚本</h1><p>最后我这边还增加了一个简易版的部署脚本，其实就是重新 gererate 下文件，然后重新部署。在根目录下新建一个 deploy.sh 的脚本文件，内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这样我们在部署发布的时候只需要执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % sh deploy.sh</span><br></pre></td></tr></table></figure><p>就可以完成博客的更新了，非常简单。</p><h1 id="八、自定义域名"><a href="#八、自定义域名" class="headerlink" title="八、自定义域名"></a>八、自定义域名</h1><p>将页面修改之后可以用上面的脚本重新部署下博客，其内容便会跟着更新。</p><p>另外我们也可以在 GitHub 的 Repository 里面设置域名，找到 Settings，拉到下面，可以看到有个 GitHub Pages 的配置项，如图所示：</p><p>如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_17.png" style="zoom:50%;" /></p><p>下面有个 custom domain 的选项，输入你想自定义的域名地址，然后添加 CNAME 解析就好了。</p><p>另外下面还有一个 Enforce HTTPS 的选项，GitHub Pages 会在我们配置自定义域名之后自动帮我们配置 HTTPS 服务。刚配置完自定义域名的时候可能这个选项是不可用的，一段时间后等到其可以勾选了，直接勾选即可，这样整个博客就会变成 HTTPS 的协议的了。</p><p>另外有一个值得注意的地方，如果配置了自定义域名，在目前的情况下，每次部署的时候这个自定义域名的设置是会被自动清除的。所以为了避免这个情况，我们需要在项目目录下面新建一个 CNAME 文件，路径为 source/CNAME，内容就是自定义域名。</p><p>比如我就在 source 目录下新建了一个 CNAME 文件，内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog.nightteam.cn</span><br></pre></td></tr></table></figure><p>这样避免了每次部署的时候自定义域名被清除的情况了。</p><p>以上就是从零搭建一个 Hexo 博客的流程，希望对大家有帮助。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div align=&quot;center&quot;&gt;
  &lt;font size=&#39;60&#39;&gt;自我搭建博客&lt;/font&gt;&lt;br&gt;
  &lt;font size=&#39;3&#39;&gt;
    &lt;B&gt;Author: &lt;/B&gt;&lt;a href=&quot;https://blog.csdn.net/yanpenggong&quot;&gt;ya</summary>
      
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>数据的假设检验和显著性检验</title>
    <link href="http://example.com/2022/04/20/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C%E5%92%8C%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E9%AA%8C/"/>
    <id>http://example.com/2022/04/20/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C%E5%92%8C%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E9%AA%8C/</id>
    <published>2022-04-20T08:51:15.000Z</published>
    <updated>2022-04-20T08:53:28.709Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1、假设检验"><a href="#1、假设检验" class="headerlink" title="1、假设检验"></a>1、假设检验</h1><p><strong>假设检验</strong>是<a href="https://baike.baidu.com/item/推论统计">推论统计</a>中用于检验统计假设的一种方法。而“统计假设”是可通过观察一组<a href="https://baike.baidu.com/item/随机变量">随机变量</a>的模型进行检验的科学<a href="https://baike.baidu.com/item/假说">假说</a>。<sup>[1]</sup>一旦能估计未知<a href="https://baike.baidu.com/item/参数">参数</a>，就会希望根据结果对未知的真正参数值做出适当的推论。</p><p>统计上对参数的假设，就是对一个或多个参数的论述。而其中欲检验其正确性的为<a href="https://baike.baidu.com/item/零假设">零假设</a>（null hypothesis），零假设通常由研究者决定，反映研究者对未知参数的看法。相对于<a href="https://baike.baidu.com/item/零假设">零假设</a>的其他有关参数之论述是<a href="https://baike.baidu.com/item/备择假设">备择假设</a>（alternative hypothesis），它通常反映了执行检定的研究者对参数可能数值的另一种（对立的）看法（换句话说，备择假设通常才是研究者最想知道的）。</p><p>假设检验的种类包括：<a href="https://baike.baidu.com/item/t检验">t检验</a>，<a href="https://baike.baidu.com/item/Z检验">Z检验</a>，<a href="https://baike.baidu.com/item/卡方检验">卡方检验</a>，<a href="https://baike.baidu.com/item/F检验">F检验</a>等等。</p><h2 id="1-1-基本思想"><a href="#1-1-基本思想" class="headerlink" title="1.1 基本思想"></a>1.1 基本思想</h2><p>​        假设检验的基本思想是小概率<a href="https://baike.baidu.com/item/反证法">反证法</a>思想。小概率思想是指小概率事件（P<0.01或P<0.05）在一次试验中基本上不会发生。[反证法](https://baike.baidu.com/item/反证法) 思想是先提出假设(检验假设H<sub>0&lt;/sub&gt;)，再用适当的统计方法确定假设成立的可能性大小，如可能性小，则认为假设不成立，若可能性大，则还不能认为假设不成立。</p><p>​        假设是否正确，要用从总体中抽出的样本进行检验，与此有关的理论和方法，构成假设检验的内容。设<strong>A</strong>是关于总体分布的一项命题，所有使命题<strong>A</strong>成立的总体分布构成一个集合<em>h</em><sub>0</sub>，称为原假设(常简称假设)。使命题<strong>A</strong>不成立的所有<a href="https://baike.baidu.com/item/总体分布">总体分布</a>构成另一个集合<em>h</em>1，称为备择假设。如果<em>h</em><sub>0</sub>可以通过有限个实参数来描述，则称为参数假设，否则称为非参数假设(见<a href="https://baike.baidu.com/item/非参数统计">非参数统计</a>)。如果<em>h</em><sub>0</sub>(或<em>h</em>1)只包含一个分布，则称原假设(或备择假设)为<a href="https://baike.baidu.com/item/简单假设">简单假设</a>，否则为<a href="https://baike.baidu.com/item/复合假设">复合假设</a>。对一个假设<em>h</em><sub>0</sub>进行检验，就是要制定一个规则，使得有了样本以后，根据这规则可以决定是接受它（承认命题<strong>A</strong>正确），还是拒绝它（否认命题<strong>A</strong>正确）。这样，所有可能的样本所组成的空间（称<a href="https://baike.baidu.com/item/样本空间">样本空间</a>）被划分为两部分HA和HR(HA的补集)，当样本<em>x</em>∈HA时，接受假设<em>h</em><sub>0</sub>；当<em>x</em>∈HR时，拒绝<em>h</em><sub>0</sub>。集合HR常称为检验的<a href="https://baike.baidu.com/item/拒绝域">拒绝域</a>，HA称为接受域。因此选定一个检验法，也就是选定一个拒绝域，故常把检验法本身与拒绝域HR等同起来。</p><h2 id="1-2-基本方法"><a href="#1-2-基本方法" class="headerlink" title="1.2 基本方法"></a>1.2 基本方法</h2><p>​        <a href="https://baike.baidu.com/item/显著性检验"><strong>显著性检验</strong></a> 有时，根据一定的理论或经验，认为某一假设<em>h</em><sub>0</sub>成立，例如，通常有理由认为特定的一群人的身高服从正态分布。当收集了一定数据后，可以评价实际数据与理论假设<em>h</em><sub>0</sub>之间的偏离，如果偏离达到了“显著”的程度就拒绝<em>h</em><sub>0</sub>，这样的检验方法称为显著性检验。偏离达到显著的程度通常是指定一个很小的正数<em>α</em>（如0.05，0.01），使当<em>h</em><sub>0</sub>正确时，它被拒绝的概率不超过<em>α</em>，称<em>α</em>为<a href="https://baike.baidu.com/item/显著性水平">显著性水平</a>。这种假设检验问题的特点是不考虑备择假设，考虑实验数据与理论之间<a href="https://baike.baidu.com/item/拟合">拟合</a>的程度如何，故此时又称为<a href="https://baike.baidu.com/item/拟合优度检验">拟合优度检验</a>。拟合优度检验是一类重要的显著性检验。<sup> [1]</sup> </p><p>​        K.皮尔森在1900年提出的Ⅹ检验是一个重要的拟合优度检验。设原假设<em>h</em><sub>0</sub>是：“总体分布等于某个已知的<a href="https://baike.baidu.com/item/分布函数">分布函数</a><em>F</em>(<em>x</em>)”。把(－∞，∞)分为若干个两两无公共点的<a href="https://baike.baidu.com/item/区间">区间</a><em>I</em>1，<em>I</em>2，…，<em>I</em>k，对任一个区间，以<em>v</em>j记大小为<em>n</em>的样本<em>X</em>1，<em>X</em>2，…，<em>X</em>n中落在<em>I</em>j内的个数，称为区间<em>I</em>j的观测<a href="https://baike.baidu.com/item/频数">频数</a>，另外，求出<em>I</em>j的理论频数(对<em>j</em>=1，2，…，<em>k</em>都这样做)，再算出由下式定义的Ⅹ统计量，皮尔森证明了：若对<em>j</em>=1，2，…，<em>k</em>，则当<em>n</em>→∞时，Ⅹ的极限分布是<a href="https://baike.baidu.com/item/自由度">自由度</a>为<em>k</em>-1的Ⅹ分布。于是在样本大小<em>n</em>相当大时，从Ⅹ分布表可查得Ⅹ分布的上<em>α</em><a href="https://baike.baidu.com/item/分位数">分位数</a>（见<a href="https://baike.baidu.com/item/概率分布">概率分布</a>）Ⅹ(<em>k</em>-1)。由此即得检验水平为<em>α</em>的拒绝域：{Ⅹ≥Ⅹα(<em>k</em>-1)}。如果原假设<em>h</em><sub>0</sub>为:总体服从分布族{<em>F</em>θ，<em>θ</em>∈嘷}，式中<em>θ</em>为未知参数，嘷为<em>θ</em>的所有可能取值的集合（称<a href="https://baike.baidu.com/item/参数空间">参数空间</a>），也可得到类似的拒绝域，只要在计算理论<a href="https://baike.baidu.com/item/频数">频数</a><em>v</em>j时，将所包含的未知参数<em>θ</em>用适当的<a href="https://baike.baidu.com/item/点估计">点估计</a>代替，即可计算 Ⅹ统计量。但此时极限分布的自由度为 <em>k</em>-Л-1，式中Л为<em>θ</em>中的独立参数的个数。<a href="https://baike.baidu.com/item/柯尔莫哥洛夫">柯尔莫哥洛夫</a>检验（见<a href="https://baike.baidu.com/item/非参数统计">非参数统计</a>）也是一个重要的拟合优度检验方法。</p><p>​        <strong>奈曼-皮尔森理论</strong> 　J.奈曼与 E.S.皮尔森合作，从1928年开始，对假设检验提出了一项系统的理论。他们认为，在检验一个假设<em>h</em><sub>0</sub>时可能犯两类错误：</p><p>​        第一类错误是真实情况为<em>h</em><sub>0</sub>成立(即θ∈嘷0)，但判断<em>h</em><sub>0</sub>不成立，犯了“以真为假”的错误。第二类错误是<em>h</em><sub>0</sub>实际不成立(即θ∈嘷1)，但判断它成立，犯了“以假为真”的错误（见表）。这里嘷0，嘷1分别是使假设<em>h</em><sub>0</sub>成立或不成立的θ的集合，显然嘷=嘷0+嘷1。当θ∈嘷0，样本X(即X1，X2，…，Xn组成的向量)∈HR，其概率<em>P</em>θ(X∈HR)就是犯第一类错误的概率α；当θ∈嘷1，样本X∈HA，其概率就是犯第二类错误的概率β。通常人们不希望轻易拒绝<em>h</em><sub>0</sub>，例如工厂的产品一般是合格的，出厂进行抽样检查时不希望轻易地被认为不合格，于是在限定犯第一类错误的概率不超过某个指定值α（称为检验水平）的条件下，寻求犯第二类错误的概率尽可能小的检验方法。为了描述检验的好坏，称θ的函数<em>P</em>θ(X∈HR)为检验的功效函数。例如上述产品检验的例子中，所采用的检验可以是：当样品中的废品个数超过一定限度时，认为该批产品不合格，否则就认为合格。这个检验的功效函数有图示的形状，图中的 p0、p1、α、β根据需要选定。这种图形清楚地描述了犯两类错误的概率。</p><p>​        <strong>优良性准则</strong> 　基于奈曼－皮尔森理论及<a href="https://baike.baidu.com/item/统计决策理论">统计决策理论</a>，可以提出一些准则，来比较为检验同一假设而提出的各种检验。较重要的准则有：</p><p>​        <strong>一致最大功效(UMP)准则</strong> 　欲检验<em>h</em><sub>0</sub>:θ∈嘷0，h1:θ∈嘷1；当给定检验水平α后，在所有满足的可供选择的检验HR中，是否有一个最好的，亦即：是否存在拒绝域H，使得对于所有θ∈嘷1及一切检验水平为α的H皆有。若这样的检验存在，则称HR为检验水平α的一致最大功效检验，简称UMP检验。奈曼与皮尔森在1933年提出了著名的奈曼-皮尔森引理。这是对<a href="https://baike.baidu.com/item/%E7%AE%80%E5%8D%95%E5%81%87%E8%AE%BE">简单假设</a>寻求UMP检验的一个构造性的结果，即此时<a href="https://baike.baidu.com/item/%E4%BC%BC%E7%84%B6%E6%AF%94">似然比</a>检验就是UMP检验。对某些<a href="https://baike.baidu.com/item/%E5%A4%8D%E5%90%88%E5%81%87%E8%AE%BE">复合假设</a>也找到了 UMP检验，但并不是所有情况都存在 UMP检验。因此有必要在对检验作某些限制下寻找最大功效检验或建立另外一些优良性准则。</p><p>​        <strong>无偏性准则</strong> 　要求检验在备择假设<em>h</em>1成立时作出正确判断的概率不小于检验水平<em>α</em>，这就是说在<em>h</em><sub>0</sub>不成立时拒绝<em>h</em><sub>0</sub>的概率要不小于在<em>h</em><sub>0</sub>成立时拒绝<em>h</em><sub>0</sub>的概率，这种性质称为无偏性，具有这种性质的检验称为无偏检验。显然，如果在无偏检验中存在一致最大功效检验就称为一致最大功效无偏检验（简称UMPU检验）。UMP检验不存在时，仍可能有UMPU检验存在。例如正态总体中<a href="https://baike.baidu.com/item/方差">方差</a>未知时，为检验均值<em>μ</em>=<em>μ</em>0的<em>t</em>检验就是UMPU检验，但不是UMP检验。</p><p>​        因为假设检验在统计决策理论中是一种特殊的统计决策问题，两类错误影响可用特殊损失来表示。例如选取特殊的<a href="https://baike.baidu.com/item/损失函数">损失函数</a>，使正确判断时损失为零，错判时损失为1。它就可归结为犯第一类错误的概率<em>α</em>和犯第二类错误的概率<em>β</em>。这同用功效函数<strong>P</strong>θ(<em>X</em>∈HR)来叙述是一致的。因此把统计决策理论中容许性、同变性、<a href="https://baike.baidu.com/item/%E8%B4%9D%E5%8F%B6%E6%96%AF">贝叶斯</a>决策、最小化最大等概念引进来，而得到容许检验、同变检验、贝叶斯检验和最小化最大检验。在同变检验限制下，又可以建立一致最大功效同变检验的概念。这些准则又可作为假设检验的优良性准则，从而扩大了假设检验的内容。</p><p>​        寻求在一定准则下的最优检验是很困难的，何况这种最优检验有时并不存在。于是提出了若干依据直观的<a href="https://baike.baidu.com/item/推理法">推理法</a>，其中最重要的是似然比法。</p><p>​        <strong>似然比检验</strong>　运用与最大似然估计（见<a href="https://baike.baidu.com/item/点估计">点估计</a>）类似的原理，可得到似然比检验法。设样本<em>X</em>的分布密度即<a href="https://baike.baidu.com/item/似然函数">似然函数</a>为<em>l</em>(尣，<em>θ</em>)，<em>θ</em>∈嘷，欲检验的假设为<em>h</em><sub>0</sub>:<em>θ</em>∈嘷0，称为似然比。显然0≤(尣)≤1，当(尣)太小时就拒绝<em>h</em><sub>0</sub>，否则接受<em>h</em><sub>0</sub>，其临界值<em>λ</em>0由检验水平<em>α</em> 和(尣)在<em>h</em><sub>0</sub>成立时的分布确定，即。然而，在一般情况下，寻求(尣的精确分布并不容易。1938年S.S.威尔克斯证明了：在相当广泛的条件下，-2l<em>n</em>(尣)是渐近Ⅹ分布的， 这就为大样本的似然比检验提供了实行的可能。</p><p>用似然比法导出的重要检验有：</p><p>​        <strong>U检验</strong> 　若总体遵从正态分布<em>N</em>(<em>μ</em>，<em>σ</em>)，其中<em>σ</em>已知，<em>X</em>=(<em>X</em>1，<em>X</em>2，…，<em>X</em>n)是从总体中抽取的简单随机样本，记，则遵从标准正态分布<em>N</em>(0，1)，于是可考虑对μ的以下几种假设的检验，其中<em>μ</em>0是给定的常数，<em>α</em>为检验的水平，<em>u</em>α为标准正态分布的上<em>α</em>分位数。上述检验称为<em>U</em> 检验。</p><p>​        <strong>t检验</strong> 　若总体服从正态分布<em>N</em>(<em>μ</em>，<em>σ</em>)，但<em>σ</em>未知，记，，则<em>t</em>=遵从自由度为<em>n</em>-1的<em>t</em>分布，可对μ有以下的水平为<em>α</em>的检验，其中<em>t</em>α为自由度为<em>n</em>-1的<em>t</em>分布的上<em>α</em>分位数。这些检验称为<em>t</em>检验。</p><p>​        <strong>F检验</strong> 若<em>X</em>=（<em>X</em>1，<em>X</em>2，…，）及<em>Y</em>=（<em>Y</em>1，<em>Y</em>2，…，）分别为来自正态总体<em>N</em>（<em>μ</em>1，<em>σ</em>娝）及<em>N</em>（<em>μ</em>2，<em>σ</em>娤）的简单随机样本，记 ，，，，则遵从自由度为<em>n</em>1-1，<em>n</em>2-1的<em>F</em>分布，对比较<em>σ</em>娝与<em>σ</em>娤的假设有以下的水平为<em>α</em>的检验，其中<em>F</em>α为自由度为(<em>n</em>1-1，<em>n</em>2-1)的<em>F</em>分布的上<em>α</em>分位数。这些检验称为<em>F</em>检验，在方差分析中有广泛的应用。</p><h2 id="1-3-基本步骤"><a href="#1-3-基本步骤" class="headerlink" title="1.3 基本步骤"></a>1.3 基本步骤</h2><p>1、提出检验假设又称无效假设，符号是<em>h</em><sub>0</sub>；备择假设的符号是H<sub>1</sub>。</p><p><em>h</em><sub>0</sub>：样本与总体或样本与样本间的差异是由抽样误差引起的；</p><p>H<sub>1</sub>：样本与总体或样本与样本间存在本质差异；</p><p>预先设定的检验水准为0.05；当检验假设为真，但被错误地拒绝的概率，记作α，通常取α=0.05或α=0.01。</p><p>2、选定统计方法，由样本观察值按相应的公式计算出统计量的大小，如X2值、t值等。根据资料的类型和特点，可分别选用Z检验，T检验，<a href="https://baike.baidu.com/item/秩和检验">秩和检验</a>和<a href="https://baike.baidu.com/item/卡方检验">卡方检验</a>等。</p><p>3、根据统计量的大小及其分布确定检验假设成立的可能性P的大小并判断结果。若P&gt;α，结论为按α所取水准不显著，不拒绝<em>h</em><sub>0</sub>，即认为差别很可能是由于抽样误差造成的，在统计上不成立；如果P≤α，结论为按所取α水准显著，拒绝<em>h</em><sub>0</sub>，接受H<sub>1</sub>，则认为此差别不大可能仅由抽样误差所致，很可能是实验因素不同造成的，故在统计上成立。P值的大小一般可通过查阅相应的界值表得到。</p><p>​        <u>教学中的做法:</u></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.根据实际情况提出原假设和备择假设；</span><br><span class="line">2.根据假设的特征，选择合适的检验统计量；</span><br><span class="line">3.根据样本观察值，计算检验统计量的观察值(obs)；</span><br><span class="line">4.选择许容显著性水平，并根据相应的统计量的统计分布表查出相应的临界值(ctrit)；</span><br><span class="line">5.根据检验统计量观察值的位置决定原假设取舍。</span><br></pre></td></tr></table></figure><h2 id="1-4-意义"><a href="#1-4-意义" class="headerlink" title="1.4  意义"></a>1.4  意义</h2><p>假设检验是<a href="https://baike.baidu.com/item/抽样推断">抽样推断</a>中的一项重要内容。它是根据原资料作出一个总体指标是否等于某一个数值，某一<a href="https://baike.baidu.com/item/随机变量">随机变量</a>是否服从某种<a href="https://baike.baidu.com/item/概率分布">概率分布</a>的假设，然后利用样本资料采用一定的统计方法计算出有关检验的统计量，依据一定的概率原则，以较小的风险来判断估计数值与总体数值(或者估计分布与实际分布)是否存在显著差异，是否应当接受原假设选择的一种检验方法。</p><p>用样本指标估计总体指标，其结论有的完全可靠，有的只有不同程度的可靠性，需要进一步加以检验和证实。通过检验，对样本指标与假设的总体指标之间是否存在差别作出判断，是否接受原假设。这里必须明确，进行检验的目的不是怀疑样本指标本身是否计算正确，而是为了分析样本指标和总体指标之间是否存在显著差异。从这个意义上，假设检验又称为显著性检验。</p><p>进行假设检验，先要对假设进行陈述。通过下例加以说明。</p><p>例如，设某工厂制造某种产品的某种精度服从<a href="https://baike.baidu.com/item/平均数">平均数</a>为方差的<a href="https://baike.baidu.com/item/正态分布">正态分布</a>，据过去的数据，已知平均数为75，方差为100。若经过技术革新，改进了制造方法，出现了平均数大于75，方差没有变更，但仍存在平均数不超过75的可能性。试陈述为统计假设。</p><p>根据上述情况，可有两种假设，(1) 平均数不超过75，(2)平均数大于75，即如果我们把(1)作为原假设，即被检验的假设，称作零假设，记作H<sub>0</sub>，如果其他假设相对于零假设来说，是约定的、补充的假设，则就是备择的，故称为备择假设或对立假设，记作H<sub>1</sub>。</p><p>还须指出，哪个是零假设，哪个是备择假设，是无关紧要的。我们关心的问题，是要探索哪一个假设被接受的问题。被接受的假设是要作为推理的基础。在实际问题中，一般要考虑事情发生的逻辑顺序和关心的事件，来设立零假设和备择假设。</p><p>在作出了统计假设之后，就要采用适当的方法来决定是否应该接受零假设。由于运用统计方法所遇到的问题不同，因而解决问题的方法也不尽相同。但其解决方法的基本思想却是一致的，即都是“概率反证法”思想，即：</p><p>(1)为了检验一个零假设(即虚拟假设)是否成立， 先假定它是成立的，然后看接受这个假设之后，是否会导致不合理结果。如果结果是合理的，就接受它；如不合理，则否定原假设。</p><p>(2)所谓导致不合理结果，就是看是否在一次观察中， 出现小概率事件。通常把出现小概率事件的概率记为0，即显著性水平。 它在次数<a href="https://baike.baidu.com/item/函数">函数</a>图形中是<a href="https://baike.baidu.com/item/曲线">曲线</a>两端或一端的面积。因此，从统计检验来说，就涉及到<a href="https://baike.baidu.com/item/双侧检验">双侧检验</a>和单侧检验问题。在实践中采用何类检验是由实际问题的性质来决定的。一般可以这样考虑：</p><p>①<a href="https://baike.baidu.com/item/双侧检验">双侧检验</a>。如果检验的目的是检验抽样的样本统计量与假设参数的差数是否过大(无论是正方向还是负方向)，就把风险平分在右侧和左侧。比如显著性水平为0.05，即概率曲线左右两侧各占，即0.025。</p><p>②单侧检验。这种检验只注意估计值是否偏高或偏低。如只注意偏低，则临界值在左侧，称左侧检验；如只注意偏高，则临界值在右侧，称右侧检验。</p><p>对总体的参数的检量，是通过由样本计算的统计量来实现的。所以检验统计量起着决策者的作用。</p><p><strong>参数估计与假设检验</strong></p><p>统计推断是由样本的信息来推测母体性能的一种方法，它又可以分为两类问题，即<strong>参数估计</strong>和<strong>假设检验</strong>。实际生产和科学实验中，大量的问题是在获得一批数据后，要对<a href="https://baike.baidu.com/item/母体">母体</a>的某一参数进行估计和检验。</p><p>例如，我们对45钢的<a href="https://baike.baidu.com/item/断裂韧性">断裂韧性</a>作了测定，取得了一批数据，然后要求45钢断裂韧性的平均值，或要求45钢断裂韧性的单侧下限值，或要求45钢断裂韧性的分散度(即<a href="https://baike.baidu.com/item/离散系数">离散系数</a>)，这就是<strong>参数估计</strong>的问题。</p><p>又如，经过长期的积累，知道了某材料的<a href="https://baike.baidu.com/item/断裂韧性">断裂韧性</a>的平均值和标准差，经改进热处理后，又测得一批数据，试问新工艺与老工艺相比是否有显著差异，这就是<strong>假设检验</strong>的问题。</p><p>这样可以看出，参数估计是假设检验的第一步，没有参数估计，也就无法完成假设检验。</p><h2 id="1-5-应用"><a href="#1-5-应用" class="headerlink" title="1.5 应用"></a>1.5 应用</h2><p>在雷达检测中，目标是产生假设的源，它可使用两个假设：H<sub>1</sub>和H<sub>0</sub>，分别表示目标存在(H<sub>1</sub>)和不存在(H<sub>0</sub>)。这是二元简单假设检验。二元数字通信问题也是简单假设检验。如果假设中含有目标未知参量，则是复合假设检验。m元通信问题也是复合假设检验。如果未知参量是随机变化的，则是随机参量信号的假设检验。</p><p>通信系统和雷达系统常用的最佳准则，是最小错误概率准则，即最大后验概率准则。以雷达检测为例：目标是源，它可使用的两个假设是H<sub>1</sub>和H<sub>0</sub>。接收端收到样本X(雷达回波)后，判定H<sub>1</sub>为真（目标存在），或判定H<sub>0</sub>为真（目标不存在概率可分别表示为p(H<sub>1</sub>|X)和p(H<sub>0</sub>|X)，称为后验概率。最大后验概率准则的判决规则是，若</p><script type="math/tex; mode=display">\frac{P(H_{1}|X)}{P(H_{2}|X)}>1</script><p>则判定H<sub>1</sub>为真(选择H<sub>1</sub>)；否则判定H<sub>0</sub>为真。</p><h1 id="2、显著性检验"><a href="#2、显著性检验" class="headerlink" title="2、显著性检验"></a>2、显著性检验</h1><p>显著性检验（significance test）就是事先对<a href="https://baike.baidu.com/item/总体/919248">总体</a>（<a href="https://baike.baidu.com/item/随机变量/828980">随机变量</a>）的参数或总体分布形式做出一个<a href="https://baike.baidu.com/item/假设/1524526">假设</a>，然后利用样本信息来判断这个假设（备择假设）是否合理，即判断总体的真实情况与原假设是否有显著性差异。或者说，显著性检验要判断样本与我们对总体所做的假设之间的差异是纯属机会变异，还是由我们所做的假设与总体真实情况之间不一致所引起的。 显著性检验是针对我们对总体所做的假设做检验，其原理就是“小概率事件实际不可能性原理”来接受或否定假设。</p><p>抽样实验会产生<a href="https://baike.baidu.com/item/抽样误差/9921064">抽样误差</a>，对实验资料进行比较分析时，不能仅凭两个结果（平均数或率）的不同就作出结论，而是要进行统计学分析，鉴别出两者差异是抽样误差引起的，还是由特定的实验处理引起的。</p><h2 id="2-1-含义"><a href="#2-1-含义" class="headerlink" title="2.1 含义"></a>2.1 含义</h2><p>显著性检验即用于实验处理组与对照组或两种不同处理的效应之间是否有差异，以及这种差异是否显著的方法。</p><p>常把一个要检验的假设记作<em>H</em><sub>0</sub>,称为原假设（或<a href="https://baike.baidu.com/item/零假设">零假设</a>） (null hypothesis) ，与<em>H</em><sub>0</sub>对立的假设记作<em>H</em><sub>1</sub>，称为备择假设(alternative hypothesis) 。</p><p>⑴ 在原假设为真时，决定放弃原假设，称为第一类错误，其出现的<a href="https://baike.baidu.com/item/概率">概率</a>通常记作α；</p><p>⑵ 在原假设不真时，决定不放弃原假设，称为第二类错误，其出现的概率通常记作β</p><p>(3)α+β 不一定等于1<sup> [2]</sup>  。</p><p>通常只限定犯第一类错误的最大概率α， 不考虑犯第二类错误的概率β。这样的假设 检验又称为显著性检验，概率α称为<a href="https://baike.baidu.com/item/显著性水平">显著性水平</a>。</p><p>最常用的α值为0.01、0.05、0.10等。一般情况下，根据研究的问题，如果放弃真假设损失大，为减少这类错误，α取值小些 ，反之，α取值大些。</p><h2 id="2-2-目的"><a href="#2-2-目的" class="headerlink" title="2.2 目的"></a>2.2 目的</h2><p>为什么要进行显著性检验进行显著性检验是为了消除第一类错误和第二类错误。通常情况下，α水平就是第一类错误。第一类错误是零假设为真却被错误拒绝的概率。第二类错误(β)是零假设为误却被错误接受的概率或是研究假设为真却被拒绝的概率。如果P值小于某个事先确定的水平，理论上则拒绝零假设，反之，如果P值大于某个事先确定的水平，理论上则不拒绝零假设。常用的显著性水平是0.05，0.01和0.001<sup>[2]</sup> 。不同的水平各有优缺点。水平越小，判定显著性的证据就越充分，但是不拒绝错误零假设的风险，犯第二类错误的可能性就越大，统计效力(就越低。选择水平不可避免地要在第一类错误和第二类错误之间做出权衡。如果犯第一类错误造成的后果不严重，比如在试探性研究中，我们可以将α水平定得高一些，如0.05或0.1。如果研究样本很小，为了提高统计效力，我们在某些研究中也不妨提高口水平。但是，如果犯第一类错误造成的后果很严重，比如我们要基于某项研究发现决定是否在全国推行某项教学改革，我们则需要将α水平定得低一些，如0.01或0.001。</p><h2 id="2-3-常用的检验"><a href="#2-3-常用的检验" class="headerlink" title="2.3 常用的检验"></a>2.3 常用的检验</h2><h3 id="2-3-1-t检验"><a href="#2-3-1-t检验" class="headerlink" title="2.3.1 t检验"></a>2.3.1 t检验</h3><p>T检验，亦称student t检验（Student’s t test），主要用于样本含量较小（例如n &lt; 30），<a href="https://baike.baidu.com/item/总体标准差/3861969">总体标准差</a>σ未知的<a href="https://baike.baidu.com/item/正态分布/829892">正态分布</a>。 [2.1]</p><blockquote id="fn_2.1"><sup>2.1</sup>. Fisher Box, Joan. Guinness, Gosset, Fisher, and Small Samples. Statistical Science. 1987, 2 (1): 45–52.<a href="#reffn_2.1" title="Jump back to footnote [2.1] in the text."> &#8617;</a></blockquote><p> T检验是用t分布理论来推论差异发生的概率，从而比较两个平均数的差异是否显著。它与f检验、<a href="https://baike.baidu.com/item/卡方检验/2591853">卡方检验</a>并列。t检验是<strong>戈斯特</strong>为了观测酿酒质量而发明的,并于1908年在Biometrika上公布 [2.2]  。</p><blockquote id="fn_2.2"><sup>2.2</sup>. 尹希果主编．计量经济学原理与操作：重庆大学出版社，2009.09：37<a href="#reffn_2.2" title="Jump back to footnote [2.2] in the text."> &#8617;</a></blockquote><p><strong>适用条件</strong></p><p>(1) 已知一个总体均数；</p><p>(2) 可得到一个<a href="https://baike.baidu.com/item/样本均数">样本均数</a>及该样本<a href="https://baike.baidu.com/item/标准差">标准差</a>；</p><p>(3) 样本来自正态或近似正态总体 [2.3]。</p><p><strong>主要分类</strong></p><p>t检验可分为单总体检验和双总体检验，以及配对样本检验 <sup>[2.1]</sup>。</p><p><strong>1）单总体检验</strong></p><p>单总体t检验是检验一个<a href="https://baike.baidu.com/item/样本平均数">样本平均数</a>与一个已知的<a href="https://baike.baidu.com/item/总体平均数">总体平均数</a>的差异是否显著。当<a href="https://baike.baidu.com/item/总体分布">总体分布</a>是正态分布，如总体标准差未知且<a href="https://baike.baidu.com/item/样本容量">样本容量</a>小于30，那么样本平均数与总体平均数的<a href="https://baike.baidu.com/item/离差">离差</a><a href="https://baike.baidu.com/item/统计量">统计量</a>呈t分布。</p><p>单总体t检验统计量为：</p><script type="math/tex; mode=display">t = \frac{\bar{X}-\mu}{\frac{\delta_{x}}{\sqrt{n-1}}}</script><p>其中，$i = 1, …, n$, $\bar{x} = \frac{\sum<em>{i=1}^{n}x</em>{i}}{n}$ 为样本平均数，$\delta$ 、$s = \sqrt{\frac{\sum<em>{i=1}^{n}(x</em>{i}-\bar{x})^{2}}{n-1}}$ 为样本标准差，$n$为样本数。该统计量$t$在零假说：$\mu = \mu_{0}$ 为真的条件下服从自由度为 n-1 的 t分布。</p><p><strong>2）双总体检验</strong></p><p><strong>双总体t检验</strong>是检验两个<a href="https://baike.baidu.com/item/样本平均数">样本平均数</a>与其各自所代表的总体的差异是否显著。双总体t检验又分为两种情况，一是独立样本t检验（各实验处理组之间毫无相关存在，即为独立样本），该检验用于检验两组非相关样本被试所获得的数据的<a href="https://baike.baidu.com/item/差异性">差异性</a>；一是配对样本t检验，用于检验匹配而成的两组被试获得的数据或同组被试在不同条件下所获得的数据的差异性，这两种情况组成的样本即为相关样本。</p><p>（1）独立样本t检验<a href="https://baike.baidu.com/item/统计量">统计量</a>为：</p><script type="math/tex; mode=display">t = \frac{\bar{X_{1}}-\bar{X_{2}}}{\sqrt{\frac{(n_{1}-1)S_{1}^{2}+(n_{2}-1)S_{2}^{2}}{n_{1}+n_{2}-2}}(\frac{1}{n_{1}}+\frac{1}{n_{2}})}</script><p>$S<em>{1}^{2}$ 和$S</em>{2}^{2}$为两<a href="https://baike.baidu.com/item/样本方差">样本方差</a>；$n<em>{1}$ 和 $n</em>{2}$为两<a href="https://baike.baidu.com/item/样本容量">样本容量</a>。 </p><p>（2）配对样本检验</p><p><strong>配对样本t检验</strong>可视为单样本<em>t</em>检验的扩展，不过检验的对象由一群来自常态分配独立样本更改为二群配对样本之观测值之差。若二配对样本<em>x</em>1<em>i</em>与<em>x</em>2<em>i</em>之差为<em>d**i</em>=<em>x</em>1<em>i</em>−<em>x</em>2<em>i</em>独立，且来自常态分配，则<em>d**i</em>之母体期望值<em>μ</em>是否为<em>μ</em>0可利用以下统计量：</p><script type="math/tex; mode=display">t = \frac{\bar{d}-\mu_{0}}{\frac{s_{d}}{\sqrt{n}}}</script><p>其中，$i = 1, …, n, \bar{d} = \frac{\sum<em>{i=1}^{n}d</em>{i}}{n}$ 为配对样本差值之平均数，$s<em>{d} = \sqrt{\frac{\sum</em>{i=1}^{n}(d<em>{i}-\bar{d})^{2}}{n-1}}$ 为配对样本差值之标准偏差，$n$ 为配对样本数。该统计量 $t$ 在零假说：$\mu = \mu</em>{0}$ 为真的条件下服从自由度为 $n−1$ 的<a href="https://baike.baidu.com/item/t分布">t分布</a>。</p><p><strong>检验步骤</strong></p><p>下面以一个实例的单总体t检验对t检验做一说明： [2.4] </p><p>问题：难产儿出生数n = 35，体重均值 $\bar{x}=3.42, S = 0.40$, 一般婴儿出生体重 μ0= 3.30（大规模调查获得），问相同否？</p><p>解：</p><p>​        <strong>1.建立假设、确定检验水准α</strong></p><p>​        H0：μ = μ0 （零假设null hypothesis）</p><p>​        H1：μ ≠ μ0（备择假设alternative hypothesis）</p><p>​        双侧检验，检验水准：α=0.05</p><p>​        <strong>2.计算检验统计量</strong></p><script type="math/tex; mode=display">t = \frac{\bar{x}-\mu_{0}}{\frac{S}{\sqrt{n}}}\\=1.77\\</script><h3 id="2-3-2-t‘-检验"><a href="#2-3-2-t‘-检验" class="headerlink" title="2.3.2 t‘ 检验"></a>2.3.2 t<sup>‘</sup> 检验</h3><h3 id="2-3-3-U检验"><a href="#2-3-3-U检验" class="headerlink" title="2.3.3 U检验"></a>2.3.3 U检验</h3><h3 id="2-3-4-方差分析"><a href="#2-3-4-方差分析" class="headerlink" title="2.3.4 方差分析"></a>2.3.4 方差分析</h3><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] 邓奋发. MATLAB R2015b概率与数理统计[M]. 北京：清华大学出版社, 2017.01.第139页.</p><p>[2] 张厚粲, 徐建平. 现代心理与教育统计学[M]. 北京师范大学出版社, 2004.</p><p>[3] 张凤菊, 刘晓娟, 赵丽平,等. 数据差异显著性检验[J]. 农机使用与维修, 2012(4):51-52.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;1、假设检验&quot;&gt;&lt;a href=&quot;#1、假设检验&quot; class=&quot;headerlink&quot; title=&quot;1、假设检验&quot;&gt;&lt;/a&gt;1、假设检验&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;假设检验&lt;/strong&gt;是&lt;a href=&quot;https://ba</summary>
      
    
    
    
    <category term="数据检验" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E6%A3%80%E9%AA%8C/"/>
    
    
    <category term="假设检验" scheme="http://example.com/tags/%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C/"/>
    
    <category term="方差分析" scheme="http://example.com/tags/%E6%96%B9%E5%B7%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
