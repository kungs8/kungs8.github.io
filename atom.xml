<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yanpenggong 大数据实验室</title>
  
  <subtitle>一个专注于科研前线的大数据团队，致力于打造更好更牛的大数据平台</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-20T09:11:26.249Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>yanpenggong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自我搭建博客</title>
    <link href="http://example.com/2022/04/20/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2022/04/20/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-04-20T09:10:20.000Z</published>
    <updated>2022-04-20T09:11:26.249Z</updated>
    
    <content type="html"><![CDATA[<div align="center">  <font size='60'>自我搭建博客</font><br>  <font size='3'>    <B>Author: </B><a href="https://blog.csdn.net/yanpenggong">yanpenggong</a>&#x3000;&#x3000;&#x3000;&#x3000;&#x3000;&#x3000;    <B>Email: </B><a href="yanpenggong@163.com">yanpenggong@163.com</a><br>    <B>Github: </B><a href="https://github.com/kungs8">kungs8</a>    &#x3000;&#x3000;&#x3000;&#x3000;    <B>CSDN: </B><a href="https://blog.csdn.net/yanpenggong">https://blog.csdn.net/yanpenggong</a>  </font></div><p>[TOC]</p><p>由于 NightTeam 的域名是 nightteam.cn，所以这里官方博客使用了二级域名 blog.nightteam.cn，官方主页使用了根域名 nightteam.cn，现在站点都已经稳定运行在 GitHub Pages 上面了，大家如果感兴趣可以去看一下。</p><p>•NightTeam HomePage：<a href="https://nightteam.cn/">https://nightteam.cn/</a></p><p>下面是两个站点的预览图：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_01.png" style="zoom:50%;" /></p><p>这个是个人搭建好的blog效果：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_02.png" alt=""></p><p>这里的主页就是用一个基本的静态页面搭建了，没有什么技术含量。博客相对复杂一点，使用了 Hexo 框架，采用了 Next 主题，在搭建的过程中我就顺手把搭建的流程大致记录下来了，在这里扩充一下形成一篇记录，毕竟好记性不如烂笔头。</p><p>于是，这篇《利用 GitHub 从零开始搭建一个博客》的文章就诞生了。</p><h1 id="一、准备条件"><a href="#一、准备条件" class="headerlink" title="一、准备条件"></a>一、准备条件</h1><p>在这里先跟大家说一些准备条件，有些同学可能一听到搭建博客就望而却步。弄个博客网站，不得有台服务器吗？不得搞数据库吗？不得注册域名吗？没事，如果都没有，那照样是能搭建一个博客的。</p><p>GitHub 是个好东西啊，它提供了 GitHub Pages 帮助我们来架设一个静态网站，这就解决了服务器的问题。</p><p>Hexo 这个博客框架没有那么重量级，它是 MarkDown 直接写文章的，然后 Hexo 可以直接将文章编译成静态网页文件并发布，所以这样文章的内容、标题、标签等信息就没必要存数据库里面了，是直接纯静态页面了，这就解决了数据库的问题。</p><p>GitHub Pages 允许每个账户创建一个名为 {username}.github.io 的仓库，另外它还会自动为这个仓库分配一个 github.io 的二级域名，这就解决了域名的问题，当然如果想要自定义域名的话，也可以支持。</p><p>所以说，基本上，先注册个 GitHub 账号就能搞了，下面我们来正式开始吧。</p><h1 id="二、新建项目"><a href="#二、新建项目" class="headerlink" title="二、新建项目"></a>二、新建项目</h1><p>首先在 GitHub 新建一个仓库（Repository），名称为 {username}.github.io，注意这个名比较特殊，必须要是 github.io 为后缀结尾的。比如 kungs8 的 GitHub 用户名就叫 yanpenggong，那我就新建一个 kungs8.github.io，新建完成之后就可以进行后续操作了。</p><p>另外如果 GitHub 没有配置 SSH 连接的建议配置一下，这样后面在部署博客的时候会更方便。</p><h1 id="三、安装环境"><a href="#三、安装环境" class="headerlink" title="三、安装环境"></a>三、安装环境</h1><h2 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1.安装 Node.js"></a>1.安装 Node.js</h2><p>首先在自己的电脑上安装 Node.js，下载地址：<a href="https://nodejs.org/zh-cn/download/，可以安装">https://nodejs.org/zh-cn/download/，可以安装</a> Stable 版本。</p><p>安装完毕之后，确保环境变量配置好，能正常使用 <code>npm</code> 命令。</p><h2 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2.安装 Hexo"></a>2.安装 Hexo</h2><p>接下来就需要安装 Hexo 了，这是一个博客框架，Hexo 官方还提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客，所以在这之前我们需要先安装 Hexo 的命令行工具。</p><p>命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完毕之后，确保环境变量配置好，能正常使用 <code>hexo</code> 命令。</p><h1 id="四、初始化项目"><a href="#四、初始化项目" class="headerlink" title="四、初始化项目"></a>四、初始化项目</h1><p>接下来我们使用 Hexo 的命令行创建一个项目，并将其在本地跑起来，整体跑通看看。</p><p>首先使用如下命令创建项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &#123;name&#125;</span><br></pre></td></tr></table></figure><p>这里的 name 就是项目名，我这里要创建 <code>yanpenggong</code> 的博客，我就把项目取名为 <code>yanpenggong</code> 了，用了纯小写，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init yanpenggong</span><br></pre></td></tr></table></figure><p>这样 yanpenggong 文件夹下就会出现 Hexo 的初始化文件，包括 themes、scaffolds、source 等文件夹，这些内容暂且先不用管是做什么的，我们先知道有什么，然后一步步走下去看看都发生了什么变化。</p><p>接下来我们首先进入新生成的文件夹里面，然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac GitBlogLearning % cd yanpenggong</span><br><span class="line">(base) kungs@kungsMac yanpenggong % npm install</span><br><span class="line">(base) kungs@kungsMac yanpenggong % hexo generate</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac GitBlogLearning % cd yanpenggong </span><br><span class="line">(base) kungs@kungsMac yanpenggong % npm install</span><br><span class="line">npm WARN deprecated source-map-url@0.4.1: See https://github.com/lydell/source-map-url#deprecated</span><br><span class="line">npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated</span><br><span class="line">npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated</span><br><span class="line">npm WARN deprecated source-map-resolve@0.5.3: See https://github.com/lydell/source-map-resolve#deprecated</span><br><span class="line"></span><br><span class="line">added 250 packages, and audited 251 packages in 40s</span><br><span class="line"></span><br><span class="line">18 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"></span><br><span class="line">found 0 vulnerabilities</span><br><span class="line">(base) kungs@kungsMac yanpenggong % hexo generate</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 148 ms</span><br><span class="line">(node:46252) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:46252) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:46252) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:46252) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:46252) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:46252) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: archives/2022/index.html</span><br><span class="line">INFO  Generated: archives/2022/04/index.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: js/script.js</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.css</span><br><span class="line">INFO  Generated: css/style.css</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff2</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.js</span><br><span class="line">INFO  Generated: js/jquery-3.4.1.min.js</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff</span><br><span class="line">INFO  Generated: css/fonts/FontAwesome.otf</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.ttf</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.eot</span><br><span class="line">INFO  Generated: 2022/04/20/hello-world/index.html</span><br><span class="line">INFO  Generated: css/images/banner.jpg</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.svg</span><br><span class="line">INFO  17 files generated in 486 ms</span><br></pre></td></tr></table></figure><p>可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。</p><p>然后我们利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo serve</span><br></pre></td></tr></table></figure><p>运行之后命令行输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>它告诉我们在本地 4000 端口上就可以查看博客站点了，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_03.png" style="zoom:50%;" /></p><p>这样一个博客的架子就出来了，我们只用了三个命令就完成了。</p><h1 id="五、部署设置"><a href="#五、部署设置" class="headerlink" title="五、部署设置"></a>五、部署设置</h1><p>接下来我们来将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。</p><p>那么怎么把这个页面部署到 GitHub Pages 上面呢，其实 Hexo 已经给我们提供一个命令，利用它我们可以直接将博客一键部署，不需要手动去配置服务器或进行其他的各项配置。</p><p>部署命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo deploy</span><br><span class="line">INFO  Validating config</span><br></pre></td></tr></table></figure><p>在部署之前，我们需要先知道博客的部署地址，它需要对应 GitHub 的一个 Repository 的地址，这个信息需要我们来配置一下。</p><p>打开根目录下的 _config.yml 文件，找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &#123;git repo ssh address&#125;</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>我的就修改为如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:kungs8/kungs8.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>另外我们还需要额外安装一个支持 Git 的部署插件，名字叫做 hexo-deployer-git，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer not found: git</span><br></pre></td></tr></table></figure><p>好，那就让我们安装下这个插件，在项目目录下执行安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装成功之后，执行部署命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo deploy</span><br></pre></td></tr></table></figure><p>运行结果类似如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo deploy                         </span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Setting up Git deployment...</span><br><span class="line">已初始化空的 Git 仓库于 /Users/kungs/GGG/GitLearning/GitBlogLearning/yanpenggong/.deploy_git/.git/</span><br><span class="line">[master（根提交） 9358c6b] First commit</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 placeholder</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">[master 2040ad5] Site updated: 2022-04-20 11:27:22</span><br><span class="line"> 18 files changed, 5174 insertions(+)</span><br><span class="line"> create mode 100644 2022/04/20/hello-world/index.html</span><br><span class="line"> create mode 100644 archives/2022/04/index.html</span><br><span class="line"> create mode 100644 archives/2022/index.html</span><br><span class="line"> create mode 100644 archives/index.html</span><br><span class="line"> create mode 100644 css/fonts/FontAwesome.otf</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.eot</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.svg</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.ttf</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.woff</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.woff2</span><br><span class="line"> create mode 100644 css/images/banner.jpg</span><br><span class="line"> create mode 100644 css/style.css</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.min.css</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.min.js</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line"> create mode 100644 js/jquery-3.4.1.min.js</span><br><span class="line"> create mode 100644 js/script.js</span><br><span class="line"> delete mode 100644 placeholder</span><br><span class="line">枚举对象中: 34, 完成.</span><br><span class="line">对象计数中: 100% (34/34), 完成.</span><br><span class="line">使用 4 个线程进行压缩</span><br><span class="line">压缩对象中: 100% (26/26), 完成.</span><br><span class="line">写入对象中: 100% (34/34), 882.40 KiB | 2.38 MiB/s, 完成.</span><br><span class="line">总共 34（差异 3），复用 0（差异 0），包复用 0</span><br><span class="line">remote: Resolving deltas: 100% (3/3), done.</span><br><span class="line">remote: </span><br><span class="line">remote: Create a pull request for &#x27;master&#x27; on GitHub by visiting:</span><br><span class="line">remote:      https://github.com/kungs8/kungs8.github.io/pull/new/master</span><br><span class="line">remote: </span><br><span class="line">To github.com:kungs8/kungs8.github.io.git</span><br><span class="line"> * [new branch]      HEAD -&gt; master</span><br><span class="line">分支 &#x27;master&#x27; 设置为跟踪来自 &#x27;git@github.com:kungs8/kungs8.github.io.git&#x27; 的远程分支 &#x27;master&#x27;。</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure><p>如果出现类似上面的内容，就证明我们的博客已经成功部署到 GitHub Pages 上面了，这时候我们访问一下 GitHub Repository 同名的链接，比如我的 kungs8 博客的 Repository 名称取的是 kungs8.github.io，那我就访问 <a href="http://kungs8.github.io，这时候我们就可以看到跟本地一模一样的博客内容了。">http://kungs8.github.io，这时候我们就可以看到跟本地一模一样的博客内容了。</a></p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_04.png" style="zoom:50%;" /></p><p>这时候我们去 GitHub 上面看看 Hexo 上传了什么内容，打开之后可以看到 master 分支有了这样的内容：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_05.png" style="zoom:50%;" /></p><p>仔细看看，这实际上是博客文件夹下面的 public 文件夹下的所有内容，Hexo 把编译之后的静态页面内容上传到 GitHub 的 master 分支上面去了。</p><p>这时候可能就有人有疑问了，那我博客的源码也想放到 GitHub 上面怎么办呢？其实很简单，新建一个其他的分支就好了，比如我这边就新建了一个 source 分支，代表博客源码的意思。</p><p>具体的添加过程就很简单了，参加如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git checkout -b source</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;init blog&quot;</span><br><span class="line">git remote add origin git@github.com:&#123;username&#125;/&#123;username&#125;.github.io.git</span><br><span class="line">git push origin source</span><br></pre></td></tr></table></figure><p>成功之后，可以到 GitHub 上再切换下默认分支，比如我就把默认的分支设置为了 source，当然不换也可以。</p><h2 id="1-配置站点信息"><a href="#1-配置站点信息" class="headerlink" title="1. 配置站点信息"></a>1. 配置站点信息</h2><p>完成如上内容之后，实际上我们只完成了博客搭建的一小步，因为我们仅仅是把初始化的页面部署成功了，博客里面还没有设置任何有效的信息。下面就让我们来进行一下博客的基本配置，另外换一个好看的主题，配置一些其他的内容，让博客真正变成属于我们自己的博客吧。</p><p>下面我就以自己的站点 NightTeam 为例，修改一些基本的配置，比如站点名、站点描述等等。</p><p>修改根目录下的 _config.yml 文件，找到 Site 区域，这里面可以配置站点标题 title、副标题 subtitle 等内容、关键字 keywords 等内容，比如我的就修改为如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">yanpenggong大数据实验室</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">一个专注于科研前线的大数据团队，致力于打造更好更牛的大数据平台</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">涉猎的主要编程语言为</span> <span class="string">Python、C++、Matlab、R，领域涵盖爬虫、数据挖掘、深度学习、良率分析、目标检测、工业异常检测、服务研发和对象存储等。</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">&quot;Python, C++, Matlab, R, 爬虫, 数据挖掘, 深度学习, 良率分析, 目标检测, 工业异常检测, 服务研发, 对象存储&quot;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">yanpenggong</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> </span><br></pre></td></tr></table></figure><p>这里大家可以参照格式把内容改成自己的。</p><p>另外还可以设置一下语言，如果要设置为汉语的话可以将 language 的字段设置为 zh-CN，修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure><p>这样就完成了站点基本信息的配置，完成之后可以看到一些基本信息就修改过来了，页面效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_06.png" style="zoom:50%;" /></p><h2 id="2-修改主题"><a href="#2-修改主题" class="headerlink" title="2. 修改主题"></a>2. 修改主题</h2><p>目前来看，整个页面的样式个人感觉并不是那么好看，想换一个风格，这就涉及到主题的配置了。目前 Hexo 里面应用最多的主题基本就是 Next 主题了，个人感觉这个主题还是挺好看的，另外它支持的插件和功能也极为丰富，配置了这个主题，我们的博客可以支持更多的扩展功能，比如阅览进度条、中英文空格排版、图片懒加载等等。</p><p>那么首先就让我们来安装下 Next 这个主题吧，目前 Next 主题已经更新到 7.x 版本了，我们可以直接到 Next 主题的 GitHub Repository 上把这个主题下载下来。</p><p>主题的 GitHub 地址是：<a href="https://github.com/theme-next/hexo-theme-next，我们可以直接把">https://github.com/theme-next/hexo-theme-next，我们可以直接把</a> master 分支 Clone 下来。</p><p>首先命令行进入到项目的根目录，执行如下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line">正克隆到 &#x27;themes/next&#x27;...</span><br><span class="line">remote: Enumerating objects: 12582, done.</span><br><span class="line">remote: Total 12582 (delta 0), reused 0 (delta 0), pack-reused 12582</span><br><span class="line">接收对象中: 100% (12582/12582), 8.03 MiB | 533.00 KiB/s, 完成.</span><br><span class="line">处理 delta 中: 100% (7990/7990), 完成.</span><br></pre></td></tr></table></figure><p>执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。</p><p>然后我们需要修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>然后本地重新开启服务，访问刷新下页面，就可以看到 next 主题就切换成功了，预览效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_07.png" style="zoom:50%;" /></p><h2 id="3-主题配置"><a href="#3-主题配置" class="headerlink" title="3. 主题配置"></a>3. 主题配置</h2><p>现在我们已经成功切换到 next 主题上面了，接下来我们就对主题进行进一步地详细配置吧，比如修改样式、增加其他各项功能的支持，下面逐项道来。</p><p>Next 主题内部也提供了一个配置文件，名字同样叫做 <code>_config.yml</code>，只不过位置不一样，它在 themes/next 文件夹下，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 <code>themes/next/_config.yml</code> 文件。</p><h3 id="3-1-样式"><a href="#3-1-样式" class="headerlink" title="3.1. 样式"></a>3.1. 样式</h3><p>Next 主题还提供了多种样式，风格都是类似黑白的搭配，但整个布局位置不太一样，通过修改配置文件的 scheme 字段即可，我选了 Pisces 样式，修改 <code>_config.yml</code> （注意是 <code>themes/next/_config.yml</code> 文件）如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br></pre></td></tr></table></figure><p>刷新页面之后就会变成这种样式，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_08.png" style="zoom:50%;" /></p><p>另外还有几个可选项，比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><p>大家可以自行根据喜好选择。</p><h3 id="3-2-favicon"><a href="#3-2-favicon" class="headerlink" title="3.2. favicon"></a>3.2. favicon</h3><p>favicon 就是站点标签栏的小图标，默认是用的 Hexo 的小图标，如果我们有站点 Logo 的图片的话，我们可以自己定制小图标。</p><p>但这并不意味着我们需要自己用 PS 自己来设计，已经有一个网站可以直接将图片转化为站点小图标，站点链接为：<a href="https://realfavicongenerator.net，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。">https://realfavicongenerator.net，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。</a></p><p>图标下载下来之后把它放在 themes/next/source/images 目录下面。</p><p>然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/safari-pinned-tab.svg</span></span><br></pre></td></tr></table></figure><p>配置完成之后刷新页面，整个页面的标签图标就被更新了。</p><h3 id="3-3-avatar"><a href="#3-3-avatar" class="headerlink" title="3.3. avatar"></a>3.3. avatar</h3><p>avatar 这个就类似站点的头像，如果设置了这个，会在站点的作者信息旁边额外显示一个头像，比如我这边有一张 cat.jpg 图片：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_cat.jpg" style="zoom:50%;" /></p><p>将其放置到 <code>themes/next/source/images/cat.jpg</code> 路径，然后在主题 <code>themes/next/_config.yml</code> 文件下编辑 avatar 的配置，修改为正确的路径即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/cat.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这里有 rounded 选项是是否显示圆形，rotated 是是否带有旋转效果，大家可以根据喜好选择是否开启。</p><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_09.png" style="zoom:50%;" /></p><p>配置完成之后就会显示头像。</p><h3 id="3-4-rss"><a href="#3-4-rss" class="headerlink" title="3.4. rss"></a>3.4. rss</h3><p>博客一般是需要 RSS 订阅的，如果要开启 RSS 订阅，这里需要安装一个插件，叫做 hexo-generator-feed，安装完成之后，站点会自动生成 RSS Feed 文件，安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在项目根目录下运行这个命令，安装完成之后不需要其他的配置，以后每次编译生成站点的时候就会自动生成 RSS Feed 文件了。</p><h3 id="3-5-code"><a href="#3-5-code" class="headerlink" title="3.5. code"></a>3.5. code</h3><p>作为程序猿，代码块的显示还是需要很讲究的，默认的代码块我个人不是特别喜欢，因此我把代码的颜色修改为黑色，并把复制按钮的样式修改为类似 Mac 的样式，修改 <code>themes/next/_config.yml</code> 文件的 codeblock 区块如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">bright</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure><p>修改前的代码样式：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_10.png" style="zoom:50%;" /></p><p>修改后的代码样式：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_11.png" style="zoom:50%;" /></p><p>嗯，个人觉得整体看起来逼格高了不少。</p><h3 id="3-6-top"><a href="#3-6-top" class="headerlink" title="3.6. top"></a>3.6. top</h3><p>我们在浏览网页的时候，如果已经看完了想快速返回到网站的上端，一般都是有一个按钮来辅助的，这里也支持它的配置，修改 <code>themes/next/_config.yml</code> 的 back2top 字段即可，我的设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>enable 默认为 true，即默认显示。sidebar 如果设置为 true，按钮会出现在侧栏下方，个人觉得并不是很好看，就取消了，scrollpercent 就是显示阅读百分比，个人觉得还不错，就将其设置为 true。</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_12.png" style="zoom:50%;" /></p><p>具体的效果大家可以设置后根据喜好选择。</p><h3 id="3-7-reading-process"><a href="#3-7-reading-process" class="headerlink" title="3.7. reading_process"></a>3.7. reading_process</h3><p>reading_process，阅读进度。大家可能注意到有些站点的最上侧会出现一个细细的进度条，代表页面加载进度和阅读进度，如果大家想设置的话也可以试试，我将其打开了，修改  <code>themes/next/_config.yml</code>  如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="attr">height: 2pxreading_progress:  enable:</span> <span class="literal">true</span>  <span class="comment"># Available values: top | bottom  position: top  color: &quot;#222&quot;  height: 2px</span></span><br></pre></td></tr></table></figure><p>设置之后显示效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_13.png" style="zoom:50%;" /></p><h3 id="3-8-bookmark"><a href="#3-8-bookmark" class="headerlink" title="3.8. bookmark"></a>3.8. bookmark</h3><p>书签，可以根据阅读历史记录，在下次打开页面的时候快速帮助我们定位到上次的位置，大家可以根据喜好开启和关闭，我的<code>themes/next/_config.yml</code> 配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><h3 id="3-9-github-banner"><a href="#3-9-github-banner" class="headerlink" title="3.9. github_banner"></a>3.9. github_banner</h3><p>在一些技术博客上，大家可能注意到在页面的右上角有个 GitHub 图标，点击之后可以跳转到其源码页面，可以为 GitHub Repository 引流，大家如果想显示的话可以自行选择打开，我的<code>themes/next/_config.yml</code> 配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/kungs8/kungs8.github.io/tree/master</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">kungs</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure><p>记得修改下链接 permalink 和标题 title，显示效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_14.png" style="zoom:50%;" /></p><p>可以看到在页面右上角显示了 GitHub 的图标，点击可以进去到 Repository 页面。</p><h3 id="3-10-gitalk"><a href="#3-10-gitalk" class="headerlink" title="3.10. gitalk"></a>3.10. gitalk</h3><p>由于 Hexo 的博客是静态博客，而且也没有连接数据库的功能，所以它的评论功能是不能自行集成的，但可以集成第三方的服务。</p><p>Next 主题里面提供了多种评论插件的集成，有 changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte 这些。</p><p>作为一名程序员，我个人比较喜欢 gitalk，它是利用 GitHub 的 Issue 来当评论，样式也比较不错。</p><p>首先需要在 GitHub 上面注册一个 OAuth Application，链接为：<a href="https://github.com/settings/applications/new，注册完毕之后拿到">https://github.com/settings/applications/new，注册完毕之后拿到</a> Client ID、Client Secret 就可以了。</p><p>首先需要在 _config.yml 文件的 comments 区域配置使用 gitalk：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">gitalk</span></span><br></pre></td></tr></table></figure><p>主要是 comments.active 字段选择对应的名称即可。</p><p>然后找打 gitalk 配置，添加它的各项配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># Demo: https://gitalk.github.io</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">NightTeam</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">nightteam.github.io</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> &#123;<span class="string">your</span> <span class="string">client</span> <span class="string">id</span>&#125; <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> &#123;<span class="string">your</span> <span class="string">client</span> <span class="string">secret</span>&#125; <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">germey</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><p>配置完成之后 gitalk 就可以使用了，点击进入文章页面。</p><p>GitHub 授权登录之后就可以使用了，评论的内容会自动出现在 Issue 里面。</p><h3 id="3-11-pangu"><a href="#3-11-pangu" class="headerlink" title="3.11. pangu"></a>3.11. pangu</h3><p>我个人有个强迫症，那就是写中文和英文的时候中间必须要留有间距，一个简单直接的方法就是中间加个空格，但某些情况下可能习惯性不加或者忘记加了，这就导致中英文混排并不是那么美观。</p><p>pangu 就是来解决这个问题的，我们只需要在主题里面开启这个选项，在编译生成页面的时候，中英文之间就会自动添加空格，看起来更加美观。</p><p>具体的<code>themes/next/_config.yml</code>修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pangu:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="3-12-math"><a href="#3-12-math" class="headerlink" title="3.12. math"></a>3.12. math</h3><p>可能在一些情况下我们需要写一个公式，比如演示一个算法推导过程，MarkDown 是支持公式显示的，Hexo 的 Next 主题同样是支持的。</p><p>Next 主题提供了两个渲染引擎，分别是 mathjax 和 katex，后者相对前者来说渲染速度更快，而且不需要 JavaScript 的额外支持，但后者支持的功能现在还不如前者丰富，具体的对比可以看官方文档：<a href="https://theme-next.org/docs/third-party-services/math-equations。">https://theme-next.org/docs/third-party-services/math-equations。</a></p><p>所以我这里选择了 mathjax，通过修改配置即可启用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>mathjax 的使用需要我们额外安装一个插件，叫做 hexo-renderer-kramed，另外也可以安装 hexo-renderer-pandoc，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % npm un hexo-renderer-marked --save</span><br><span class="line">(base) kungs@kungsMac yanpenggong % npm i hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>另外还有其他的插件支持，大家可以到官方文档查看。</p><h3 id="3-13-pjax"><a href="#3-13-pjax" class="headerlink" title="3.13. pjax"></a>3.13. pjax</h3><p>可能大家听说过 Ajax，没听说过 pjax，这个技术实际上就是利用 Ajax 技术实现了局部页面刷新，既可以实现 URL 的更换，有可以做到无刷新加载。</p><p>要开启这个功能需要先将 pjax 功能开启，然后安装对应的 pjax 依赖库，首先修改 <code>themes/next/_config.yml</code> 修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后安装依赖库，切换到 next 主题下，然后安装依赖库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % cd themes/next </span><br><span class="line">(base) kungs@kungsMac next % git clone https://github.com/theme-next/theme-next-pjax source/lib/pjax</span><br></pre></td></tr></table></figure><p>这样 pjax 就开启了，页面就可以实现无刷新加载了。</p><p>另外关于 Next 主题的设置还有挺多的，这里就介绍到这里了，更多的主题设置大家可以参考官方文档：<a href="https://theme-next.org/docs/。">https://theme-next.org/docs/。</a></p><h1 id="六、文章"><a href="#六、文章" class="headerlink" title="六、文章"></a>六、文章</h1><p>现在整个站点只有一篇文章，那么我们怎样来增加其他的文章呢？</p><p>这个很简单，只需要调用 Hexo 提供的命令即可，比如我们要新建一篇「HelloWorld」的文章，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo new hello-world</span><br></pre></td></tr></table></figure><p>创建的文章会出现在 <code>source/_posts</code> 文件夹下，是 MarkDown 格式。</p><p>在文章开头通过如下格式添加必要信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题 # 自动创建，如 hello-world</span><br><span class="line">date: 日期 # 自动创建，如 2022-04-20 15:54:14</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">-</span> 标签1</span><br><span class="line"><span class="bullet">-</span> 标签2</span><br><span class="line"><span class="bullet">-</span> 标签3</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> 分类1</span><br><span class="line"><span class="section">- 分类2</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>开头下方撰写正文，MarkDown 格式书写即可。</p><p>这样在下次编译的时候就会自动识别标题、时间、类别等等，另外还有其他的一些参数设置，可以参考文档：<a href="https://hexo.io/zh-cn/docs/writing.html。">https://hexo.io/zh-cn/docs/writing.html。</a></p><h2 id="1-标签页"><a href="#1-标签页" class="headerlink" title="1. 标签页"></a>1. 标签页</h2><p>现在我们的博客只有首页、文章页，如果我们想要增加标签页，可以自行添加，这里 Hexo 也给我们提供了这个功能，在根目录执行命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo new page tags</span><br></pre></td></tr></table></figure><p>执行这个命令之后会自动帮我们生成一个 source/tags/index.md 文件，内容就只有这样子的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line"><span class="section">date: 2022-04-20 15:55:41</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>我们可以上面的后面自行添加一个 type 字段来指定页面的类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type: tags</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><p>然后再在主题的 <code>themes/next/_config.yml</code> 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  #categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><p>这样重新本地启动看下页面状态，效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_15.png" style="zoom:50%;" /></p><p>可以看到左侧导航也出现了标签，点击之后右侧会显示标签的列表。</p><h2 id="2-分类页"><a href="#2-分类页" class="headerlink" title="2. 分类页"></a>2. 分类页</h2><p>分类功能和标签类似，一个文章可以对应某个分类，如果要增加分类页面可以使用如下命令创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % hexo new page categories</span><br></pre></td></tr></table></figure><p>然后同样地，会生成一个 source/categories/index.md 文件。</p><p>我们可以自行添加一个 type 字段来指定页面的类型：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type: categories</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><p>然后再在主题的 <code>themes/next/_config.yml</code>文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span>  </span><br><span class="line"><span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span>  </span><br><span class="line"><span class="comment">#about: /about/ || user</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line"><span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>这样页面就会增加分类的支持，效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_16.png" style="zoom:50%;" /></p><h2 id="3-搜索页"><a href="#3-搜索页" class="headerlink" title="3. 搜索页"></a>3. 搜索页</h2><p>很多情况下我们需要搜索全站的内容，所以一个搜索功能的支持也是很有必要的。</p><p>如果要添加搜索的支持，需要先安装一个插件，叫做 hexo-generator-searchdb，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>然后在项目的 _config.yml 里面添加搜索设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>然后在主题的 <code>themes/next/_config.yml</code> 里面修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">5</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这里用的是 Local Search，如果想启用其他是 Search Service 的话可以参考官方文档：<a href="https://theme-next.org/docs/third-party-services/search-services。">https://theme-next.org/docs/third-party-services/search-services。</a></p><h2 id="4-404-页面"><a href="#4-404-页面" class="headerlink" title="4. 404 页面"></a>4. 404 页面</h2><p>另外还需要添加一个 404 页面，直接在根目录 source 文件夹新建一个 404.md 文件即可，内容可以仿照如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found</span><br><span class="line"><span class="section">date: 2022-04-20 16:15:02</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span><br><span class="line">对不起，您所访问的页面不存在或者已删除。</span><br><span class="line">您可以<span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://kungs8.github.io/archives/&gt;</span></span></span>&quot;&gt;点击此处<span class="language-xml"><span class="tag"><span class="string">&lt;/a&gt;</span></span></span>返回首页。</span><br><span class="line"><span class="language-xml"><span class="tag"><span class="string">&lt;/center&gt;</span></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag"><span class="string">&lt;blockquote class=&quot;</span><span class="attr">blockquote-center</span>&quot;&gt;</span></span></span><br><span class="line"><span class="code">    yanpenggong</span></span><br><span class="line"><span class="code">&lt;/blockquote&gt;</span></span><br></pre></td></tr></table></figure><p>这里面的一些相关信息和链接可以替换成自己的。</p><p>增加了这个 404 页面之后就可以</p><p>完成了上面的配置基本就完成了大半了，其实 Hexo 还有很多很多功能，这里就介绍不过来了，大家可以直接参考官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a> 查看更多的配置。</p><h1 id="七、部署脚本"><a href="#七、部署脚本" class="headerlink" title="七、部署脚本"></a>七、部署脚本</h1><p>最后我这边还增加了一个简易版的部署脚本，其实就是重新 gererate 下文件，然后重新部署。在根目录下新建一个 deploy.sh 的脚本文件，内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这样我们在部署发布的时候只需要执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) kungs@kungsMac yanpenggong % sh deploy.sh</span><br></pre></td></tr></table></figure><p>就可以完成博客的更新了，非常简单。</p><h1 id="八、自定义域名"><a href="#八、自定义域名" class="headerlink" title="八、自定义域名"></a>八、自定义域名</h1><p>将页面修改之后可以用上面的脚本重新部署下博客，其内容便会跟着更新。</p><p>另外我们也可以在 GitHub 的 Repository 里面设置域名，找到 Settings，拉到下面，可以看到有个 GitHub Pages 的配置项，如图所示：</p><p>如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/kungs8/blog_imgs/%E8%87%AA%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_imgs_17.png" style="zoom:50%;" /></p><p>下面有个 custom domain 的选项，输入你想自定义的域名地址，然后添加 CNAME 解析就好了。</p><p>另外下面还有一个 Enforce HTTPS 的选项，GitHub Pages 会在我们配置自定义域名之后自动帮我们配置 HTTPS 服务。刚配置完自定义域名的时候可能这个选项是不可用的，一段时间后等到其可以勾选了，直接勾选即可，这样整个博客就会变成 HTTPS 的协议的了。</p><p>另外有一个值得注意的地方，如果配置了自定义域名，在目前的情况下，每次部署的时候这个自定义域名的设置是会被自动清除的。所以为了避免这个情况，我们需要在项目目录下面新建一个 CNAME 文件，路径为 source/CNAME，内容就是自定义域名。</p><p>比如我就在 source 目录下新建了一个 CNAME 文件，内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog.nightteam.cn</span><br></pre></td></tr></table></figure><p>这样避免了每次部署的时候自定义域名被清除的情况了。</p><p>以上就是从零搭建一个 Hexo 博客的流程，希望对大家有帮助。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div align=&quot;center&quot;&gt;
  &lt;font size=&#39;60&#39;&gt;自我搭建博客&lt;/font&gt;&lt;br&gt;
  &lt;font size=&#39;3&#39;&gt;
    &lt;B&gt;Author: &lt;/B&gt;&lt;a href=&quot;https://blog.csdn.net/yanpenggong&quot;&gt;ya</summary>
      
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>数据的假设检验和显著性检验</title>
    <link href="http://example.com/2022/04/20/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C%E5%92%8C%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E9%AA%8C/"/>
    <id>http://example.com/2022/04/20/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C%E5%92%8C%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E9%AA%8C/</id>
    <published>2022-04-20T08:51:15.000Z</published>
    <updated>2022-04-20T08:53:28.709Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1、假设检验"><a href="#1、假设检验" class="headerlink" title="1、假设检验"></a>1、假设检验</h1><p><strong>假设检验</strong>是<a href="https://baike.baidu.com/item/推论统计">推论统计</a>中用于检验统计假设的一种方法。而“统计假设”是可通过观察一组<a href="https://baike.baidu.com/item/随机变量">随机变量</a>的模型进行检验的科学<a href="https://baike.baidu.com/item/假说">假说</a>。<sup>[1]</sup>一旦能估计未知<a href="https://baike.baidu.com/item/参数">参数</a>，就会希望根据结果对未知的真正参数值做出适当的推论。</p><p>统计上对参数的假设，就是对一个或多个参数的论述。而其中欲检验其正确性的为<a href="https://baike.baidu.com/item/零假设">零假设</a>（null hypothesis），零假设通常由研究者决定，反映研究者对未知参数的看法。相对于<a href="https://baike.baidu.com/item/零假设">零假设</a>的其他有关参数之论述是<a href="https://baike.baidu.com/item/备择假设">备择假设</a>（alternative hypothesis），它通常反映了执行检定的研究者对参数可能数值的另一种（对立的）看法（换句话说，备择假设通常才是研究者最想知道的）。</p><p>假设检验的种类包括：<a href="https://baike.baidu.com/item/t检验">t检验</a>，<a href="https://baike.baidu.com/item/Z检验">Z检验</a>，<a href="https://baike.baidu.com/item/卡方检验">卡方检验</a>，<a href="https://baike.baidu.com/item/F检验">F检验</a>等等。</p><h2 id="1-1-基本思想"><a href="#1-1-基本思想" class="headerlink" title="1.1 基本思想"></a>1.1 基本思想</h2><p>​        假设检验的基本思想是小概率<a href="https://baike.baidu.com/item/反证法">反证法</a>思想。小概率思想是指小概率事件（P<0.01或P<0.05）在一次试验中基本上不会发生。[反证法](https://baike.baidu.com/item/反证法) 思想是先提出假设(检验假设H<sub>0&lt;/sub&gt;)，再用适当的统计方法确定假设成立的可能性大小，如可能性小，则认为假设不成立，若可能性大，则还不能认为假设不成立。</p><p>​        假设是否正确，要用从总体中抽出的样本进行检验，与此有关的理论和方法，构成假设检验的内容。设<strong>A</strong>是关于总体分布的一项命题，所有使命题<strong>A</strong>成立的总体分布构成一个集合<em>h</em><sub>0</sub>，称为原假设(常简称假设)。使命题<strong>A</strong>不成立的所有<a href="https://baike.baidu.com/item/总体分布">总体分布</a>构成另一个集合<em>h</em>1，称为备择假设。如果<em>h</em><sub>0</sub>可以通过有限个实参数来描述，则称为参数假设，否则称为非参数假设(见<a href="https://baike.baidu.com/item/非参数统计">非参数统计</a>)。如果<em>h</em><sub>0</sub>(或<em>h</em>1)只包含一个分布，则称原假设(或备择假设)为<a href="https://baike.baidu.com/item/简单假设">简单假设</a>，否则为<a href="https://baike.baidu.com/item/复合假设">复合假设</a>。对一个假设<em>h</em><sub>0</sub>进行检验，就是要制定一个规则，使得有了样本以后，根据这规则可以决定是接受它（承认命题<strong>A</strong>正确），还是拒绝它（否认命题<strong>A</strong>正确）。这样，所有可能的样本所组成的空间（称<a href="https://baike.baidu.com/item/样本空间">样本空间</a>）被划分为两部分HA和HR(HA的补集)，当样本<em>x</em>∈HA时，接受假设<em>h</em><sub>0</sub>；当<em>x</em>∈HR时，拒绝<em>h</em><sub>0</sub>。集合HR常称为检验的<a href="https://baike.baidu.com/item/拒绝域">拒绝域</a>，HA称为接受域。因此选定一个检验法，也就是选定一个拒绝域，故常把检验法本身与拒绝域HR等同起来。</p><h2 id="1-2-基本方法"><a href="#1-2-基本方法" class="headerlink" title="1.2 基本方法"></a>1.2 基本方法</h2><p>​        <a href="https://baike.baidu.com/item/显著性检验"><strong>显著性检验</strong></a> 有时，根据一定的理论或经验，认为某一假设<em>h</em><sub>0</sub>成立，例如，通常有理由认为特定的一群人的身高服从正态分布。当收集了一定数据后，可以评价实际数据与理论假设<em>h</em><sub>0</sub>之间的偏离，如果偏离达到了“显著”的程度就拒绝<em>h</em><sub>0</sub>，这样的检验方法称为显著性检验。偏离达到显著的程度通常是指定一个很小的正数<em>α</em>（如0.05，0.01），使当<em>h</em><sub>0</sub>正确时，它被拒绝的概率不超过<em>α</em>，称<em>α</em>为<a href="https://baike.baidu.com/item/显著性水平">显著性水平</a>。这种假设检验问题的特点是不考虑备择假设，考虑实验数据与理论之间<a href="https://baike.baidu.com/item/拟合">拟合</a>的程度如何，故此时又称为<a href="https://baike.baidu.com/item/拟合优度检验">拟合优度检验</a>。拟合优度检验是一类重要的显著性检验。<sup> [1]</sup> </p><p>​        K.皮尔森在1900年提出的Ⅹ检验是一个重要的拟合优度检验。设原假设<em>h</em><sub>0</sub>是：“总体分布等于某个已知的<a href="https://baike.baidu.com/item/分布函数">分布函数</a><em>F</em>(<em>x</em>)”。把(－∞，∞)分为若干个两两无公共点的<a href="https://baike.baidu.com/item/区间">区间</a><em>I</em>1，<em>I</em>2，…，<em>I</em>k，对任一个区间，以<em>v</em>j记大小为<em>n</em>的样本<em>X</em>1，<em>X</em>2，…，<em>X</em>n中落在<em>I</em>j内的个数，称为区间<em>I</em>j的观测<a href="https://baike.baidu.com/item/频数">频数</a>，另外，求出<em>I</em>j的理论频数(对<em>j</em>=1，2，…，<em>k</em>都这样做)，再算出由下式定义的Ⅹ统计量，皮尔森证明了：若对<em>j</em>=1，2，…，<em>k</em>，则当<em>n</em>→∞时，Ⅹ的极限分布是<a href="https://baike.baidu.com/item/自由度">自由度</a>为<em>k</em>-1的Ⅹ分布。于是在样本大小<em>n</em>相当大时，从Ⅹ分布表可查得Ⅹ分布的上<em>α</em><a href="https://baike.baidu.com/item/分位数">分位数</a>（见<a href="https://baike.baidu.com/item/概率分布">概率分布</a>）Ⅹ(<em>k</em>-1)。由此即得检验水平为<em>α</em>的拒绝域：{Ⅹ≥Ⅹα(<em>k</em>-1)}。如果原假设<em>h</em><sub>0</sub>为:总体服从分布族{<em>F</em>θ，<em>θ</em>∈嘷}，式中<em>θ</em>为未知参数，嘷为<em>θ</em>的所有可能取值的集合（称<a href="https://baike.baidu.com/item/参数空间">参数空间</a>），也可得到类似的拒绝域，只要在计算理论<a href="https://baike.baidu.com/item/频数">频数</a><em>v</em>j时，将所包含的未知参数<em>θ</em>用适当的<a href="https://baike.baidu.com/item/点估计">点估计</a>代替，即可计算 Ⅹ统计量。但此时极限分布的自由度为 <em>k</em>-Л-1，式中Л为<em>θ</em>中的独立参数的个数。<a href="https://baike.baidu.com/item/柯尔莫哥洛夫">柯尔莫哥洛夫</a>检验（见<a href="https://baike.baidu.com/item/非参数统计">非参数统计</a>）也是一个重要的拟合优度检验方法。</p><p>​        <strong>奈曼-皮尔森理论</strong> 　J.奈曼与 E.S.皮尔森合作，从1928年开始，对假设检验提出了一项系统的理论。他们认为，在检验一个假设<em>h</em><sub>0</sub>时可能犯两类错误：</p><p>​        第一类错误是真实情况为<em>h</em><sub>0</sub>成立(即θ∈嘷0)，但判断<em>h</em><sub>0</sub>不成立，犯了“以真为假”的错误。第二类错误是<em>h</em><sub>0</sub>实际不成立(即θ∈嘷1)，但判断它成立，犯了“以假为真”的错误（见表）。这里嘷0，嘷1分别是使假设<em>h</em><sub>0</sub>成立或不成立的θ的集合，显然嘷=嘷0+嘷1。当θ∈嘷0，样本X(即X1，X2，…，Xn组成的向量)∈HR，其概率<em>P</em>θ(X∈HR)就是犯第一类错误的概率α；当θ∈嘷1，样本X∈HA，其概率就是犯第二类错误的概率β。通常人们不希望轻易拒绝<em>h</em><sub>0</sub>，例如工厂的产品一般是合格的，出厂进行抽样检查时不希望轻易地被认为不合格，于是在限定犯第一类错误的概率不超过某个指定值α（称为检验水平）的条件下，寻求犯第二类错误的概率尽可能小的检验方法。为了描述检验的好坏，称θ的函数<em>P</em>θ(X∈HR)为检验的功效函数。例如上述产品检验的例子中，所采用的检验可以是：当样品中的废品个数超过一定限度时，认为该批产品不合格，否则就认为合格。这个检验的功效函数有图示的形状，图中的 p0、p1、α、β根据需要选定。这种图形清楚地描述了犯两类错误的概率。</p><p>​        <strong>优良性准则</strong> 　基于奈曼－皮尔森理论及<a href="https://baike.baidu.com/item/统计决策理论">统计决策理论</a>，可以提出一些准则，来比较为检验同一假设而提出的各种检验。较重要的准则有：</p><p>​        <strong>一致最大功效(UMP)准则</strong> 　欲检验<em>h</em><sub>0</sub>:θ∈嘷0，h1:θ∈嘷1；当给定检验水平α后，在所有满足的可供选择的检验HR中，是否有一个最好的，亦即：是否存在拒绝域H，使得对于所有θ∈嘷1及一切检验水平为α的H皆有。若这样的检验存在，则称HR为检验水平α的一致最大功效检验，简称UMP检验。奈曼与皮尔森在1933年提出了著名的奈曼-皮尔森引理。这是对<a href="https://baike.baidu.com/item/%E7%AE%80%E5%8D%95%E5%81%87%E8%AE%BE">简单假设</a>寻求UMP检验的一个构造性的结果，即此时<a href="https://baike.baidu.com/item/%E4%BC%BC%E7%84%B6%E6%AF%94">似然比</a>检验就是UMP检验。对某些<a href="https://baike.baidu.com/item/%E5%A4%8D%E5%90%88%E5%81%87%E8%AE%BE">复合假设</a>也找到了 UMP检验，但并不是所有情况都存在 UMP检验。因此有必要在对检验作某些限制下寻找最大功效检验或建立另外一些优良性准则。</p><p>​        <strong>无偏性准则</strong> 　要求检验在备择假设<em>h</em>1成立时作出正确判断的概率不小于检验水平<em>α</em>，这就是说在<em>h</em><sub>0</sub>不成立时拒绝<em>h</em><sub>0</sub>的概率要不小于在<em>h</em><sub>0</sub>成立时拒绝<em>h</em><sub>0</sub>的概率，这种性质称为无偏性，具有这种性质的检验称为无偏检验。显然，如果在无偏检验中存在一致最大功效检验就称为一致最大功效无偏检验（简称UMPU检验）。UMP检验不存在时，仍可能有UMPU检验存在。例如正态总体中<a href="https://baike.baidu.com/item/方差">方差</a>未知时，为检验均值<em>μ</em>=<em>μ</em>0的<em>t</em>检验就是UMPU检验，但不是UMP检验。</p><p>​        因为假设检验在统计决策理论中是一种特殊的统计决策问题，两类错误影响可用特殊损失来表示。例如选取特殊的<a href="https://baike.baidu.com/item/损失函数">损失函数</a>，使正确判断时损失为零，错判时损失为1。它就可归结为犯第一类错误的概率<em>α</em>和犯第二类错误的概率<em>β</em>。这同用功效函数<strong>P</strong>θ(<em>X</em>∈HR)来叙述是一致的。因此把统计决策理论中容许性、同变性、<a href="https://baike.baidu.com/item/%E8%B4%9D%E5%8F%B6%E6%96%AF">贝叶斯</a>决策、最小化最大等概念引进来，而得到容许检验、同变检验、贝叶斯检验和最小化最大检验。在同变检验限制下，又可以建立一致最大功效同变检验的概念。这些准则又可作为假设检验的优良性准则，从而扩大了假设检验的内容。</p><p>​        寻求在一定准则下的最优检验是很困难的，何况这种最优检验有时并不存在。于是提出了若干依据直观的<a href="https://baike.baidu.com/item/推理法">推理法</a>，其中最重要的是似然比法。</p><p>​        <strong>似然比检验</strong>　运用与最大似然估计（见<a href="https://baike.baidu.com/item/点估计">点估计</a>）类似的原理，可得到似然比检验法。设样本<em>X</em>的分布密度即<a href="https://baike.baidu.com/item/似然函数">似然函数</a>为<em>l</em>(尣，<em>θ</em>)，<em>θ</em>∈嘷，欲检验的假设为<em>h</em><sub>0</sub>:<em>θ</em>∈嘷0，称为似然比。显然0≤(尣)≤1，当(尣)太小时就拒绝<em>h</em><sub>0</sub>，否则接受<em>h</em><sub>0</sub>，其临界值<em>λ</em>0由检验水平<em>α</em> 和(尣)在<em>h</em><sub>0</sub>成立时的分布确定，即。然而，在一般情况下，寻求(尣的精确分布并不容易。1938年S.S.威尔克斯证明了：在相当广泛的条件下，-2l<em>n</em>(尣)是渐近Ⅹ分布的， 这就为大样本的似然比检验提供了实行的可能。</p><p>用似然比法导出的重要检验有：</p><p>​        <strong>U检验</strong> 　若总体遵从正态分布<em>N</em>(<em>μ</em>，<em>σ</em>)，其中<em>σ</em>已知，<em>X</em>=(<em>X</em>1，<em>X</em>2，…，<em>X</em>n)是从总体中抽取的简单随机样本，记，则遵从标准正态分布<em>N</em>(0，1)，于是可考虑对μ的以下几种假设的检验，其中<em>μ</em>0是给定的常数，<em>α</em>为检验的水平，<em>u</em>α为标准正态分布的上<em>α</em>分位数。上述检验称为<em>U</em> 检验。</p><p>​        <strong>t检验</strong> 　若总体服从正态分布<em>N</em>(<em>μ</em>，<em>σ</em>)，但<em>σ</em>未知，记，，则<em>t</em>=遵从自由度为<em>n</em>-1的<em>t</em>分布，可对μ有以下的水平为<em>α</em>的检验，其中<em>t</em>α为自由度为<em>n</em>-1的<em>t</em>分布的上<em>α</em>分位数。这些检验称为<em>t</em>检验。</p><p>​        <strong>F检验</strong> 若<em>X</em>=（<em>X</em>1，<em>X</em>2，…，）及<em>Y</em>=（<em>Y</em>1，<em>Y</em>2，…，）分别为来自正态总体<em>N</em>（<em>μ</em>1，<em>σ</em>娝）及<em>N</em>（<em>μ</em>2，<em>σ</em>娤）的简单随机样本，记 ，，，，则遵从自由度为<em>n</em>1-1，<em>n</em>2-1的<em>F</em>分布，对比较<em>σ</em>娝与<em>σ</em>娤的假设有以下的水平为<em>α</em>的检验，其中<em>F</em>α为自由度为(<em>n</em>1-1，<em>n</em>2-1)的<em>F</em>分布的上<em>α</em>分位数。这些检验称为<em>F</em>检验，在方差分析中有广泛的应用。</p><h2 id="1-3-基本步骤"><a href="#1-3-基本步骤" class="headerlink" title="1.3 基本步骤"></a>1.3 基本步骤</h2><p>1、提出检验假设又称无效假设，符号是<em>h</em><sub>0</sub>；备择假设的符号是H<sub>1</sub>。</p><p><em>h</em><sub>0</sub>：样本与总体或样本与样本间的差异是由抽样误差引起的；</p><p>H<sub>1</sub>：样本与总体或样本与样本间存在本质差异；</p><p>预先设定的检验水准为0.05；当检验假设为真，但被错误地拒绝的概率，记作α，通常取α=0.05或α=0.01。</p><p>2、选定统计方法，由样本观察值按相应的公式计算出统计量的大小，如X2值、t值等。根据资料的类型和特点，可分别选用Z检验，T检验，<a href="https://baike.baidu.com/item/秩和检验">秩和检验</a>和<a href="https://baike.baidu.com/item/卡方检验">卡方检验</a>等。</p><p>3、根据统计量的大小及其分布确定检验假设成立的可能性P的大小并判断结果。若P&gt;α，结论为按α所取水准不显著，不拒绝<em>h</em><sub>0</sub>，即认为差别很可能是由于抽样误差造成的，在统计上不成立；如果P≤α，结论为按所取α水准显著，拒绝<em>h</em><sub>0</sub>，接受H<sub>1</sub>，则认为此差别不大可能仅由抽样误差所致，很可能是实验因素不同造成的，故在统计上成立。P值的大小一般可通过查阅相应的界值表得到。</p><p>​        <u>教学中的做法:</u></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.根据实际情况提出原假设和备择假设；</span><br><span class="line">2.根据假设的特征，选择合适的检验统计量；</span><br><span class="line">3.根据样本观察值，计算检验统计量的观察值(obs)；</span><br><span class="line">4.选择许容显著性水平，并根据相应的统计量的统计分布表查出相应的临界值(ctrit)；</span><br><span class="line">5.根据检验统计量观察值的位置决定原假设取舍。</span><br></pre></td></tr></table></figure><h2 id="1-4-意义"><a href="#1-4-意义" class="headerlink" title="1.4  意义"></a>1.4  意义</h2><p>假设检验是<a href="https://baike.baidu.com/item/抽样推断">抽样推断</a>中的一项重要内容。它是根据原资料作出一个总体指标是否等于某一个数值，某一<a href="https://baike.baidu.com/item/随机变量">随机变量</a>是否服从某种<a href="https://baike.baidu.com/item/概率分布">概率分布</a>的假设，然后利用样本资料采用一定的统计方法计算出有关检验的统计量，依据一定的概率原则，以较小的风险来判断估计数值与总体数值(或者估计分布与实际分布)是否存在显著差异，是否应当接受原假设选择的一种检验方法。</p><p>用样本指标估计总体指标，其结论有的完全可靠，有的只有不同程度的可靠性，需要进一步加以检验和证实。通过检验，对样本指标与假设的总体指标之间是否存在差别作出判断，是否接受原假设。这里必须明确，进行检验的目的不是怀疑样本指标本身是否计算正确，而是为了分析样本指标和总体指标之间是否存在显著差异。从这个意义上，假设检验又称为显著性检验。</p><p>进行假设检验，先要对假设进行陈述。通过下例加以说明。</p><p>例如，设某工厂制造某种产品的某种精度服从<a href="https://baike.baidu.com/item/平均数">平均数</a>为方差的<a href="https://baike.baidu.com/item/正态分布">正态分布</a>，据过去的数据，已知平均数为75，方差为100。若经过技术革新，改进了制造方法，出现了平均数大于75，方差没有变更，但仍存在平均数不超过75的可能性。试陈述为统计假设。</p><p>根据上述情况，可有两种假设，(1) 平均数不超过75，(2)平均数大于75，即如果我们把(1)作为原假设，即被检验的假设，称作零假设，记作H<sub>0</sub>，如果其他假设相对于零假设来说，是约定的、补充的假设，则就是备择的，故称为备择假设或对立假设，记作H<sub>1</sub>。</p><p>还须指出，哪个是零假设，哪个是备择假设，是无关紧要的。我们关心的问题，是要探索哪一个假设被接受的问题。被接受的假设是要作为推理的基础。在实际问题中，一般要考虑事情发生的逻辑顺序和关心的事件，来设立零假设和备择假设。</p><p>在作出了统计假设之后，就要采用适当的方法来决定是否应该接受零假设。由于运用统计方法所遇到的问题不同，因而解决问题的方法也不尽相同。但其解决方法的基本思想却是一致的，即都是“概率反证法”思想，即：</p><p>(1)为了检验一个零假设(即虚拟假设)是否成立， 先假定它是成立的，然后看接受这个假设之后，是否会导致不合理结果。如果结果是合理的，就接受它；如不合理，则否定原假设。</p><p>(2)所谓导致不合理结果，就是看是否在一次观察中， 出现小概率事件。通常把出现小概率事件的概率记为0，即显著性水平。 它在次数<a href="https://baike.baidu.com/item/函数">函数</a>图形中是<a href="https://baike.baidu.com/item/曲线">曲线</a>两端或一端的面积。因此，从统计检验来说，就涉及到<a href="https://baike.baidu.com/item/双侧检验">双侧检验</a>和单侧检验问题。在实践中采用何类检验是由实际问题的性质来决定的。一般可以这样考虑：</p><p>①<a href="https://baike.baidu.com/item/双侧检验">双侧检验</a>。如果检验的目的是检验抽样的样本统计量与假设参数的差数是否过大(无论是正方向还是负方向)，就把风险平分在右侧和左侧。比如显著性水平为0.05，即概率曲线左右两侧各占，即0.025。</p><p>②单侧检验。这种检验只注意估计值是否偏高或偏低。如只注意偏低，则临界值在左侧，称左侧检验；如只注意偏高，则临界值在右侧，称右侧检验。</p><p>对总体的参数的检量，是通过由样本计算的统计量来实现的。所以检验统计量起着决策者的作用。</p><p><strong>参数估计与假设检验</strong></p><p>统计推断是由样本的信息来推测母体性能的一种方法，它又可以分为两类问题，即<strong>参数估计</strong>和<strong>假设检验</strong>。实际生产和科学实验中，大量的问题是在获得一批数据后，要对<a href="https://baike.baidu.com/item/母体">母体</a>的某一参数进行估计和检验。</p><p>例如，我们对45钢的<a href="https://baike.baidu.com/item/断裂韧性">断裂韧性</a>作了测定，取得了一批数据，然后要求45钢断裂韧性的平均值，或要求45钢断裂韧性的单侧下限值，或要求45钢断裂韧性的分散度(即<a href="https://baike.baidu.com/item/离散系数">离散系数</a>)，这就是<strong>参数估计</strong>的问题。</p><p>又如，经过长期的积累，知道了某材料的<a href="https://baike.baidu.com/item/断裂韧性">断裂韧性</a>的平均值和标准差，经改进热处理后，又测得一批数据，试问新工艺与老工艺相比是否有显著差异，这就是<strong>假设检验</strong>的问题。</p><p>这样可以看出，参数估计是假设检验的第一步，没有参数估计，也就无法完成假设检验。</p><h2 id="1-5-应用"><a href="#1-5-应用" class="headerlink" title="1.5 应用"></a>1.5 应用</h2><p>在雷达检测中，目标是产生假设的源，它可使用两个假设：H<sub>1</sub>和H<sub>0</sub>，分别表示目标存在(H<sub>1</sub>)和不存在(H<sub>0</sub>)。这是二元简单假设检验。二元数字通信问题也是简单假设检验。如果假设中含有目标未知参量，则是复合假设检验。m元通信问题也是复合假设检验。如果未知参量是随机变化的，则是随机参量信号的假设检验。</p><p>通信系统和雷达系统常用的最佳准则，是最小错误概率准则，即最大后验概率准则。以雷达检测为例：目标是源，它可使用的两个假设是H<sub>1</sub>和H<sub>0</sub>。接收端收到样本X(雷达回波)后，判定H<sub>1</sub>为真（目标存在），或判定H<sub>0</sub>为真（目标不存在概率可分别表示为p(H<sub>1</sub>|X)和p(H<sub>0</sub>|X)，称为后验概率。最大后验概率准则的判决规则是，若</p><script type="math/tex; mode=display">\frac{P(H_{1}|X)}{P(H_{2}|X)}>1</script><p>则判定H<sub>1</sub>为真(选择H<sub>1</sub>)；否则判定H<sub>0</sub>为真。</p><h1 id="2、显著性检验"><a href="#2、显著性检验" class="headerlink" title="2、显著性检验"></a>2、显著性检验</h1><p>显著性检验（significance test）就是事先对<a href="https://baike.baidu.com/item/总体/919248">总体</a>（<a href="https://baike.baidu.com/item/随机变量/828980">随机变量</a>）的参数或总体分布形式做出一个<a href="https://baike.baidu.com/item/假设/1524526">假设</a>，然后利用样本信息来判断这个假设（备择假设）是否合理，即判断总体的真实情况与原假设是否有显著性差异。或者说，显著性检验要判断样本与我们对总体所做的假设之间的差异是纯属机会变异，还是由我们所做的假设与总体真实情况之间不一致所引起的。 显著性检验是针对我们对总体所做的假设做检验，其原理就是“小概率事件实际不可能性原理”来接受或否定假设。</p><p>抽样实验会产生<a href="https://baike.baidu.com/item/抽样误差/9921064">抽样误差</a>，对实验资料进行比较分析时，不能仅凭两个结果（平均数或率）的不同就作出结论，而是要进行统计学分析，鉴别出两者差异是抽样误差引起的，还是由特定的实验处理引起的。</p><h2 id="2-1-含义"><a href="#2-1-含义" class="headerlink" title="2.1 含义"></a>2.1 含义</h2><p>显著性检验即用于实验处理组与对照组或两种不同处理的效应之间是否有差异，以及这种差异是否显著的方法。</p><p>常把一个要检验的假设记作<em>H</em><sub>0</sub>,称为原假设（或<a href="https://baike.baidu.com/item/零假设">零假设</a>） (null hypothesis) ，与<em>H</em><sub>0</sub>对立的假设记作<em>H</em><sub>1</sub>，称为备择假设(alternative hypothesis) 。</p><p>⑴ 在原假设为真时，决定放弃原假设，称为第一类错误，其出现的<a href="https://baike.baidu.com/item/概率">概率</a>通常记作α；</p><p>⑵ 在原假设不真时，决定不放弃原假设，称为第二类错误，其出现的概率通常记作β</p><p>(3)α+β 不一定等于1<sup> [2]</sup>  。</p><p>通常只限定犯第一类错误的最大概率α， 不考虑犯第二类错误的概率β。这样的假设 检验又称为显著性检验，概率α称为<a href="https://baike.baidu.com/item/显著性水平">显著性水平</a>。</p><p>最常用的α值为0.01、0.05、0.10等。一般情况下，根据研究的问题，如果放弃真假设损失大，为减少这类错误，α取值小些 ，反之，α取值大些。</p><h2 id="2-2-目的"><a href="#2-2-目的" class="headerlink" title="2.2 目的"></a>2.2 目的</h2><p>为什么要进行显著性检验进行显著性检验是为了消除第一类错误和第二类错误。通常情况下，α水平就是第一类错误。第一类错误是零假设为真却被错误拒绝的概率。第二类错误(β)是零假设为误却被错误接受的概率或是研究假设为真却被拒绝的概率。如果P值小于某个事先确定的水平，理论上则拒绝零假设，反之，如果P值大于某个事先确定的水平，理论上则不拒绝零假设。常用的显著性水平是0.05，0.01和0.001<sup>[2]</sup> 。不同的水平各有优缺点。水平越小，判定显著性的证据就越充分，但是不拒绝错误零假设的风险，犯第二类错误的可能性就越大，统计效力(就越低。选择水平不可避免地要在第一类错误和第二类错误之间做出权衡。如果犯第一类错误造成的后果不严重，比如在试探性研究中，我们可以将α水平定得高一些，如0.05或0.1。如果研究样本很小，为了提高统计效力，我们在某些研究中也不妨提高口水平。但是，如果犯第一类错误造成的后果很严重，比如我们要基于某项研究发现决定是否在全国推行某项教学改革，我们则需要将α水平定得低一些，如0.01或0.001。</p><h2 id="2-3-常用的检验"><a href="#2-3-常用的检验" class="headerlink" title="2.3 常用的检验"></a>2.3 常用的检验</h2><h3 id="2-3-1-t检验"><a href="#2-3-1-t检验" class="headerlink" title="2.3.1 t检验"></a>2.3.1 t检验</h3><p>T检验，亦称student t检验（Student’s t test），主要用于样本含量较小（例如n &lt; 30），<a href="https://baike.baidu.com/item/总体标准差/3861969">总体标准差</a>σ未知的<a href="https://baike.baidu.com/item/正态分布/829892">正态分布</a>。 [2.1]</p><blockquote id="fn_2.1"><sup>2.1</sup>. Fisher Box, Joan. Guinness, Gosset, Fisher, and Small Samples. Statistical Science. 1987, 2 (1): 45–52.<a href="#reffn_2.1" title="Jump back to footnote [2.1] in the text."> &#8617;</a></blockquote><p> T检验是用t分布理论来推论差异发生的概率，从而比较两个平均数的差异是否显著。它与f检验、<a href="https://baike.baidu.com/item/卡方检验/2591853">卡方检验</a>并列。t检验是<strong>戈斯特</strong>为了观测酿酒质量而发明的,并于1908年在Biometrika上公布 [2.2]  。</p><blockquote id="fn_2.2"><sup>2.2</sup>. 尹希果主编．计量经济学原理与操作：重庆大学出版社，2009.09：37<a href="#reffn_2.2" title="Jump back to footnote [2.2] in the text."> &#8617;</a></blockquote><p><strong>适用条件</strong></p><p>(1) 已知一个总体均数；</p><p>(2) 可得到一个<a href="https://baike.baidu.com/item/样本均数">样本均数</a>及该样本<a href="https://baike.baidu.com/item/标准差">标准差</a>；</p><p>(3) 样本来自正态或近似正态总体 [2.3]。</p><p><strong>主要分类</strong></p><p>t检验可分为单总体检验和双总体检验，以及配对样本检验 <sup>[2.1]</sup>。</p><p><strong>1）单总体检验</strong></p><p>单总体t检验是检验一个<a href="https://baike.baidu.com/item/样本平均数">样本平均数</a>与一个已知的<a href="https://baike.baidu.com/item/总体平均数">总体平均数</a>的差异是否显著。当<a href="https://baike.baidu.com/item/总体分布">总体分布</a>是正态分布，如总体标准差未知且<a href="https://baike.baidu.com/item/样本容量">样本容量</a>小于30，那么样本平均数与总体平均数的<a href="https://baike.baidu.com/item/离差">离差</a><a href="https://baike.baidu.com/item/统计量">统计量</a>呈t分布。</p><p>单总体t检验统计量为：</p><script type="math/tex; mode=display">t = \frac{\bar{X}-\mu}{\frac{\delta_{x}}{\sqrt{n-1}}}</script><p>其中，$i = 1, …, n$, $\bar{x} = \frac{\sum<em>{i=1}^{n}x</em>{i}}{n}$ 为样本平均数，$\delta$ 、$s = \sqrt{\frac{\sum<em>{i=1}^{n}(x</em>{i}-\bar{x})^{2}}{n-1}}$ 为样本标准差，$n$为样本数。该统计量$t$在零假说：$\mu = \mu_{0}$ 为真的条件下服从自由度为 n-1 的 t分布。</p><p><strong>2）双总体检验</strong></p><p><strong>双总体t检验</strong>是检验两个<a href="https://baike.baidu.com/item/样本平均数">样本平均数</a>与其各自所代表的总体的差异是否显著。双总体t检验又分为两种情况，一是独立样本t检验（各实验处理组之间毫无相关存在，即为独立样本），该检验用于检验两组非相关样本被试所获得的数据的<a href="https://baike.baidu.com/item/差异性">差异性</a>；一是配对样本t检验，用于检验匹配而成的两组被试获得的数据或同组被试在不同条件下所获得的数据的差异性，这两种情况组成的样本即为相关样本。</p><p>（1）独立样本t检验<a href="https://baike.baidu.com/item/统计量">统计量</a>为：</p><script type="math/tex; mode=display">t = \frac{\bar{X_{1}}-\bar{X_{2}}}{\sqrt{\frac{(n_{1}-1)S_{1}^{2}+(n_{2}-1)S_{2}^{2}}{n_{1}+n_{2}-2}}(\frac{1}{n_{1}}+\frac{1}{n_{2}})}</script><p>$S<em>{1}^{2}$ 和$S</em>{2}^{2}$为两<a href="https://baike.baidu.com/item/样本方差">样本方差</a>；$n<em>{1}$ 和 $n</em>{2}$为两<a href="https://baike.baidu.com/item/样本容量">样本容量</a>。 </p><p>（2）配对样本检验</p><p><strong>配对样本t检验</strong>可视为单样本<em>t</em>检验的扩展，不过检验的对象由一群来自常态分配独立样本更改为二群配对样本之观测值之差。若二配对样本<em>x</em>1<em>i</em>与<em>x</em>2<em>i</em>之差为<em>d**i</em>=<em>x</em>1<em>i</em>−<em>x</em>2<em>i</em>独立，且来自常态分配，则<em>d**i</em>之母体期望值<em>μ</em>是否为<em>μ</em>0可利用以下统计量：</p><script type="math/tex; mode=display">t = \frac{\bar{d}-\mu_{0}}{\frac{s_{d}}{\sqrt{n}}}</script><p>其中，$i = 1, …, n, \bar{d} = \frac{\sum<em>{i=1}^{n}d</em>{i}}{n}$ 为配对样本差值之平均数，$s<em>{d} = \sqrt{\frac{\sum</em>{i=1}^{n}(d<em>{i}-\bar{d})^{2}}{n-1}}$ 为配对样本差值之标准偏差，$n$ 为配对样本数。该统计量 $t$ 在零假说：$\mu = \mu</em>{0}$ 为真的条件下服从自由度为 $n−1$ 的<a href="https://baike.baidu.com/item/t分布">t分布</a>。</p><p><strong>检验步骤</strong></p><p>下面以一个实例的单总体t检验对t检验做一说明： [2.4] </p><p>问题：难产儿出生数n = 35，体重均值 $\bar{x}=3.42, S = 0.40$, 一般婴儿出生体重 μ0= 3.30（大规模调查获得），问相同否？</p><p>解：</p><p>​        <strong>1.建立假设、确定检验水准α</strong></p><p>​        H0：μ = μ0 （零假设null hypothesis）</p><p>​        H1：μ ≠ μ0（备择假设alternative hypothesis）</p><p>​        双侧检验，检验水准：α=0.05</p><p>​        <strong>2.计算检验统计量</strong></p><script type="math/tex; mode=display">t = \frac{\bar{x}-\mu_{0}}{\frac{S}{\sqrt{n}}}\\=1.77\\</script><h3 id="2-3-2-t‘-检验"><a href="#2-3-2-t‘-检验" class="headerlink" title="2.3.2 t‘ 检验"></a>2.3.2 t<sup>‘</sup> 检验</h3><h3 id="2-3-3-U检验"><a href="#2-3-3-U检验" class="headerlink" title="2.3.3 U检验"></a>2.3.3 U检验</h3><h3 id="2-3-4-方差分析"><a href="#2-3-4-方差分析" class="headerlink" title="2.3.4 方差分析"></a>2.3.4 方差分析</h3><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] 邓奋发. MATLAB R2015b概率与数理统计[M]. 北京：清华大学出版社, 2017.01.第139页.</p><p>[2] 张厚粲, 徐建平. 现代心理与教育统计学[M]. 北京师范大学出版社, 2004.</p><p>[3] 张凤菊, 刘晓娟, 赵丽平,等. 数据差异显著性检验[J]. 农机使用与维修, 2012(4):51-52.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;1、假设检验&quot;&gt;&lt;a href=&quot;#1、假设检验&quot; class=&quot;headerlink&quot; title=&quot;1、假设检验&quot;&gt;&lt;/a&gt;1、假设检验&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;假设检验&lt;/strong&gt;是&lt;a href=&quot;https://ba</summary>
      
    
    
    
    <category term="数据检验" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E6%A3%80%E9%AA%8C/"/>
    
    
    <category term="假设检验" scheme="http://example.com/tags/%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C/"/>
    
    <category term="方差分析" scheme="http://example.com/tags/%E6%96%B9%E5%B7%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
